{"version":3,"sources":["../../../packages/StdLib/index.ts","../../../packages/HTML/index.ts","../../../packages/StdLib/index.ts","../../../packages/Math/index.ts","../../../packages/StdLib/index.ts","../../../packages/Math/index.ts","../../../packages/Color/index.ts","../../../packages/Synth/index.ts","../../../node_modules/@tonaljs/pitch/index.ts","../../../node_modules/@tonaljs/pitch-interval/index.ts","../../../node_modules/@tonaljs/pitch-note/index.ts","../../../node_modules/@tonaljs/pitch-distance/index.ts","../../../node_modules/@tonaljs/core/index.ts","../../../node_modules/@tonaljs/collection/index.ts","../../../node_modules/@tonaljs/pcset/index.ts","../../../node_modules/@tonaljs/chord-type/index.ts","../../../node_modules/@tonaljs/chord-type/data.ts","../../../node_modules/@tonaljs/chord-detect/index.ts","../../../node_modules/@tonaljs/interval/index.ts","../../../node_modules/@tonaljs/scale-type/index.ts","../../../node_modules/@tonaljs/scale-type/data.ts","../../../node_modules/@tonaljs/chord/index.ts","../../../node_modules/@tonaljs/duration-value/data.ts","../../../node_modules/@tonaljs/duration-value/index.ts","../../../node_modules/@tonaljs/midi/index.ts","../../../node_modules/@tonaljs/note/index.ts","../../../node_modules/@tonaljs/roman-numeral/index.ts","../../../node_modules/@tonaljs/key/index.ts","../../../node_modules/@tonaljs/mode/index.ts","../../../node_modules/@tonaljs/scale/index.ts","../../../node_modules/@tonaljs/voice-leading/index.ts","../../../node_modules/@tonaljs/voicing-dictionary/index.ts","../../../node_modules/@tonaljs/voicing-dictionary/data.ts","../../../node_modules/@tonaljs/voicing/index.ts","../../../packages/StdLib/index.ts","../../../node_modules/@tonaljs/pitch/index.ts","../../../node_modules/@tonaljs/pitch-interval/index.ts","../../../node_modules/@tonaljs/pitch-note/index.ts","../../../node_modules/@tonaljs/pitch-distance/index.ts","../../../node_modules/@tonaljs/interval/index.ts","../../../node_modules/@tonaljs/core/index.ts","../../../node_modules/@tonaljs/midi/index.ts","../../../node_modules/@tonaljs/note/index.ts","../../../node_modules/@tonaljs/collection/index.ts","../../../node_modules/@tonaljs/pcset/index.ts","../../../node_modules/@tonaljs/chord-type/index.ts","../../../node_modules/@tonaljs/chord-type/data.ts","../../../node_modules/@tonaljs/chord-detect/index.ts","../../../node_modules/@tonaljs/scale-type/index.ts","../../../node_modules/@tonaljs/scale-type/data.ts","../../../node_modules/@tonaljs/chord/index.ts","../../../node_modules/@tonaljs/scale/index.ts","../../../node_modules/@tonaljs/roman-numeral/index.ts","../../../node_modules/@tonaljs/key/index.ts","../../../packages/TonalObjects/index.ts","../../../packages/StdLib/index.ts","../../../packages/Math/index.ts","../../../packages/Color/index.ts","../../../node_modules/@tonaljs/pitch/index.ts","../../../node_modules/@tonaljs/pitch-interval/index.ts","../../../node_modules/@tonaljs/pitch-note/index.ts","../../../node_modules/@tonaljs/pitch-distance/index.ts","../../../node_modules/@tonaljs/core/index.ts","../../../node_modules/@tonaljs/collection/index.ts","../../../node_modules/@tonaljs/pcset/index.ts","../../../node_modules/@tonaljs/chord-type/index.ts","../../../node_modules/@tonaljs/chord-type/data.ts","../../../node_modules/@tonaljs/chord-detect/index.ts","../../../node_modules/@tonaljs/interval/index.ts","../../../node_modules/@tonaljs/scale-type/index.ts","../../../node_modules/@tonaljs/scale-type/data.ts","../../../node_modules/@tonaljs/chord/index.ts","../../../node_modules/@tonaljs/duration-value/data.ts","../../../node_modules/@tonaljs/duration-value/index.ts","../../../node_modules/@tonaljs/midi/index.ts","../../../node_modules/@tonaljs/note/index.ts","../../../node_modules/@tonaljs/roman-numeral/index.ts","../../../node_modules/@tonaljs/key/index.ts","../../../node_modules/@tonaljs/mode/index.ts","../../../node_modules/@tonaljs/scale/index.ts","../../../node_modules/@tonaljs/voice-leading/index.ts","../../../node_modules/@tonaljs/voicing-dictionary/index.ts","../../../node_modules/@tonaljs/voicing-dictionary/data.ts","../../../node_modules/@tonaljs/voicing/index.ts","../../../packages/StdLib/index.ts","../../../node_modules/@tonaljs/pitch/index.ts","../../../node_modules/@tonaljs/pitch-interval/index.ts","../../../node_modules/@tonaljs/pitch-note/index.ts","../../../node_modules/@tonaljs/pitch-distance/index.ts","../../../node_modules/@tonaljs/interval/index.ts","../../../node_modules/@tonaljs/core/index.ts","../../../node_modules/@tonaljs/midi/index.ts","../../../node_modules/@tonaljs/note/index.ts","../../../node_modules/@tonaljs/collection/index.ts","../../../node_modules/@tonaljs/pcset/index.ts","../../../node_modules/@tonaljs/chord-type/index.ts","../../../node_modules/@tonaljs/chord-type/data.ts","../../../node_modules/@tonaljs/chord-detect/index.ts","../../../node_modules/@tonaljs/scale-type/index.ts","../../../node_modules/@tonaljs/scale-type/data.ts","../../../node_modules/@tonaljs/chord/index.ts","../../../node_modules/@tonaljs/scale/index.ts","../../../node_modules/@tonaljs/roman-numeral/index.ts","../../../node_modules/@tonaljs/key/index.ts","../../../packages/TonalObjects/index.ts","../../../packages/chordView/index.ts","../../../packages/timeAnd/index.ts","../index.ts"],"sourcesContent":["export const console_green = \"\\u001b[32m\";\nexport const console_reset = \"\\u001b[0m\";\n\nexport const _throw = <E extends Error>(e: E) => { throw e; };  // 文の式化\nexport const assertNotNull = <T>(value: T | null, error = new TypeError(\"null value received\")) => value !== null ? value : _throw(error);\nexport const assertNotUndefined = <T>(value: T | undefined, error = new TypeError(\"undefined value received\")) => value !== undefined ? value : _throw(error);\nexport const assertNonNullable = <T>(value: T | null | undefined) => assertNotNull(assertNotUndefined(value));\nexport const assertNotNaN = (value: number) => isNaN(value) ? _throw(new TypeError(\"NaN value received\")) : value;\nexport const castToNumber = (value: string) => assertNotNaN(Number(value));\n\nexport type recurrentArray<T> = T | recurrentArray<T>[];\nexport function Arraying<T>(e: recurrentArray<T>): T[] {\n  const concat = function (arr: recurrentArray<T>[]): T[] {\n    let res: T[] = [];\n    for (const e of arr) {\n      res = res.concat(Arraying(e));\n    }\n    return res;\n  };\n  return e instanceof Array ? concat(e) : [e];\n}\n\n// 引数には any が入る.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const hasSameValue = (o1: any, o2: any) => {\n  if (o1 === o2) { return true; } // same object\n  if (o1 == null) { return false; } // because the other is not null\n  if (o2 == null) { return false; } // because the other is not null\n  if (Object.keys(o1).length != Object.keys(o2).length) { return false; }\n  for (const key in o1) {\n    if (!(key in o2)) { return false; }\n    if (typeof o1[key] === \"object\") {\n      if (!hasSameValue(o1[key], o2[key])) { return false; } // deep check\n    } else if (o1[key] != o2[key]) { return false; }\n  }\n  return true;\n};\n\nexport class IdDictionary<Key extends keyof any> { // eslint-disable-line @typescript-eslint/no-explicit-any\n  #item2id: { [key: keyof any]: number } = {}; // eslint-disable-line @typescript-eslint/no-explicit-any\n  #id2item: Key[] = [];\n  get length() {\n    return this.#id2item.length;\n  }\n  register(item: Key) {\n    const id = this.#item2id[item];\n    if (id !== undefined) { return id; }\n    else {\n      const i = this.#id2item.length;\n      this.#item2id[item] = i;\n      this.#id2item[i] = item;\n      return i;\n    }\n  }\n  getId(item: Key) { return assertNotUndefined(this.#item2id[item], new ReferenceError(`key ${String(item)} not found`)); }\n  getItem(id: number) { return assertNotUndefined(this.#id2item[id], new ReferenceError(`id ${String(id)} not found`)); }\n  showAll() { return this.#id2item; }\n}\n\n// エラーを期待するテストのための, 予想外のエラーを受け取った時のエラー\nexport class UnexpectedErrorThrownError extends Error { constructor(message = \"\") { super(message); } }\nexport class NotImplementedError extends Error { constructor(message = \"\") { super(message); } }\n\nexport class Assertion {\n  #assertion: boolean;\n  constructor(assertion: boolean) {\n    this.#assertion = assertion;\n  }\n  onFailed(errorExecution: () => void) { this.#assertion || errorExecution(); }\n}\n\n","import { Arraying, recurrentArray } from \"../StdLib\";\n\ntype attribute = { [key: string]: string | number };\n\ndeclare global {\n  interface Element {\n    setAttributes: (attributes: attribute) => Element;\n    setText: (text: string) => Element;\n    appendChildren: (elements: recurrentArray<Element>) => Element;\n  }\n}\n\nElement.prototype.setAttributes = function (attributes) {\n  for (const key in attributes) {\n    this.setAttribute(key, String(attributes[key]));\n  }\n  return this;\n};\nElement.prototype.setText = function (text) {\n  this.appendChild(document.createTextNode(text));\n  return this;\n};\nElement.prototype.appendChildren = function (nodes: recurrentArray<Element>) {\n  for (const node of Arraying(nodes)) {\n    this.appendChild(node);\n  }\n  return this;\n};\n\nfunction setComponentsToElement<T extends Element>(\n  element: T,\n  attributes: attribute = {},\n  text = \"\",\n  children: recurrentArray<Element> = [],\n) {\n  for (const key in attributes) {\n    element.setAttribute(key, String(attributes[key]));\n  }\n  element.appendChild<Text>(document.createTextNode(text));\n  Arraying(children).forEach(child => element.appendChild(child));\n  return element;\n}\n\nfunction htmlElement<T extends keyof HTMLElementTagNameMap>(\n  tag: T,\n  attributes: attribute = {},\n  text = \"\",\n  children: recurrentArray<Element> = [],\n) {\n  return setComponentsToElement(\n    document.createElement<T>(tag),\n    attributes,\n    text,\n    children,\n  );\n}\n\nfunction svgElement<T extends keyof SVGElementTagNameMap>(\n  qualifiedName: T,\n  attributes: attribute = {},\n  text = \"\",\n  children: recurrentArray<Element> = [],\n) {\n  return setComponentsToElement(\n    document.createElementNS(\"http://www.w3.org/2000/svg\", qualifiedName),\n    attributes,\n    text,\n    children,\n  );\n}\n\nexport class SVG {\n  static svg(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return svgElement(\"svg\", attributes, text, children);\n  }\n  static g(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return svgElement(\"g\", attributes, text, children);\n  }\n  static circle(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return svgElement(\"circle\", attributes, text, children);\n  }\n  static rect(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return svgElement(\"rect\", attributes, text, children);\n  }\n  static polygon(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return svgElement(\"polygon\", attributes, text, children);\n  }\n  static line(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return svgElement(\"line\", attributes, text, children);\n  }\n  static text(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return svgElement(\"text\", attributes, text, children);\n  }\n}\n\nexport class HTML {\n  // getters\n  //get  () { return document.getElementsByTagName(\"\") }\n  static get base() {\n    return document.getElementsByTagName(\"base\")[0];\n  }\n  static get head() {\n    return document.getElementsByTagName(\"head\")[0];\n  }\n  static get body() {\n    return document.getElementsByTagName(\"body\")[0];\n  }\n  static get title() {\n    return document.getElementsByTagName(\"title\")[0];\n  }\n\n  // creators\n  //(attributes: attribute={}, text: string = \"\", children: recurrentArray<Element> = []) { return htmlElement(\"\", attributes, text, children) }\n  static div(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"div\", attributes, text, children);\n  }\n  static span(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"span\", attributes, text, children);\n  }\n  static p(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"p\", attributes, text, children);\n  }\n  static h1(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"h1\", attributes, text, children);\n  }\n  static h2(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"h2\", attributes, text, children);\n  }\n  static h3(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"h3\", attributes, text, children);\n  }\n  static h4(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"h4\", attributes, text, children);\n  }\n  static h5(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"h5\", attributes, text, children);\n  }\n  static h6(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"h6\", attributes, text, children);\n  }\n  static ol(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"ol\", attributes, text, children);\n  }\n  static li(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"li\", attributes, text, children);\n  }\n  static script(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"script\", attributes, text, children);\n  }\n  static link(\n    attributes: attribute = {},\n    text = \"\",\n    children: recurrentArray<Element> = [],\n  ) {\n    return htmlElement(\"link\", attributes, text, children);\n  }\n}\n","export const console_green = \"\\u001b[32m\";\nexport const console_reset = \"\\u001b[0m\";\n\nexport const _throw = <E extends Error>(e: E) => { throw e; };  // 文の式化\nexport const assertNotNull = <T>(value: T | null, error = new TypeError(\"null value received\")) => value !== null ? value : _throw(error);\nexport const assertNotUndefined = <T>(value: T | undefined, error = new TypeError(\"undefined value received\")) => value !== undefined ? value : _throw(error);\nexport const assertNonNullable = <T>(value: T | null | undefined) => assertNotNull(assertNotUndefined(value));\nexport const assertNotNaN = (value: number) => isNaN(value) ? _throw(new TypeError(\"NaN value received\")) : value;\nexport const castToNumber = (value: string) => assertNotNaN(Number(value));\n\nexport type recurrentArray<T> = T | recurrentArray<T>[];\nexport function Arraying<T>(e: recurrentArray<T>): T[] {\n  const concat = function (arr: recurrentArray<T>[]): T[] {\n    let res: T[] = [];\n    for (const e of arr) {\n      res = res.concat(Arraying(e));\n    }\n    return res;\n  };\n  return e instanceof Array ? concat(e) : [e];\n}\n\n// 引数には any が入る.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const hasSameValue = (o1: any, o2: any) => {\n  if (o1 === o2) { return true; } // same object\n  if (o1 == null) { return false; } // because the other is not null\n  if (o2 == null) { return false; } // because the other is not null\n  if (Object.keys(o1).length != Object.keys(o2).length) { return false; }\n  for (const key in o1) {\n    if (!(key in o2)) { return false; }\n    if (typeof o1[key] === \"object\") {\n      if (!hasSameValue(o1[key], o2[key])) { return false; } // deep check\n    } else if (o1[key] != o2[key]) { return false; }\n  }\n  return true;\n};\n\nexport class IdDictionary<Key extends keyof any> { // eslint-disable-line @typescript-eslint/no-explicit-any\n  #item2id: { [key: keyof any]: number } = {}; // eslint-disable-line @typescript-eslint/no-explicit-any\n  #id2item: Key[] = [];\n  get length() {\n    return this.#id2item.length;\n  }\n  register(item: Key) {\n    const id = this.#item2id[item];\n    if (id !== undefined) { return id; }\n    else {\n      const i = this.#id2item.length;\n      this.#item2id[item] = i;\n      this.#id2item[i] = item;\n      return i;\n    }\n  }\n  getId(item: Key) { return assertNotUndefined(this.#item2id[item], new ReferenceError(`key ${String(item)} not found`)); }\n  getItem(id: number) { return assertNotUndefined(this.#id2item[id], new ReferenceError(`id ${String(id)} not found`)); }\n  showAll() { return this.#id2item; }\n}\n\n// エラーを期待するテストのための, 予想外のエラーを受け取った時のエラー\nexport class UnexpectedErrorThrownError extends Error { constructor(message = \"\") { super(message); } }\nexport class NotImplementedError extends Error { constructor(message = \"\") { super(message); } }\n\nexport class Assertion {\n  #assertion: boolean;\n  constructor(assertion: boolean) {\n    this.#assertion = assertion;\n  }\n  onFailed(errorExecution: () => void) { this.#assertion || errorExecution(); }\n}\n\n","import { hasSameValue } from \"../StdLib\";\n\nexport const not = (b: boolean): boolean => !b;\nexport const getRange = (begin: number, end: number, step = 1): number[] => [...Array(Math.abs(end - begin))].map((_, i) => i * step + begin);\nexport const getZeros = (length: number): number[] => [...Array(length)].map(e => 0); // eslint-disable-line @typescript-eslint/no-unused-vars\nexport const vFunc = (\n  a: number[],\n  b: number | number[],\n  f: (a: number, b: number) => number,\n) => {\n  if (typeof b == \"number\") { return a.map(e => f(e, Number(b))); }\n  if (b instanceof Array) { return a.map((_, i) => f(a[i], b[i])); }\n  throw TypeError(\"arguments of vFunc must be (a:number[], b:number, f:(a:number,b:number)=>number\",);\n};\n\nexport const genArr = (n: number, f: (i: number) => number) => [...Array(n)].map((_, i) => f(i));\nexport const matTrans = (matrix: number[][]) => getRange(0, matrix[0].length).map(i => getRange(0, matrix.length).map(j => matrix[j][i]),);\nexport const forAll = <T>(set: T[], condition: (element: T) => boolean) => {\n  for (const e of set) {\n    if (condition(e) == false) { return false; }\n  }\n  return true;\n};\nexport const forSome = <T>(set: T[], condition: (element: T) => boolean) => {\n  for (const e of set) {\n    if (condition(e)) { return true; }\n  }\n  return false;\n};\nexport const isSubSet = <T>(set: T[], superset: T[]) => forAll(set, e => superset.includes(e));\nexport const isSuperSet = <T>(set: T[], subset: T[]) => isSubSet(subset, set);\nexport const sameArray = <T>(arr1: T[], arr2: T[]) => hasSameValue(arr1, arr2);\n\n/** @brief avoid bug from negative value */\nexport const mod = (n: number, m: number): number => (n % m + m) % m;\nexport const decimal = (n: number) => n - Math.floor(n);\nexport const bool2number = (b: boolean) => b ? 1 : 0;\nexport const removeFromArray = <T>(array: T[], rmv: T[]) => array.filter(e => not(rmv.includes(e)));\nexport const ringShift = <T>(array: T[], b: number) => {\n  const N = array.length;\n  const bm = mod(b, N);\n  return array.concat(array).slice(N - bm, 2 * N - bm);\n};\nexport const vAdd = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => a + b);\nexport const vSub = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => a - b);\nexport const vMul = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => a * b);\nexport const vDiv = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => a / b);\nexport const vMod = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => mod(a, b));\nexport const vGet = <T>(array: T[], indexes: number[]) => indexes.map(e => array[e]);\nexport const max = (array: number[]) => array.reduce((p, c) => Math.max(p, c));\nexport const min = (array: number[]) => array.reduce((p, c) => Math.min(p, c));\nexport const argmax = (array: number[]) => array.map((e, i) => [e, i]).reduce((p, c) => c[0] >= p[0] ? c : p)[1];\nexport const argmin = (array: number[]) => array.map((e, i) => [e, i]).reduce((p, c) => c[0] <= p[0] ? c : p)[1];\n\nexport const getOnehot = (positionOfOnes: number[], n = 0) => [...Array(Math.max(Math.max(...positionOfOnes) + 1, n))].map((_, i) => bool2number(positionOfOnes.includes(i)),);\nexport const getOnehotInMod = (positionOfOnes: number[] | number, m = 1) => {\n  if (typeof positionOfOnes === \"number\") { return getOnehot(vMod([positionOfOnes], m), m); }\n  return getOnehot(vMod(positionOfOnes, m), m);\n};\n\nexport const vSum = (...arrays: number[][]) => arrays.reduce((p, c) => vAdd(p, c));\nexport const totalSum = (array: number[]) => array.reduce((p, c) => p + c);\nexport const totalProd = (array: number[]) => array.reduce((p, c) => p * c);\n\nexport const complex = {\n  multiply: (c1: number[], c2: number[]) => [c1[0] * c2[0] - c1[1] * c2[1], c1[0] * c2[1] + c1[1] * c2[0]],\n  add: (c1: number[], c2: number[]) => [c1[0] + c2[0], c1[1] + c2[1]],\n  subtract: (c1: number[], c2: number[]) => [c1[0] - c2[0], c1[1] - c2[1]]\n};\nexport class fftUtil {\n  private static readonly cache: { [index: number]: number[][] } = {};\n  static exponent(k: number, N: number) {\n    const x = -2 * Math.PI * (k / N);\n    this.cache[N] ||= [];\n    this.cache[N][k] ||= [Math.cos(x), Math.sin(x)];\n    return this.cache[N][k];\n  }\n};\n\ntype RealOrComplex = number | number[]\n// real number fft\n// thanks for fft-js\nexport const fft = (seq: (RealOrComplex)[]): number[][] => {\n  const N = Math.pow(2, Math.ceil(Math.log2(seq.length)));\n  if (N !== seq.length) {\n    const zero = Array.isArray(seq[0]) ? [0, 0] : 0;\n    seq = [...Array(N)].map((_, i) => i < seq.length ? seq[i] : zero);\n  }\n  const res: number[][] = [];\n\n  // expected real number\n  if (N == 1) {\n    if (Array.isArray(seq[0])) { return [[seq[0][0], seq[0][1]]]; }\n    else { return [[seq[0], 0]]; }\n  }\n\n  const X_evens = fft(seq.filter((_, i) => i % 2 === 0));\n  const X_odds = fft(seq.filter((_, i) => i % 2 == 1));\n\n  for (let k = 0; k < N / 2; k++) {\n    const t = X_evens[k];\n    const e = complex.multiply(fftUtil.exponent(k, N), X_odds[k]);\n    res[k] = complex.add(t, e);\n    res[k + N / 2] = complex.subtract(t, e);\n  }\n  return res;\n};\n\nexport const ifft = (seq: number[][]): number[][] => {\n  const ps = fft(seq.map(e => [e[1], e[0]]));\n  return ps.map(e => [e[1] / ps.length, e[0] / ps.length]);\n};\n\nexport const convolution = (seq1: RealOrComplex[], seq2: RealOrComplex[]) => {\n  const f_seq1 = fft(seq1);\n  const f_seq2 = fft(seq2);\n  const mul = f_seq1.map((e, i) => complex.multiply(e, f_seq2[i]));\n  return ifft(mul);\n};\n\nexport const correlation = (seq1: RealOrComplex[], seq2: RealOrComplex[]) => convolution(seq1, seq2.reverse());\n","export const console_green = \"\\u001b[32m\";\nexport const console_reset = \"\\u001b[0m\";\n\nexport const _throw = <E extends Error>(e: E) => { throw e; };  // 文の式化\nexport const assertNotNull = <T>(value: T | null, error = new TypeError(\"null value received\")) => value !== null ? value : _throw(error);\nexport const assertNotUndefined = <T>(value: T | undefined, error = new TypeError(\"undefined value received\")) => value !== undefined ? value : _throw(error);\nexport const assertNonNullable = <T>(value: T | null | undefined) => assertNotNull(assertNotUndefined(value));\nexport const assertNotNaN = (value: number) => isNaN(value) ? _throw(new TypeError(\"NaN value received\")) : value;\nexport const castToNumber = (value: string) => assertNotNaN(Number(value));\n\nexport type recurrentArray<T> = T | recurrentArray<T>[];\nexport function Arraying<T>(e: recurrentArray<T>): T[] {\n  const concat = function (arr: recurrentArray<T>[]): T[] {\n    let res: T[] = [];\n    for (const e of arr) {\n      res = res.concat(Arraying(e));\n    }\n    return res;\n  };\n  return e instanceof Array ? concat(e) : [e];\n}\n\n// 引数には any が入る.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const hasSameValue = (o1: any, o2: any) => {\n  if (o1 === o2) { return true; } // same object\n  if (o1 == null) { return false; } // because the other is not null\n  if (o2 == null) { return false; } // because the other is not null\n  if (Object.keys(o1).length != Object.keys(o2).length) { return false; }\n  for (const key in o1) {\n    if (!(key in o2)) { return false; }\n    if (typeof o1[key] === \"object\") {\n      if (!hasSameValue(o1[key], o2[key])) { return false; } // deep check\n    } else if (o1[key] != o2[key]) { return false; }\n  }\n  return true;\n};\n\nexport class IdDictionary<Key extends keyof any> { // eslint-disable-line @typescript-eslint/no-explicit-any\n  #item2id: { [key: keyof any]: number } = {}; // eslint-disable-line @typescript-eslint/no-explicit-any\n  #id2item: Key[] = [];\n  get length() {\n    return this.#id2item.length;\n  }\n  register(item: Key) {\n    const id = this.#item2id[item];\n    if (id !== undefined) { return id; }\n    else {\n      const i = this.#id2item.length;\n      this.#item2id[item] = i;\n      this.#id2item[i] = item;\n      return i;\n    }\n  }\n  getId(item: Key) { return assertNotUndefined(this.#item2id[item], new ReferenceError(`key ${String(item)} not found`)); }\n  getItem(id: number) { return assertNotUndefined(this.#id2item[id], new ReferenceError(`id ${String(id)} not found`)); }\n  showAll() { return this.#id2item; }\n}\n\n// エラーを期待するテストのための, 予想外のエラーを受け取った時のエラー\nexport class UnexpectedErrorThrownError extends Error { constructor(message = \"\") { super(message); } }\nexport class NotImplementedError extends Error { constructor(message = \"\") { super(message); } }\n\nexport class Assertion {\n  #assertion: boolean;\n  constructor(assertion: boolean) {\n    this.#assertion = assertion;\n  }\n  onFailed(errorExecution: () => void) { this.#assertion || errorExecution(); }\n}\n\n","import { hasSameValue } from \"../StdLib\";\n\nexport const not = (b: boolean): boolean => !b;\nexport const getRange = (begin: number, end: number, step = 1): number[] => [...Array(Math.abs(end - begin))].map((_, i) => i * step + begin);\nexport const getZeros = (length: number): number[] => [...Array(length)].map(e => 0); // eslint-disable-line @typescript-eslint/no-unused-vars\nexport const vFunc = (\n  a: number[],\n  b: number | number[],\n  f: (a: number, b: number) => number,\n) => {\n  if (typeof b == \"number\") { return a.map(e => f(e, Number(b))); }\n  if (b instanceof Array) { return a.map((_, i) => f(a[i], b[i])); }\n  throw TypeError(\"arguments of vFunc must be (a:number[], b:number, f:(a:number,b:number)=>number\",);\n};\n\nexport const genArr = (n: number, f: (i: number) => number) => [...Array(n)].map((_, i) => f(i));\nexport const matTrans = (matrix: number[][]) => getRange(0, matrix[0].length).map(i => getRange(0, matrix.length).map(j => matrix[j][i]),);\nexport const forAll = <T>(set: T[], condition: (element: T) => boolean) => {\n  for (const e of set) {\n    if (condition(e) == false) { return false; }\n  }\n  return true;\n};\nexport const forSome = <T>(set: T[], condition: (element: T) => boolean) => {\n  for (const e of set) {\n    if (condition(e)) { return true; }\n  }\n  return false;\n};\nexport const isSubSet = <T>(set: T[], superset: T[]) => forAll(set, e => superset.includes(e));\nexport const isSuperSet = <T>(set: T[], subset: T[]) => isSubSet(subset, set);\nexport const sameArray = <T>(arr1: T[], arr2: T[]) => hasSameValue(arr1, arr2);\n\n/** @brief avoid bug from negative value */\nexport const mod = (n: number, m: number): number => (n % m + m) % m;\nexport const decimal = (n: number) => n - Math.floor(n);\nexport const bool2number = (b: boolean) => b ? 1 : 0;\nexport const removeFromArray = <T>(array: T[], rmv: T[]) => array.filter(e => not(rmv.includes(e)));\nexport const ringShift = <T>(array: T[], b: number) => {\n  const N = array.length;\n  const bm = mod(b, N);\n  return array.concat(array).slice(N - bm, 2 * N - bm);\n};\nexport const vAdd = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => a + b);\nexport const vSub = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => a - b);\nexport const vMul = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => a * b);\nexport const vDiv = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => a / b);\nexport const vMod = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => mod(a, b));\nexport const vGet = <T>(array: T[], indexes: number[]) => indexes.map(e => array[e]);\nexport const max = (array: number[]) => array.reduce((p, c) => Math.max(p, c));\nexport const min = (array: number[]) => array.reduce((p, c) => Math.min(p, c));\nexport const argmax = (array: number[]) => array.map((e, i) => [e, i]).reduce((p, c) => c[0] >= p[0] ? c : p)[1];\nexport const argmin = (array: number[]) => array.map((e, i) => [e, i]).reduce((p, c) => c[0] <= p[0] ? c : p)[1];\n\nexport const getOnehot = (positionOfOnes: number[], n = 0) => [...Array(Math.max(Math.max(...positionOfOnes) + 1, n))].map((_, i) => bool2number(positionOfOnes.includes(i)),);\nexport const getOnehotInMod = (positionOfOnes: number[] | number, m = 1) => {\n  if (typeof positionOfOnes === \"number\") { return getOnehot(vMod([positionOfOnes], m), m); }\n  return getOnehot(vMod(positionOfOnes, m), m);\n};\n\nexport const vSum = (...arrays: number[][]) => arrays.reduce((p, c) => vAdd(p, c));\nexport const totalSum = (array: number[]) => array.reduce((p, c) => p + c);\nexport const totalProd = (array: number[]) => array.reduce((p, c) => p * c);\n\nexport const complex = {\n  multiply: (c1: number[], c2: number[]) => [c1[0] * c2[0] - c1[1] * c2[1], c1[0] * c2[1] + c1[1] * c2[0]],\n  add: (c1: number[], c2: number[]) => [c1[0] + c2[0], c1[1] + c2[1]],\n  subtract: (c1: number[], c2: number[]) => [c1[0] - c2[0], c1[1] - c2[1]]\n};\nexport class fftUtil {\n  private static readonly cache: { [index: number]: number[][] } = {};\n  static exponent(k: number, N: number) {\n    const x = -2 * Math.PI * (k / N);\n    this.cache[N] ||= [];\n    this.cache[N][k] ||= [Math.cos(x), Math.sin(x)];\n    return this.cache[N][k];\n  }\n};\n\ntype RealOrComplex = number | number[]\n// real number fft\n// thanks for fft-js\nexport const fft = (seq: (RealOrComplex)[]): number[][] => {\n  const N = Math.pow(2, Math.ceil(Math.log2(seq.length)));\n  if (N !== seq.length) {\n    const zero = Array.isArray(seq[0]) ? [0, 0] : 0;\n    seq = [...Array(N)].map((_, i) => i < seq.length ? seq[i] : zero);\n  }\n  const res: number[][] = [];\n\n  // expected real number\n  if (N == 1) {\n    if (Array.isArray(seq[0])) { return [[seq[0][0], seq[0][1]]]; }\n    else { return [[seq[0], 0]]; }\n  }\n\n  const X_evens = fft(seq.filter((_, i) => i % 2 === 0));\n  const X_odds = fft(seq.filter((_, i) => i % 2 == 1));\n\n  for (let k = 0; k < N / 2; k++) {\n    const t = X_evens[k];\n    const e = complex.multiply(fftUtil.exponent(k, N), X_odds[k]);\n    res[k] = complex.add(t, e);\n    res[k + N / 2] = complex.subtract(t, e);\n  }\n  return res;\n};\n\nexport const ifft = (seq: number[][]): number[][] => {\n  const ps = fft(seq.map(e => [e[1], e[0]]));\n  return ps.map(e => [e[1] / ps.length, e[0] / ps.length]);\n};\n\nexport const convolution = (seq1: RealOrComplex[], seq2: RealOrComplex[]) => {\n  const f_seq1 = fft(seq1);\n  const f_seq2 = fft(seq2);\n  const mul = f_seq1.map((e, i) => complex.multiply(e, f_seq2[i]));\n  return ifft(mul);\n};\n\nexport const correlation = (seq1: RealOrComplex[], seq2: RealOrComplex[]) => convolution(seq1, seq2.reverse());\n","import { mod } from \"../Math\";\n\n// 0 <= h < 360; 0 <= s <= 1; 0 <= b <= 1\n// h |-> [red, yellow, green, cyan, blue, magenta]\nexport const hsv2rgb = (h: number, s: number, v: number) => {\n  const H = mod(h, 360) / 60;\n  const x = s * Math.abs(mod(H + 1, 2) - 1);\n  const rgb = [[s, x, 0], [x, s, 0], [0, s, x], [0, x, s], [x, 0, s], [s, 0, x]][Math.floor(H)];\n  return rgb.map(e => Math.floor((e + 1 - s) * v * 255));\n};\n\nexport const rgbToString = (rgb: number[]) => '#' + rgb.map(e => ('0' + e.toString(16)).slice(-2)).join('');\n","const audioCtx = new AudioContext();\n\n// 正規乱数を生成\nfunction normal_rand(m: number, s: number) {\n  const r = Math.sqrt(-2 * Math.log(Math.random()));\n  const t = 2 * Math.PI * Math.random();\n  return [r * Math.cos(t), r * Math.sin(t)];\n}\n\n// オシレータオブジェクトを作る\nfunction createOscillator(\n  ctx: AudioContext,\n  parentNode: AudioNode,\n  type: OscillatorType,\n  frequency: number,\n  detune: number,\n) {\n  const osc = ctx.createOscillator();\n  osc.type = type;\n  osc.frequency.value = frequency;\n  osc.detune.value = detune;\n  osc.connect(parentNode);\n  return osc;\n}\n\n// ゲインオブジェクトを作る\nfunction createGain(ctx: AudioContext, parentNode: AudioNode, gain: number) {\n  const gainNode = ctx.createGain();\n  gainNode.gain.value = gain;\n  gainNode.connect(parentNode);\n  return gainNode;\n}\n\n// 任意個の音符を鳴らす\nexport function play(\n  hzs = [330, 440, 550],\n  begin_sec: number,\n  length_sec: number,\n) {\n  const ctx = audioCtx;\n  const parent = audioCtx.destination;\n\n  const peak = 1 / hzs.length;\n  const attack = 0.02; // [s]\n  const decay = 0.4; // [s]\n  const sustain = 0.7 * peak;\n  const release = 0.1 * length_sec; // [s]\n\n  const detune = 0;\n  const detune_delta = 1;\n  hzs.map((hz, i) => {\n    const gain_node = createGain(ctx, parent, 0);\n    const osc = createOscillator(\n      ctx,\n      gain_node,\n      \"sawtooth\",\n      hz,\n      detune + detune_delta * i,\n    );\n\n    const start = audioCtx.currentTime + begin_sec; // 現在時刻[s]\n    const delay = Math.random() * 0.1; // 0~0.1[s]の遅延ノイズ\n    const audioParam = gain_node.gain;\n    osc.start(start);\n    audioParam.cancelScheduledValues(start);\n    audioParam.linearRampToValueAtTime(0, 0.002 + start + delay); // 初期振幅を 0 にする\n    audioParam.linearRampToValueAtTime(peak, start + delay + attack); // attack [s] かけて peak まで増加\n    audioParam.linearRampToValueAtTime(sustain, start + delay + attack + decay); // decay[s] かけて sustain まで減少\n    audioParam.linearRampToValueAtTime(sustain, start + delay + length_sec); // note_length[s] に離鍵\n    audioParam.exponentialRampToValueAtTime(\n      0.001,\n      start + length_sec + release,\n    ); // release[s] かけて 0 に減衰\n\n    osc.stop(start + length_sec + release);\n  });\n}\n\nexport function play_note(hzs = [330, 440, 550], bpm = 60, note_value = 4) {\n  play(hzs, 0, 240 / (bpm * note_value));\n}\n","export interface NamedPitch {\n  readonly name: string;\n}\n\n/*** @deprecated use NamedPitch */\nexport interface Named {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\" &&\n    !isNaN(pitch.step) &&\n    !isNaN(pitch.alt)\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n","import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nconst NoInterval: Interval = Object.freeze({\n  empty: true,\n  name: \"\",\n  num: NaN,\n  q: \"\" as Quality,\n  type: \"\" as Type,\n  step: NaN,\n  alt: NaN,\n  dir: NaN as Direction,\n  simple: NaN,\n  semitones: NaN,\n  chroma: NaN,\n  coord: [] as unknown as IntervalCoordinates,\n  oct: NaN,\n});\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n","import {\n  coordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type NoteWithOctave = string;\nexport type PcName = string;\nexport type NoteName = NoteWithOctave | PcName;\nexport type NoteLiteral = NoteName | Pitch | NamedPitch;\n\nexport interface Note extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: NoteName;\n  readonly letter: string;\n  readonly acc: string;\n  readonly pc: PcName;\n  readonly chroma: number;\n  readonly height: number;\n  readonly coord: PitchCoordinates;\n  readonly midi: number | null;\n  readonly freq: number | null;\n}\n\nconst NoNote: Note = Object.freeze({\n  empty: true,\n  name: \"\",\n  letter: \"\",\n  acc: \"\",\n  pc: \"\",\n  step: NaN,\n  alt: NaN,\n  chroma: NaN,\n  height: NaN,\n  coord: [] as unknown as PitchCoordinates,\n  midi: null,\n  freq: null,\n});\n\nconst cache: Map<NoteLiteral | undefined, Note> = new Map();\n\nexport const stepToLetter = (step: number) => \"CDEFGAB\".charAt(step);\nexport const altToAcc = (alt: number): string =>\n  alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\nexport const accToAlt = (acc: string): number =>\n  acc[0] === \"b\" ? -acc.length : acc.length;\n\n/**\n * Given a note literal (a note name or a note object), returns the Note object\n * @example\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport function note(src: NoteLiteral): Note {\n  const stringSrc = JSON.stringify(src);\n\n  const cached = cache.get(stringSrc);\n  if (cached) {\n    return cached;\n  }\n\n  const value =\n    typeof src === \"string\"\n      ? parse(src)\n      : isPitch(src)\n        ? note(pitchName(src))\n        : isNamedPitch(src)\n          ? note(src.name)\n          : NoNote;\n  cache.set(stringSrc, value);\n  return value;\n}\n\ntype NoteTokens = [string, string, string, string];\n\nconst REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * @private\n */\nexport function tokenizeNote(str: string): NoteTokens {\n  const m = REGEX.exec(str) as string[];\n  return m\n    ? [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]]\n    : [\"\", \"\", \"\", \"\"];\n}\n\n/**\n * @private\n */\nexport function coordToNote(noteCoord: PitchCoordinates): Note {\n  return note(pitch(noteCoord)) as Note;\n}\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\nfunction parse(noteName: NoteName): Note {\n  const tokens = tokenizeNote(noteName);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\n    return NoNote;\n  }\n\n  const letter = tokens[0];\n  const acc = tokens[1];\n  const octStr = tokens[2];\n\n  const step = (letter.charCodeAt(0) + 3) % 7;\n  const alt = accToAlt(acc);\n  const oct = octStr.length ? +octStr : undefined;\n  const coord = coordinates({ step, alt, oct });\n\n  const name = letter + acc + octStr;\n  const pc = letter + acc;\n  const chroma = (SEMI[step] + alt + 120) % 12;\n  const height =\n    oct === undefined\n      ? mod(SEMI[step] + alt, 12) - 12 * 99\n      : SEMI[step] + alt + 12 * (oct + 1);\n  const midi = height >= 0 && height <= 127 ? height : null;\n  const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\n\n  return {\n    empty: false,\n    acc,\n    alt,\n    chroma,\n    coord,\n    freq,\n    height,\n    letter,\n    midi,\n    name,\n    oct,\n    pc,\n    step,\n  };\n}\n\nfunction pitchName(props: Pitch): NoteName {\n  const { step, alt, oct } = props;\n  const letter = stepToLetter(step);\n  if (!letter) {\n    return \"\";\n  }\n\n  const pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n","import { PitchCoordinates } from \"@tonaljs/pitch\";\nimport {\n  IntervalLiteral,\n  IntervalName,\n  interval as asInterval,\n  coordToInterval,\n} from \"@tonaljs/pitch-interval\";\nimport {\n  NoteLiteral,\n  NoteName,\n  note as asNote,\n  coordToNote,\n} from \"@tonaljs/pitch-note\";\n\n/**\n * Transpose a note by an interval.\n *\n * @param {string} note - the note or note name\n * @param {string} interval - the interval or interval name\n * @return {string} the transposed note name or empty string if not valid notes\n * @example\n * import { transpose } from \"@tonaljs/core\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * transpose(\"D\", \"3M\") // => \"F#\"\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(\n  noteName: NoteLiteral,\n  intervalName: IntervalLiteral | [number, number],\n): NoteName {\n  const note = asNote(noteName);\n  const intervalCoord = Array.isArray(intervalName)\n    ? intervalName\n    : asInterval(intervalName).coord;\n  if (note.empty || !intervalCoord || intervalCoord.length < 2) {\n    return \"\";\n  }\n  const noteCoord = note.coord;\n  const tr: PitchCoordinates =\n    noteCoord.length === 1\n      ? [noteCoord[0] + intervalCoord[0]]\n      : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\n  return coordToNote(tr).name;\n}\n\n// Private\nexport function tonicIntervalsTransposer(\n  intervals: string[],\n  tonic: string | undefined | null,\n) {\n  const len = intervals.length;\n  return (normalized: number) => {\n    if (!tonic) return \"\";\n    const index =\n      normalized < 0 ? (len - (-normalized % len)) % len : normalized % len;\n    const octaves = Math.floor(normalized / len);\n    const root = transpose(tonic, [0, octaves]);\n    return transpose(root, intervals[index]);\n  };\n}\n\n/**\n * Find the interval distance between two notes or coord classes.\n *\n * To find distance between coord classes, both notes must be coord classes and\n * the interval is always ascending\n *\n * @param {Note|string} from - the note or note name to calculate distance from\n * @param {Note|string} to - the note or note name to calculate distance to\n * @return {string} the interval name or empty string if not valid notes\n *\n */\nexport function distance(\n  fromNote: NoteLiteral,\n  toNote: NoteLiteral,\n): IntervalName {\n  const from = asNote(fromNote);\n  const to = asNote(toNote);\n  if (from.empty || to.empty) {\n    return \"\";\n  }\n\n  const fcoord = from.coord;\n  const tcoord = to.coord;\n  const fifths = tcoord[0] - fcoord[0];\n  const octs =\n    fcoord.length === 2 && tcoord.length === 2\n      ? tcoord[1] - fcoord[1]\n      : -Math.floor((fifths * 7) / 12);\n\n  // If it's unison and not pitch class, it can be descending interval (#243)\n  const forceDescending =\n    to.height === from.height &&\n    to.midi !== null &&\n    from.midi !== null &&\n    from.step > to.step;\n  return coordToInterval([fifths, octs], forceDescending).name;\n}\n","import { isNamedPitch } from \"@tonaljs/pitch\";\n\nexport * from \"@tonaljs/pitch\";\nexport * from \"@tonaljs/pitch-distance\";\nexport * from \"@tonaljs/pitch-interval\";\nexport * from \"@tonaljs/pitch-note\";\n\nexport const fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport function deprecate<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ResultFn extends (this: any, ...newArgs: any[]) => ReturnType<ResultFn>,\n>(original: string, alternative: string, fn: ResultFn) {\n  return function (this: unknown, ...args: unknown[]): ReturnType<ResultFn> {\n    // tslint:disable-next-line\n    console.warn(`${original} is deprecated. Use ${alternative}.`);\n    return fn.apply(this, args);\n  };\n}\n\nexport const isNamed = deprecate(\"isNamed\", \"isNamedPitch\", isNamedPitch);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// ascending range\nfunction ascR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Creates a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\n * range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(from: number, to: number): number[] {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n\n/**\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} collection\n * @return {Array} the rotated collection\n *\n * @example\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate<T>(times: number, arr: T[]): T[] {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the collection with the null values removed\n * @function\n * @param {Array} collection\n * @return {Array}\n *\n * @example\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr: any[]): any[] {\n  return arr.filter((n) => n === 0 || n);\n}\n\n/**\n * Randomizes the order of the specified collection in-place, using the Fisher–Yates shuffle.\n *\n * @function\n * @param {Array} collection\n * @return {Array} the collection shuffled\n *\n * @example\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr: any[], rnd = Math.random): any[] {\n  let i: number;\n  let t: any;\n  let m: number = arr.length;\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an collection\n *\n * @param {Array} collection - the collection\n * @return {Array<Array>} an collection with all the permutations\n * @example\n * permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n */\nexport function permutations(arr: any[]): any[] {\n  if (arr.length === 0) {\n    return [[]];\n  }\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(\n      arr.map((e, pos) => {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      }),\n    );\n  }, []);\n}\n\nexport default {\n  compact,\n  permutations,\n  range,\n  rotate,\n  shuffle,\n};\n","import { compact, range, rotate } from \"@tonaljs/collection\";\nimport {\n  Interval,\n  IntervalName,\n  NotFound,\n  Note,\n  NoteName,\n  deprecate,\n  interval,\n  note,\n  transpose,\n} from \"@tonaljs/core\";\n\n/**\n * The properties of a pitch class set\n * @param {number} num - a number between 1 and 4095 (both included) that\n * uniquely identifies the set. It's the decimal number of the chrom.\n * @param {string} chroma - a string representation of the set: a 12-char string\n * with either \"1\" or \"0\" as characters, representing a pitch class or not\n * for the given position in the octave. For example, a \"1\" at index 0 means 'C',\n * a \"1\" at index 2 means 'D', and so on...\n * @param {string} normalized - the chroma but shifted to the first 1\n * @param {number} length - the number of notes of the pitch class set\n * @param {IntervalName[]} intervals - the intervals of the pitch class set\n * *starting from C*\n */\nexport interface Pcset {\n  readonly name: string;\n  readonly empty: boolean;\n  readonly setNum: number;\n  readonly chroma: PcsetChroma;\n  readonly normalized: PcsetChroma;\n  readonly intervals: IntervalName[];\n}\n\nexport const EmptyPcset: Pcset = {\n  empty: true,\n  name: \"\",\n  setNum: 0,\n  chroma: \"000000000000\",\n  normalized: \"000000000000\",\n  intervals: [],\n};\n\nexport type PcsetChroma = string;\nexport type PcsetNum = number;\n\n// UTILITIES\nconst setNumToChroma = (num: number): string =>\n  Number(num).toString(2).padStart(12, \"0\");\nconst chromaToNumber = (chroma: string): number => parseInt(chroma, 2);\nconst REGEX = /^[01]{12}$/;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isChroma(set: any): set is PcsetChroma {\n  return REGEX.test(set);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPcsetNum = (set: any): set is PcsetNum =>\n  typeof set === \"number\" && set >= 0 && set <= 4095;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPcset = (set: any): set is Pcset => set && isChroma(set.chroma);\n\nconst cache: { [key in string]: Pcset } = { [EmptyPcset.chroma]: EmptyPcset };\n\n/**\n * A definition of a pitch class set. It could be:\n * - The pitch class set chroma (a 12-length string with only 1s or 0s)\n * - The pitch class set number (an integer between 1 and 4095)\n * - An array of note names\n * - An array of interval names\n */\nexport type Set =\n  | Partial<Pcset>\n  | PcsetChroma\n  | PcsetNum\n  | NoteName[]\n  | IntervalName[];\n\n/**\n * Get the pitch class set of a collection of notes or set number or chroma\n */\nexport function get(src: Set): Pcset {\n  const chroma: PcsetChroma = isChroma(src)\n    ? src\n    : isPcsetNum(src)\n      ? setNumToChroma(src)\n      : Array.isArray(src)\n        ? listToChroma(src)\n        : isPcset(src)\n          ? src.chroma\n          : EmptyPcset.chroma;\n\n  return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\n}\n\n/**\n * Use Pcset.properties\n * @function\n * @deprecated\n */\nexport const pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\n\n/**\n * Get pitch class set chroma\n * @function\n * @example\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\n */\nexport const chroma = (set: Set) => get(set).chroma;\n\n/**\n * Get intervals (from C) of a set\n * @function\n * @example\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\n */\nconst intervals = (set: Set) => get(set).intervals;\n\n/**\n * Get pitch class set number\n * @function\n * @example\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\n */\nconst num = (set: Set) => get(set).setNum;\n\nconst IVLS = [\n  \"1P\",\n  \"2m\",\n  \"2M\",\n  \"3m\",\n  \"3M\",\n  \"4P\",\n  \"5d\",\n  \"5P\",\n  \"6m\",\n  \"6M\",\n  \"7m\",\n  \"7M\",\n];\n\n/**\n * @private\n * Get the intervals of a pcset *starting from C*\n * @param {Set} set - the pitch class set\n * @return {IntervalName[]} an array of interval names or an empty array\n * if not a valid pitch class set\n */\nexport function chromaToIntervals(chroma: PcsetChroma): IntervalName[] {\n  const intervals = [];\n  for (let i = 0; i < 12; i++) {\n    // tslint:disable-next-line:curly\n    if (chroma.charAt(i) === \"1\") intervals.push(IVLS[i]);\n  }\n  return intervals;\n}\n\nexport function notes(set: Set): NoteName[] {\n  return get(set).intervals.map((ivl) => transpose(\"C\", ivl));\n}\n\n/**\n * Get a list of all possible pitch class sets (all possible chromas) *having\n * C as root*. There are 2048 different chromas. If you want them with another\n * note you have to transpose it\n *\n * @see http://allthescales.org/\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\n */\nexport function chromas(): PcsetChroma[] {\n  return range(2048, 4095).map(setNumToChroma);\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|string} set - the list of notes or pitchChr of the set\n * @param {boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<string>} an array with all the modes of the chroma\n *\n * @example\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\n */\nexport function modes(set: Set, normalize = true): PcsetChroma[] {\n  const pcs = get(set);\n\n  const binary = pcs.chroma.split(\"\");\n  return compact(\n    binary.map((_, i) => {\n      const r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    }),\n  );\n}\n\n/**\n * Test if two pitch class sets are numentical\n *\n * @param {Array|string} set1 - one of the pitch class sets\n * @param {Array|string} set2 - the other pitch class set\n * @return {boolean} true if they are equal\n * @example\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1: Set, s2: Set) {\n  return get(s1).setNum === get(s2).setNum;\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function is curryfied.\n *\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\n * list of notes)\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\n * to test against (chroma or list of notes)\n * @example\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set: Set) {\n  const s = get(set).setNum;\n\n  return (notes: Set | Pcset) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o & s) === o;\n  };\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Set} set - an array of notes or a chroma set string to test against\n * @return {(subset: Set): boolean} a function that given a set\n * returns true if is a subset of the first one\n * @example\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set: Set) {\n  const s = get(set).setNum;\n  return (notes: Set) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o | s) === o;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n *\n * @param {Array<string>} set - the base set to test against\n * @param {string} note - the note to test\n * @return {boolean} true if the note is included in the pcset\n *\n * Can be partially applied\n *\n * @example\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\n * isNoteInCMajor('C4') // => true\n * isNoteInCMajor('C#4') // => false\n */\nexport function isNoteIncludedIn(set: Set) {\n  const s = get(set);\n\n  return (noteName: NoteName): boolean => {\n    const n = note(noteName);\n    return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\n  };\n}\n\n/** @deprecated use: isNoteIncludedIn */\nexport const includes = isNoteIncludedIn;\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|string} set - the pitch class set notes\n * @param {Array|string} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set: Set) {\n  const isIncluded = isNoteIncludedIn(set);\n  return (notes: NoteName[]) => {\n    return notes.filter(isIncluded);\n  };\n}\n\nexport default {\n  get,\n  chroma,\n  num,\n  intervals,\n  chromas,\n  isSupersetOf,\n  isSubsetOf,\n  isNoteIncludedIn,\n  isEqual,\n  filter,\n  modes,\n  notes,\n  // deprecated\n  pcset,\n};\n\n//// PRIVATE ////\n\nfunction chromaRotations(chroma: string): string[] {\n  const binary = chroma.split(\"\");\n  return binary.map((_, i) => rotate(i, binary).join(\"\"));\n}\n\nfunction chromaToPcset(chroma: PcsetChroma): Pcset {\n  const setNum = chromaToNumber(chroma);\n  const normalizedNum = chromaRotations(chroma)\n    .map(chromaToNumber)\n    .filter((n) => n >= 2048)\n    .sort()[0];\n  const normalized = setNumToChroma(normalizedNum);\n\n  const intervals = chromaToIntervals(chroma);\n\n  return {\n    empty: false,\n    name: \"\",\n    setNum,\n    chroma,\n    normalized,\n    intervals,\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction listToChroma(set: any[]): PcsetChroma {\n  if (set.length === 0) {\n    return EmptyPcset.chroma;\n  }\n\n  let pitch: Note | Interval | NotFound;\n  const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < set.length; i++) {\n    pitch = note(set[i]);\n    // tslint:disable-next-line: curly\n    if (pitch.empty) pitch = interval(set[i]);\n    // tslint:disable-next-line: curly\n    if (!pitch.empty) binary[pitch.chroma] = 1;\n  }\n  return binary.join(\"\");\n}\n","import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\nexport type ChordQuality =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  | \"Unknown\";\n\nexport interface ChordType extends Pcset {\n  name: string;\n  quality: ChordQuality;\n  aliases: string[];\n}\nconst NoChordType: ChordType = {\n  ...EmptyPcset,\n  name: \"\",\n  quality: \"Unknown\",\n  intervals: [],\n  aliases: [],\n};\n\ntype ChordTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ChordType[] = [];\nlet index: Record<ChordTypeName, ChordType> = {};\n\n/**\n * Given a chord name or chroma, return the chord properties\n * @param {string} source - chord name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/chord-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ChordTypeName): ChordType {\n  return index[type] || NoChordType;\n}\n\nexport const chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\n\n/**\n * Get all chord (long) names\n */\nexport function names() {\n  return dictionary.map((chord) => chord.name).filter((x) => x);\n}\n\n/**\n * Get all chord symbols\n */\nexport function symbols() {\n  return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\n}\n\n/**\n * Keys used to reference chord types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Return a list of all chord types\n */\nexport function all(): ChordType[] {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a chord to the dictionary.\n * @param intervals\n * @param aliases\n * @param [fullName]\n */\nexport function add(intervals: string[], aliases: string[], fullName?: string) {\n  const quality = getQuality(intervals);\n  const chord = {\n    ...pcset(intervals),\n    name: fullName || \"\",\n    quality,\n    intervals,\n    aliases,\n  };\n  dictionary.push(chord);\n  if (chord.name) {\n    index[chord.name] = chord;\n  }\n  index[chord.setNum] = chord;\n  index[chord.chroma] = chord;\n  chord.aliases.forEach((alias) => addAlias(chord, alias));\n}\n\nexport function addAlias(chord: ChordType, alias: string) {\n  index[alias] = chord;\n}\n\nfunction getQuality(intervals: string[]): ChordQuality {\n  const has = (interval: string) => intervals.indexOf(interval) !== -1;\n  return has(\"5A\")\n    ? \"Augmented\"\n    : has(\"3M\")\n      ? \"Major\"\n      : has(\"5d\")\n        ? \"Diminished\"\n        : has(\"3m\")\n          ? \"Minor\"\n          : \"Unknown\";\n}\n\ndata.forEach(([ivls, fullName, names]: string[]) =>\n  add(ivls.split(\" \"), names.split(\" \"), fullName),\n);\ndictionary.sort((a, b) => a.setNum - b.setNum);\n\nexport default {\n  names,\n  symbols,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n  // deprecated\n  entries,\n  chordType,\n};\n","/**\n * @private\n * Chord List\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\n */\nconst CHORDS: string[][] = [\n  // ==Major==\n  [\"1P 3M 5P\", \"major\", \"M ^  maj\"],\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7 ^7\"],\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9 ^9\"],\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\n  [\"1P 3M 5P 6M 9M\", \"sixth added ninth\", \"6add9 6/9 69 M69\"],\n  [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\n  [\n    \"1P 3M 5P 7M 11A\",\n    \"major seventh sharp eleventh\",\n    \"maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11\",\n  ],\n  // ==Minor==\n  // '''Normal'''\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\n  [\n    \"1P 3m 5P 7M\",\n    \"minor/major seventh\",\n    \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7 -maj7\",\n  ],\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\n  [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\n  // '''Diminished'''\n  [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø -7b5 h7 h\"],\n  // ==Dominant/Seventh==\n  // '''Normal'''\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\n  // '''Altered'''\n  [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\n  // '''Suspended'''\n  [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\n  [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\n  [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\n  [\n    \"1P 4P 5P 7m 9m\",\n    \"suspended fourth flat ninth\",\n    \"b9sus phryg 7b9sus 7b9sus4\",\n  ],\n  // ==Other==\n  [\"1P 5P\", \"fifth\", \"5\"],\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\n  [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\n  [\n    \"1P 3M 5P 7M 9M 11A\",\n    \"major sharp eleventh (lydian)\",\n    \"maj9#11 Δ9#11 ^9#11\",\n  ],\n  // ==Legacy==\n  [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\n  [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\n  [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\n  [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\n  [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\n  [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\n  [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\n  [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\n  [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\n  [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\n  [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\n  [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\n  [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\n  [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\n  [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\n  [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\n  [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\n  [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\n  [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\n  [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\n  [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\n  [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\n  [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\n  [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\n  [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\n  [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\n  [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\n  [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\n  [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\n  [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\n  [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\n  [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\n  [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\n  [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\n  [\"1P 3M 5d\", \"\", \"Mb5\"],\n  [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\n  [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\n  [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\n  [\"1P 3M 5d 7m\", \"\", \"7b5\"],\n  [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\n  [\"1P 3M 7m\", \"\", \"7no5\"],\n  [\"1P 3M 7m 13m\", \"\", \"7b13\"],\n  [\"1P 3M 7m 9M\", \"\", \"9no5\"],\n  [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\n  [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\n  [\"1P 3m 4P 5P\", \"\", \"madd4\"],\n  [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\n  [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\n  [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\n  [\"1P 3m 5P 9M\", \"\", \"madd9\"],\n  [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\n  [\"1P 3m 5d 7M\", \"\", \"oM7\"],\n  [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\n  [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\n  [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\n  [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\n  [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\n  [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\n  [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\n  [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\n  [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\n  [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\n  [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\n  [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\n  [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\n  [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\n  [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\n  [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\n];\n\nexport default CHORDS;\n","import { all, ChordType } from \"@tonaljs/chord-type\";\nimport { note } from \"@tonaljs/core\";\nimport { modes } from \"@tonaljs/pcset\";\n\ninterface FoundChord {\n  readonly weight: number;\n  readonly name: string;\n}\n\nconst namedSet = (notes: string[]) => {\n  const pcToName = notes.reduce<Record<number, string>>((record, n) => {\n    const chroma = note(n).chroma;\n    if (chroma !== undefined) {\n      record[chroma] = record[chroma] || note(n).name;\n    }\n    return record;\n  }, {});\n\n  return (chroma: number) => pcToName[chroma];\n};\n\ntype DetectOptions = {\n  assumePerfectFifth: boolean;\n};\nexport function detect(\n  source: string[],\n  options: Partial<DetectOptions> = {},\n): string[] {\n  const notes = source.map((n) => note(n).pc).filter((x) => x);\n  if (note.length === 0) {\n    return [];\n  }\n\n  const found: FoundChord[] = findMatches(notes, 1, options);\n\n  return found\n    .filter((chord) => chord.weight)\n    .sort((a, b) => b.weight - a.weight)\n    .map((chord) => chord.name);\n}\n\n/* tslint:disable:no-bitwise */\nconst BITMASK = {\n  // 3m 000100000000\n  // 3M 000010000000\n  anyThirds: 384,\n  // 5P 000000010000\n  perfectFifth: 16,\n  // 5d 000000100000\n  // 5A 000000001000\n  nonPerfectFifths: 40,\n  anySeventh: 3,\n};\n\nconst testChromaNumber = (bitmask: number) => (chromaNumber: number) =>\n  Boolean(chromaNumber & bitmask);\nconst hasAnyThird = testChromaNumber(BITMASK.anyThirds);\nconst hasPerfectFifth = testChromaNumber(BITMASK.perfectFifth);\nconst hasAnySeventh = testChromaNumber(BITMASK.anySeventh);\nconst hasNonPerfectFifth = testChromaNumber(BITMASK.nonPerfectFifths);\n\nfunction hasAnyThirdAndPerfectFifthAndAnySeventh(chordType: ChordType) {\n  const chromaNumber = parseInt(chordType.chroma, 2);\n  return (\n    hasAnyThird(chromaNumber) &&\n    hasPerfectFifth(chromaNumber) &&\n    hasAnySeventh(chromaNumber)\n  );\n}\n\nfunction withPerfectFifth(chroma: string): string {\n  const chromaNumber = parseInt(chroma, 2);\n  return hasNonPerfectFifth(chromaNumber)\n    ? chroma\n    : (chromaNumber | 16).toString(2);\n}\n\n/* tslint:enable:no-bitwise */\n\ntype FindMatchesOptions = {\n  assumePerfectFifth: boolean;\n};\nfunction findMatches(\n  notes: string[],\n  weight: number,\n  options: Partial<FindMatchesOptions>,\n): FoundChord[] {\n  const tonic = notes[0];\n  const tonicChroma = note(tonic).chroma;\n  const noteName = namedSet(notes);\n  // we need to test all chromas to get the correct baseNote\n  const allModes = modes(notes, false);\n\n  const found: FoundChord[] = [];\n  allModes.forEach((mode, index) => {\n    const modeWithPerfectFifth =\n      options.assumePerfectFifth && withPerfectFifth(mode);\n    // some chords could have the same chroma but different interval spelling\n    const chordTypes = all().filter((chordType) => {\n      if (\n        options.assumePerfectFifth &&\n        hasAnyThirdAndPerfectFifthAndAnySeventh(chordType)\n      ) {\n        return chordType.chroma === modeWithPerfectFifth;\n      }\n      return chordType.chroma === mode;\n    });\n\n    chordTypes.forEach((chordType) => {\n      const chordName = chordType.aliases[0];\n      const baseNote = noteName(index);\n      const isInversion = index !== tonicChroma;\n      if (isInversion) {\n        found.push({\n          weight: 0.5 * weight,\n          name: `${baseNote}${chordName}/${tonic}`,\n        });\n      } else {\n        found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\n      }\n    });\n  });\n\n  return found;\n}\n\nexport default { detect };\n","import { IntervalCoordinates, NoteCoordinates } from \"@tonaljs/pitch\";\nimport { distance as dist } from \"@tonaljs/pitch-distance\";\nimport {\n  IntervalName,\n  coordToInterval,\n  interval as props,\n} from \"@tonaljs/pitch-interval\";\n\n/**\n * Get the natural list of names\n */\nexport function names(): IntervalName[] {\n  return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\n}\n\n/**\n * Get properties of an interval\n *\n * @function\n * @example\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\n */\nexport const get = props;\n\n/**\n * Get name of an interval\n *\n * @function\n * @example\n * Interval.name('4P') // => \"4P\"\n * Interval.name('P4') // => \"4P\"\n * Interval.name('C4') // => \"\"\n */\nexport const name = (name: string) => props(name).name;\n\n/**\n * Get semitones of an interval\n * @function\n * @example\n * Interval.semitones('P4') // => 5\n */\nexport const semitones = (name: string) => props(name).semitones;\n\n/**\n * Get quality of an interval\n * @function\n * @example\n * Interval.quality('P4') // => \"P\"\n */\nexport const quality = (name: string) => props(name).q;\n\n/**\n * Get number of an interval\n * @function\n * @example\n * Interval.num('P4') // => 4\n */\nexport const num = (name: string) => props(name).num;\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {string} interval - the interval to simplify\n * @return {string} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n */\nexport function simplify(name: IntervalName): IntervalName {\n  const i = props(name);\n  return i.empty ? \"\" : i.simple + i.q;\n}\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {string} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {string} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport function invert(name: IntervalName): IntervalName {\n  const i = props(name);\n  if (i.empty) {\n    return \"\";\n  }\n  const step = (7 - i.step) % 7;\n  const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\n  return props({ step, alt, oct: i.oct, dir: i.dir }).name;\n}\n\n// interval numbers\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitrary, but deterministic.\n *\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {string} the interval name\n * @example\n * Interval.fromSemitones(7) // => \"5P\"\n * Interval.fromSemitones(-7) // => \"-5P\"\n */\nexport function fromSemitones(semitones: number): IntervalName {\n  const d = semitones < 0 ? -1 : 1;\n  const n = Math.abs(semitones);\n  const c = n % 12;\n  const o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n}\n\n/**\n * Find interval between two notes\n *\n * @example\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\n */\nexport const distance = dist;\n\n/**\n * Adds two intervals\n *\n * @function\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the added interval name\n * @example\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\n */\nexport const add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\n\n/**\n * Returns a function that adds an interval\n *\n * @function\n * @example\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\n */\nexport const addTo = (interval: string) => (other: string) =>\n  add(interval, other);\n\n/**\n * Subtracts two intervals\n *\n * @function\n * @param {string} minuendInterval\n * @param {string} subtrahendInterval\n * @return {string} the subtracted interval name\n * @example\n * Interval.subtract('5P', '3M') // => '3m'\n * Interval.subtract('3M', '5P') // => '-3m'\n */\nexport const subtract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\n\nexport function transposeFifths(\n  interval: IntervalName,\n  fifths: number,\n): IntervalName {\n  const ivl = get(interval);\n  if (ivl.empty) return \"\";\n\n  const [nFifths, nOcts, dir] = ivl.coord;\n  return coordToInterval([nFifths + fifths, nOcts, dir]).name;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  num,\n  semitones,\n  quality,\n  fromSemitones,\n  distance,\n  invert,\n  simplify,\n  add,\n  addTo,\n  subtract,\n  transposeFifths,\n};\n\n//// PRIVATE ////\n\ntype Operation = (\n  a: IntervalCoordinates,\n  b: IntervalCoordinates,\n) => NoteCoordinates;\n\nfunction combinator(fn: Operation) {\n  return (a: IntervalName, b: IntervalName): IntervalName | undefined => {\n    const coordA = props(a).coord;\n    const coordB = props(b).coord;\n    if (coordA && coordB) {\n      const coord = fn(coordA, coordB);\n      return coordToInterval(coord).name;\n    }\n  };\n}\n","import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\n/**\n * Properties for a scale in the scale dictionary. It's a pitch class set\n * properties with the following additional information:\n * - name: the scale name\n * - aliases: alternative list of names\n * - intervals: an array of interval names\n */\nexport interface ScaleType extends Pcset {\n  readonly name: string;\n  readonly aliases: string[];\n}\n\nexport const NoScaleType: ScaleType = {\n  ...EmptyPcset,\n  intervals: [],\n  aliases: [],\n};\n\ntype ScaleTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ScaleType[] = [];\nlet index: Record<ScaleTypeName, ScaleType> = {};\n\nexport function names() {\n  return dictionary.map((scale) => scale.name);\n}\n\n/**\n * Given a scale name or chroma, return the scale properties\n *\n * @param {string} type - scale name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/scale-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ScaleTypeName): ScaleType {\n  return index[type] || NoScaleType;\n}\n\nexport const scaleType = deprecate(\n  \"ScaleDictionary.scaleType\",\n  \"ScaleType.get\",\n  get,\n);\n\n/**\n * Return a list of all scale types\n */\nexport function all() {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\n  \"ScaleDictionary.entries\",\n  \"ScaleType.all\",\n  all,\n);\n\n/**\n * Keys used to reference scale types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a scale into dictionary\n * @param intervals\n * @param name\n * @param aliases\n */\nexport function add(\n  intervals: string[],\n  name: string,\n  aliases: string[] = [],\n): ScaleType {\n  const scale = { ...pcset(intervals), name, intervals, aliases };\n  dictionary.push(scale);\n  index[scale.name] = scale;\n  index[scale.setNum] = scale;\n  index[scale.chroma] = scale;\n  scale.aliases.forEach((alias) => addAlias(scale, alias));\n  return scale;\n}\n\nexport function addAlias(scale: ScaleType, alias: string) {\n  index[alias] = scale;\n}\n\ndata.forEach(([ivls, name, ...aliases]: string[]) =>\n  add(ivls.split(\" \"), name, aliases),\n);\n\nexport default {\n  names,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n\n  // deprecated\n  entries,\n  scaleType,\n};\n","// SCALES\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\nconst SCALES: string[][] = [\n  // Basic scales\n  [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\n  [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m\", \"minor\", \"aeolian\"],\n\n  // Jazz common scales\n  [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\n  [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\n  [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\n  [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\n  [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\n  [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\n\n  // Modes\n  [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\n  [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\n  [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\n  [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\n  [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\n\n  // 5-note scales\n  [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\n  [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\n  [\"1P 2M 4P 5P 6M\", \"ritusen\"],\n  [\"1P 2M 4P 5P 7m\", \"egyptian\"],\n  [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\n  [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\n  [\"1P 2m 3m 5P 6m\", \"pelog\"],\n  [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\n  [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\n  [\"1P 2m 4P 5d 7m\", \"iwato\"],\n  [\"1P 2m 4P 5P 7m\", \"in-sen\"],\n  [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\n  [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\n  [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\n  [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\n  [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\n  [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\n  [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\n  [\"1P 2m 3M 5P 6M\", \"scriabin\"],\n  [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\n  [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\n  [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\n  [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\n  [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\n\n  // 6-note scales\n  [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\n  [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\n  [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\n  [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\n  [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\n  [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\n  [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\n  [\"1P 2M 3M 4A 5A 6A\", \"whole tone\", \"messiaen's mode #1\"],\n  [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\n\n  // 7-note scales\n  [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\n  [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\n  [\n    \"1P 2m 2A 3M 4A 6m 7m\",\n    \"altered\",\n    \"super locrian\",\n    \"diminished whole tone\",\n    \"pomeroy\",\n  ],\n  [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\n  [\n    \"1P 2M 3M 4P 5P 6m 7m\",\n    \"mixolydian b6\",\n    \"melodic minor fifth mode\",\n    \"hindu\",\n  ],\n  [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\n  [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\n  [\n    \"1P 2m 3m 4P 5P 6M 7m\",\n    \"dorian b2\",\n    \"phrygian #6\",\n    \"melodic minor second mode\",\n  ],\n  [\n    \"1P 2m 3m 4d 5d 6m 7d\",\n    \"ultralocrian\",\n    \"superlocrian bb7\",\n    \"superlocrian diminished\",\n  ],\n  [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\n  [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\n  // Source https://en.wikipedia.org/wiki/Ukrainian_Dorian_scale\n  [\n    \"1P 2M 3m 4A 5P 6M 7m\",\n    \"dorian #4\",\n    \"ukrainian dorian\",\n    \"romanian minor\",\n    \"altered dorian\",\n  ],\n  [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\n  [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\n  [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\n  [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\n  [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\n  [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\n  [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\n  [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\n  [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\n  [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\n  [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\n  [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\n  [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\n  [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\n  [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\n  [\n    \"1P 2M 3M 4P 5A 6M 7M\",\n    \"major augmented\",\n    \"major #5\",\n    \"ionian augmented\",\n    \"ionian #5\",\n  ],\n  [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\n\n  // 8-note scales\n  [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\n  [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\n  [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\n  [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\n  [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\n  [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\n  [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\n  [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\n  [\n    \"1P 2m 3m 3M 4A 5P 6M 7m\",\n    \"half-whole diminished\",\n    \"dominant diminished\",\n    \"messiaen's mode #2\",\n  ],\n  [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\n  [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\n\n  // 9-note scales\n  [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\n  [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\n\n  // 10-note scales\n  [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\n\n  // 12-note scales\n  [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\n];\n\nexport default SCALES;\n","import { detect } from \"@tonaljs/chord-detect\";\nimport {\n  ChordType,\n  all as chordTypes,\n  get as getChordType,\n} from \"@tonaljs/chord-type\";\nimport { subtract } from \"@tonaljs/interval\";\nimport { isSubsetOf, isSupersetOf } from \"@tonaljs/pcset\";\nimport {\n  distance,\n  tonicIntervalsTransposer,\n  transpose as transposeNote,\n} from \"@tonaljs/pitch-distance\";\nimport { NoteName, note, tokenizeNote } from \"@tonaljs/pitch-note\";\nimport { all as scaleTypes } from \"@tonaljs/scale-type\";\n\nexport { detect } from \"@tonaljs/chord-detect\";\n\ntype ChordNameOrTokens =\n  | string // full name to be parsed\n  | [string] // only the name\n  | [string, string] // tonic, name\n  | [string, string, string]; // tonic, name, bass\ntype ChordNameTokens = [string, string, string]; // [TONIC, SCALE TYPE, BASS]\n\nexport interface Chord extends ChordType {\n  tonic: string | null;\n  type: string;\n  root: string;\n  bass: string;\n  rootDegree: number;\n  symbol: string;\n  notes: NoteName[];\n}\n\nconst NoChord: Chord = {\n  empty: true,\n  name: \"\",\n  symbol: \"\",\n  root: \"\",\n  bass: \"\",\n  rootDegree: 0,\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  quality: \"Unknown\",\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\n//const NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic, chord type and bass\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * This function does NOT check if the bass is part of the chord or not but it\n * only accepts a pitch class as bass\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type, bass]\n * @example\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\n */\nexport function tokenize(name: string): ChordNameTokens {\n  const [letter, acc, oct, type] = tokenizeNote(name);\n  if (letter === \"\") {\n    return tokenizeBass(\"\", name);\n  } else if (letter === \"A\" && type === \"ug\") {\n    return tokenizeBass(\"\", \"aug\");\n  } else {\n    return tokenizeBass(letter + acc, oct + type);\n  }\n}\n\nfunction tokenizeBass(note: string, chord: string): ChordNameTokens {\n  const split = chord.split(\"/\");\n  if (split.length === 1) {\n    return [note, split[0], \"\"];\n  }\n  const [letter, acc, oct, type] = tokenizeNote(split[1]);\n  // Only a pitch class is accepted as bass note\n  if (letter !== \"\" && oct === \"\" && type === \"\") {\n    return [note, split[0], letter + acc];\n  } else {\n    return [note, chord, \"\"];\n  }\n}\n\n/**\n * Get a Chord from a chord name.\n */\nexport function get(src: ChordNameOrTokens): Chord {\n  if (Array.isArray(src)) {\n    return getChord(src[1] || \"\", src[0], src[2]);\n  } else if (src === \"\") {\n    return NoChord;\n  } else {\n    const [tonic, type, bass] = tokenize(src);\n    const chord = getChord(type, tonic, bass);\n    return chord.empty ? getChord(src) : chord;\n  }\n}\n\n/**\n * Get chord properties\n *\n * @param typeName - the chord type name\n * @param [tonic] - Optional tonic\n * @param [root]  - Optional root (requires a tonic)\n */\nexport function getChord(\n  typeName: string,\n  optionalTonic?: string,\n  optionalBass?: string,\n): Chord {\n  const type = getChordType(typeName);\n  const tonic = note(optionalTonic || \"\");\n  const bass = note(optionalBass || \"\");\n\n  if (\n    type.empty ||\n    (optionalTonic && tonic.empty) ||\n    (optionalBass && bass.empty)\n  ) {\n    return NoChord;\n  }\n\n  const bassInterval = distance(tonic.pc, bass.pc);\n  const bassIndex = type.intervals.indexOf(bassInterval);\n  const hasRoot = bassIndex >= 0;\n  const root = hasRoot ? bass : note(\"\");\n  const rootDegree = bassIndex === -1 ? NaN : bassIndex + 1;\n  const hasBass = bass.pc && bass.pc !== tonic.pc;\n\n  const intervals = Array.from(type.intervals);\n\n  if (hasRoot) {\n    for (let i = 1; i < rootDegree; i++) {\n      const num = intervals[0][0];\n      const quality = intervals[0][1];\n      const newNum = parseInt(num, 10) + 7;\n      intervals.push(`${newNum}${quality}`);\n      intervals.shift();\n    }\n  } else if (hasBass) {\n    const ivl = subtract(distance(tonic.pc, bass.pc), \"8P\");\n    if (ivl) intervals.unshift(ivl);\n  }\n\n  const notes = tonic.empty\n    ? []\n    : intervals.map((i) => transposeNote(tonic.pc, i));\n\n  typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\n  const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${\n    hasRoot && rootDegree > 1 ? \"/\" + root.pc : hasBass ? \"/\" + bass.pc : \"\"\n  }`;\n  const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${\n    hasRoot && rootDegree > 1\n      ? \" over \" + root.pc\n      : hasBass\n        ? \" over \" + bass.pc\n        : \"\"\n  }`;\n  return {\n    ...type,\n    name,\n    symbol,\n    tonic: tonic.pc,\n    type: type.name,\n    root: root.pc,\n    bass: hasBass ? bass.pc : \"\",\n    intervals,\n    rootDegree,\n    notes,\n  };\n}\n\nexport const chord = get;\n\n/**\n * Transpose a chord name\n *\n * @param {string} chordName - the chord name\n * @return {string} the transposed chord\n *\n * @example\n * transpose('Dm7', 'P4') // => 'Gm7\n */\nexport function transpose(chordName: string, interval: string): string {\n  const [tonic, type, bass] = tokenize(chordName);\n  if (!tonic) {\n    return chordName;\n  }\n  const tr = transposeNote(bass, interval);\n  const slash = tr ? \"/\" + tr : \"\";\n  return transposeNote(tonic, interval) + type + slash;\n}\n\n/**\n * Get all scales where the given chord fits\n *\n * @example\n * chordScales('C7b9')\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\n */\nexport function chordScales(name: string): string[] {\n  const s = get(name);\n  const isChordIncluded = isSupersetOf(s.chroma);\n  return scaleTypes()\n    .filter((scale) => isChordIncluded(scale.chroma))\n    .map((scale) => scale.name);\n}\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @example\n * extended(\"CMaj7\")\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\n */\nexport function extended(chordName: string): string[] {\n  const s = get(chordName);\n  const isSuperset = isSupersetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSuperset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @example\n */\nexport function reduced(chordName: string): string[] {\n  const s = get(chordName);\n  const isSubset = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSubset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Return the chord notes\n */\nexport function notes(chordName: ChordNameOrTokens, tonic?: string): string[] {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  if (!note || chord.empty) return [];\n  return chord.intervals.map((ivl) => transposeNote(note, ivl));\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3, 4].map(Chord.degrees(\"C\")) => [\"C\", \"E\", \"G\", \"C\"]\n * [1, 2, 3, 4].map(Chord.degrees(\"C4\")) => [\"C4\", \"E4\", \"G4\", \"C5\"]\n */\nexport function degrees(chordName: ChordNameOrTokens, tonic?: string) {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  const transpose = tonicIntervalsTransposer(chord.intervals, note);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(chordName: ChordNameOrTokens, tonic?: string) {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  return tonicIntervalsTransposer(chord.intervals, note);\n}\n\nexport default {\n  getChord,\n  get,\n  detect,\n  chordScales,\n  extended,\n  reduced,\n  tokenize,\n  transpose,\n  degrees,\n  steps,\n  notes,\n  chord,\n};\n","// source: https://en.wikipedia.org/wiki/Note_value\nconst DATA: [number, string, string[]][] = [\n  [\n    0.125,\n    \"dl\",\n    [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"],\n  ],\n  [0.25, \"l\", [\"long\", \"longa\"]],\n  [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\n  [1, \"w\", [\"whole\", \"semibreve\"]],\n  [2, \"h\", [\"half\", \"minim\"]],\n  [4, \"q\", [\"quarter\", \"crotchet\"]],\n  [8, \"e\", [\"eighth\", \"quaver\"]],\n  [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\n  [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\n  [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\n  [128, \"h\", [\"hundred twenty-eighth\"]],\n  [256, \"th\", [\"two hundred fifty-sixth\"]],\n];\n\nexport default DATA;\n","import DATA from \"./data\";\n\ntype Fraction = [number, number];\n\nconst VALUES: DurationValue[] = [];\n\nDATA.forEach(([denominator, shorthand, names]) =>\n  add(denominator, shorthand, names),\n);\n\nexport interface DurationValue {\n  empty: boolean;\n  value: number;\n  name: string;\n  fraction: Fraction;\n  shorthand: string;\n  dots: string;\n  names: string[];\n}\n\nconst NoDuration: DurationValue = {\n  empty: true,\n  name: \"\",\n  value: 0,\n  fraction: [0, 0],\n  shorthand: \"\",\n  dots: \"\",\n  names: [],\n};\n\nexport function names(): string[] {\n  return VALUES.reduce((names, duration) => {\n    duration.names.forEach((name) => names.push(name));\n    return names;\n  }, [] as string[]);\n}\n\nexport function shorthands(): string[] {\n  return VALUES.map((dur) => dur.shorthand);\n}\n\nconst REGEX = /^([^.]+)(\\.*)$/;\n\nexport function get(name: string): DurationValue {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [_, simple, dots] = REGEX.exec(name) || [];\n  const base = VALUES.find(\n    (dur) => dur.shorthand === simple || dur.names.includes(simple),\n  );\n  if (!base) {\n    return NoDuration;\n  }\n\n  const fraction = calcDots(base.fraction, dots.length);\n  const value = fraction[0] / fraction[1];\n\n  return { ...base, name, dots, value, fraction };\n}\n\nexport const value = (name: string) => get(name).value;\nexport const fraction = (name: string) => get(name).fraction;\n\nexport default { names, shorthands, get, value, fraction };\n\n//// PRIVATE ////\n\nfunction add(denominator: number, shorthand: string, names: string[]) {\n  VALUES.push({\n    empty: false,\n    dots: \"\",\n    name: \"\",\n    value: 1 / denominator,\n    fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\n    shorthand,\n    names,\n  });\n}\n\nfunction calcDots(fraction: Fraction, dots: number): Fraction {\n  const pow = Math.pow(2, dots);\n\n  let numerator = fraction[0] * pow;\n  let denominator = fraction[1] * pow;\n  const base = numerator;\n\n  // add fractions\n  for (let i = 0; i < dots; i++) {\n    numerator += base / Math.pow(2, i + 1);\n  }\n\n  // simplify\n  while (numerator % 2 === 0 && denominator % 2 === 0) {\n    numerator /= 2;\n    denominator /= 2;\n  }\n  return [numerator, denominator];\n}\n","import { NoteName, note as props } from \"@tonaljs/core\";\n\ntype Midi = number;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isMidi(arg: any): arg is Midi {\n  return +arg >= 0 && +arg <= 127;\n}\n\n/**\n * Get the note midi number (a number between 0 and 127)\n *\n * It returns undefined if not valid note name\n *\n * @function\n * @param {string|number} note - the note name or midi number\n * @return {Integer} the midi number or undefined if not valid note\n * @example\n * import { toMidi } from '@tonaljs/midi'\n * toMidi(\"C4\") // => 60\n * toMidi(60) // => 60\n * toMidi('60') // => 60\n */\nexport function toMidi(note: NoteName | number): number | null {\n  if (isMidi(note)) {\n    return +note;\n  }\n  const n = props(note);\n  return n.empty ? null : n.midi;\n}\n\n/**\n * Get the frequency in hertzs from midi number\n *\n * @param {number} midi - the note midi number\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\n * @return {number} the frequency or null if not valid note midi\n * @example\n * import { midiToFreq} from '@tonaljs/midi'\n * midiToFreq(69) // => 440\n */\nexport function midiToFreq(midi: number, tuning = 440): number {\n  return Math.pow(2, (midi - 69) / 12) * tuning;\n}\n\nconst L2 = Math.log(2);\nconst L440 = Math.log(440);\n\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precision)\n *\n * @param {number} frequency\n * @return {number}\n * @example\n * import { freqToMidi} from '@tonaljs/midi'\n * freqToMidi(220)); //=> 57\n * freqToMidi(261.62)); //=> 60\n * freqToMidi(261)); //=> 59.96\n */\nexport function freqToMidi(freq: number): number {\n  const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\n  return Math.round(v * 100) / 100;\n}\n\nexport interface ToNoteNameOptions {\n  pitchClass?: boolean;\n  sharps?: boolean;\n}\n\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * import { midiToNoteName } from '@tonaljs/midi'\n * midiToNoteName(61) // => \"Db4\"\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\n * // it rounds to nearest note\n * midiToNoteName(61.7) // => \"D4\"\n */\nexport function midiToNoteName(midi: number, options: ToNoteNameOptions = {}) {\n  if (isNaN(midi) || midi === -Infinity || midi === Infinity) return \"\";\n  midi = Math.round(midi);\n  const pcs = options.sharps === true ? SHARPS : FLATS;\n  const pc = pcs[midi % 12];\n  if (options.pitchClass) {\n    return pc;\n  }\n  const o = Math.floor(midi / 12) - 1;\n  return pc + o;\n}\n\nexport function chroma(midi: number): number {\n  return midi % 12;\n}\n\nfunction pcsetFromChroma(chroma: string): number[] {\n  return chroma.split(\"\").reduce((pcset, val, index) => {\n    if (index < 12 && val === \"1\") pcset.push(index);\n    return pcset;\n  }, [] as number[]);\n}\n\nfunction pcsetFromMidi(midi: number[]): number[] {\n  return midi\n    .map(chroma)\n    .sort((a, b) => a - b)\n    .filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n\n/**\n * Given a list of midi numbers, returns the pitch class set (unique chroma numbers)\n * @param midi\n * @example\n *\n */\nexport function pcset(notes: number[] | string): number[] {\n  return Array.isArray(notes) ? pcsetFromMidi(notes) : pcsetFromChroma(notes);\n}\n\nexport function pcsetNearest(notes: number[] | string) {\n  const set = pcset(notes);\n  return (midi: number): number | undefined => {\n    const ch = chroma(midi);\n    for (let i = 0; i < 12; i++) {\n      if (set.includes(ch + i)) return midi + i;\n      if (set.includes(ch - i)) return midi - i;\n    }\n    return undefined;\n  };\n}\n\nexport function pcsetSteps(notes: number[] | string, tonic: number) {\n  const set = pcset(notes);\n  const len = set.length;\n  return (step: number): number => {\n    const index = step < 0 ? (len - (-step % len)) % len : step % len;\n    const octaves = Math.floor(step / len);\n    return set[index] + octaves * 12 + tonic;\n  };\n}\n\nexport function pcsetDegrees(notes: number[] | string, tonic: number) {\n  const steps = pcsetSteps(notes, tonic);\n  return (degree: number): number | undefined => {\n    if (degree === 0) return undefined;\n    return steps(degree > 0 ? degree - 1 : degree);\n  };\n}\n\nexport default {\n  chroma,\n  freqToMidi,\n  isMidi,\n  midiToFreq,\n  midiToNoteName,\n  pcsetNearest,\n  pcset,\n  pcsetDegrees,\n  pcsetSteps,\n  toMidi,\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  IntervalName,\n  Note,\n  NoteLiteral,\n  NoteName,\n  Pitch,\n  transpose as _tr,\n  note as props,\n} from \"@tonaljs/core\";\nimport { freqToMidi, midiToNoteName } from \"@tonaljs/midi\";\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n\nconst toName = (n: Note) => n.name;\nconst onlyNotes = (array: any[]) =>\n  array.map(props).filter((n) => !n.empty) as Note[];\n\n/**\n * Return the natural note names without octave\n * @function\n * @example\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\n */\nexport function names(array?: any[]): string[] {\n  if (array === undefined) {\n    return NAMES.slice();\n  } else if (!Array.isArray(array)) {\n    return [];\n  } else {\n    return onlyNotes(array).map(toName);\n  }\n}\n\n/**\n * Get a note from a note name\n *\n * @function\n * @example\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport const get = props;\n\n/**\n * Get the note name\n * @function\n */\nexport const name = (note: NoteLiteral) => get(note).name;\n\n/**\n * Get the note pitch class name\n * @function\n */\nexport const pitchClass = (note: NoteLiteral) => get(note).pc;\n\n/**\n * Get the note accidentals\n * @function\n */\nexport const accidentals = (note: NoteLiteral) => get(note).acc;\n\n/**\n * Get the note octave\n * @function\n */\nexport const octave = (note: NoteLiteral) => get(note).oct;\n\n/**\n * Get the note midi\n * @function\n */\nexport const midi = (note: NoteLiteral) => get(note).midi;\n\n/**\n * Get the note midi\n * @function\n */\nexport const freq = (note: NoteLiteral) => get(note).freq;\n\n/**\n * Get the note chroma\n * @function\n */\nexport const chroma = (note: NoteLiteral) => get(note).chroma;\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidi(61) // => \"Db4\"\n * Note.fromMidi(61.7) // => \"D4\"\n */\nexport function fromMidi(midi: number) {\n  return midiToNoteName(midi);\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreq(freq: number) {\n  return midiToNoteName(freqToMidi(freq));\n}\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreqSharps(freq: number) {\n  return midiToNoteName(freqToMidi(freq), { sharps: true });\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidiSharps(61) // => \"C#4\"\n */\n\nexport function fromMidiSharps(midi: number) {\n  return midiToNoteName(midi, { sharps: true });\n}\n\n/**\n * Transpose a note by an interval\n */\nexport const transpose = _tr;\nexport const tr = _tr;\n\n/**\n * Transpose by an interval.\n * @function\n * @param {string} interval\n * @return {function} a function that transposes by the given interval\n * @example\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\n * // => [\"G\", \"A\", \"B\"]\n */\nexport const transposeBy = (interval: IntervalName) => (note: NoteName) =>\n  transpose(note, interval);\nexport const trBy = transposeBy;\n\n/**\n * Transpose from a note\n * @function\n * @param {string} note\n * @return {function}  a function that transposes the the note by an interval\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\n * // => [\"C\", \"E\", \"G\"]\n */\nexport const transposeFrom = (note: NoteName) => (interval: IntervalName) =>\n  transpose(note, interval);\nexport const trFrom = transposeFrom;\n\n/**\n * Transpose a note by a number of perfect fifths.\n *\n * @function\n * @param {string} note - the note name\n * @param {number} fifhts - the number of fifths\n * @return {string} the transposed note name\n *\n * @example\n * import { transposeFifths } from \"@tonaljs/note\"\n * transposeFifths(\"G4\", 1) // => \"D\"\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n */\nexport function transposeFifths(noteName: NoteName, fifths: number): NoteName {\n  return transpose(noteName, [fifths, 0]);\n}\nexport const trFifths = transposeFifths;\n\n// TODO: documentation\nexport function transposeOctaves(\n  noteName: NoteName,\n  octaves: number,\n): NoteName {\n  return transpose(noteName, [0, octaves]);\n}\n\nexport type NoteComparator = (a: Note, b: Note) => number;\n\nexport const ascending: NoteComparator = (a, b) => a.height - b.height;\nexport const descending: NoteComparator = (a, b) => b.height - a.height;\n\nexport function sortedNames(\n  notes: any[],\n  comparator?: NoteComparator,\n): string[] {\n  comparator = comparator || ascending;\n  return onlyNotes(notes).sort(comparator).map(toName);\n}\n\nexport function sortedUniqNames(notes: any[]): string[] {\n  return sortedNames(notes, ascending).filter(\n    (n, i, a) => i === 0 || n !== a[i - 1],\n  );\n}\n\n/**\n * Simplify a note\n *\n * @function\n * @param {string} note - the note to be simplified\n * - sameAccType: default true. Use same kind of accidentals that source\n * @return {string} the simplified note or '' if not valid note\n * @example\n * simplify(\"C##\") // => \"D\"\n * simplify(\"C###\") // => \"D#\"\n * simplify(\"C###\")\n * simplify(\"B#4\") // => \"C5\"\n */\nexport const simplify = (noteName: NoteName | Pitch): string => {\n  const note = get(noteName);\n  if (note.empty) {\n    return \"\";\n  }\n  return midiToNoteName(note.midi || note.chroma, {\n    sharps: note.alt > 0,\n    pitchClass: note.midi === null,\n  });\n};\n/**\n * Get enharmonic of a note\n *\n * @function\n * @param {string} note\n * @param [string] - [optional] Destination pitch class\n * @return {string} the enharmonic note name or '' if not valid note\n * @example\n * Note.enharmonic(\"Db\") // => \"C#\"\n * Note.enharmonic(\"C\") // => \"C\"\n * Note.enharmonic(\"F2\",\"E#\") // => \"E#2\"\n */\nexport function enharmonic(noteName: string, destName?: string) {\n  const src = get(noteName);\n  if (src.empty) {\n    return \"\";\n  }\n\n  // destination: use given or generate one\n  const dest = get(\n    destName ||\n      midiToNoteName(src.midi || src.chroma, {\n        sharps: src.alt < 0,\n        pitchClass: true,\n      }),\n  );\n\n  // ensure destination is valid\n  if (dest.empty || dest.chroma !== src.chroma) {\n    return \"\";\n  }\n\n  // if src has no octave, no need to calculate anything else\n  if (src.oct === undefined) {\n    return dest.pc;\n  }\n\n  // detect any octave overflow\n  const srcChroma = src.chroma - src.alt;\n  const destChroma = dest.chroma - dest.alt;\n  const destOctOffset =\n    srcChroma > 11 || destChroma < 0\n      ? -1\n      : srcChroma < 0 || destChroma > 11\n        ? +1\n        : 0;\n  // calculate the new octave\n  const destOct = src.oct + destOctOffset;\n  return dest.pc + destOct;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  pitchClass,\n  accidentals,\n  octave,\n  midi,\n  ascending,\n  descending,\n  sortedNames,\n  sortedUniqNames,\n  fromMidi,\n  fromMidiSharps,\n  freq,\n  fromFreq,\n  fromFreqSharps,\n  chroma,\n  transpose,\n  tr,\n  transposeBy,\n  trBy,\n  transposeFrom,\n  trFrom,\n  transposeFifths,\n  transposeOctaves,\n  trFifths,\n  simplify,\n  enharmonic,\n};\n","import {\n  accToAlt,\n  altToAcc,\n  deprecate,\n  interval,\n  isNamed,\n  isPitch,\n  Pitch,\n} from \"@tonaljs/core\";\n\nexport interface RomanNumeral extends Pitch {\n  readonly name: string;\n  readonly empty: boolean;\n  readonly roman: string;\n  readonly interval: string;\n  readonly acc: string;\n  readonly chordType: string;\n  readonly major: boolean;\n  readonly dir: 1;\n}\n\nexport interface NoRomanNumeral extends Partial<RomanNumeral> {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly chordType: \"\";\n}\nconst NoRomanNumeral: NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\n\nconst cache: Record<string, RomanNumeral | NoRomanNumeral> = {};\n\n/**\n * Get properties of a roman numeral string\n *\n * @function\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\n * @return {Object} - the roman numeral properties\n * @param {string} name - the roman numeral (tonic)\n * @param {string} type - the chord type\n * @param {string} num - the number (1 = I, 2 = II...)\n * @param {boolean} major - major or not\n *\n * @example\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function get(src: any): RomanNumeral | NoRomanNumeral {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : typeof src === \"number\"\n      ? get(NAMES[src] || \"\")\n      : isPitch(src)\n        ? fromPitch(src)\n        : isNamed(src)\n          ? get(src.name)\n          : NoRomanNumeral;\n}\n\nconst romanNumeral = deprecate(\n  \"RomanNumeral.romanNumeral\",\n  \"RomanNumeral.get\",\n  get,\n);\n\n/**\n * Get roman numeral names\n *\n * @function\n * @param {boolean} [isMajor=true]\n * @return {Array<String>}\n *\n * @example\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n */\nexport function names(major = true) {\n  return (major ? NAMES : NAMES_MINOR).slice();\n}\n\nfunction fromPitch(pitch: Pitch): RomanNumeral | NoRomanNumeral {\n  return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\n}\n\nconst REGEX =\n  /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\n\n// [name, accidentals, romanNumeral, chordType]\ntype RomanNumeralTokens = [string, string, string, string];\nexport function tokenize(str: string): RomanNumeralTokens {\n  return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]) as RomanNumeralTokens;\n}\n\nconst ROMANS = \"I II III IV V VI VII\";\nconst NAMES = ROMANS.split(\" \");\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\n\nfunction parse(src: string): RomanNumeral | NoRomanNumeral {\n  const [name, acc, roman, chordType] = tokenize(src);\n  if (!roman) {\n    return NoRomanNumeral;\n  }\n\n  const upperRoman = roman.toUpperCase();\n  const step = NAMES.indexOf(upperRoman);\n  const alt = accToAlt(acc);\n  const dir = 1;\n  return {\n    empty: false,\n    name,\n    roman,\n    interval: interval({ step, alt, dir }).name,\n    acc,\n    chordType,\n    alt,\n    step,\n    major: roman === upperRoman,\n    oct: 0,\n    dir,\n  };\n}\n\nexport default {\n  names,\n  get,\n  // deprecated\n  romanNumeral,\n};\n","import { accToAlt, altToAcc, note, transpose } from \"@tonaljs/core\";\nimport { transposeFifths } from \"@tonaljs/note\";\nimport { get as roman } from \"@tonaljs/roman-numeral\";\n\nconst Empty: readonly string[] = Object.freeze([] as string[]);\n\nexport interface Key {\n  readonly type: \"major\" | \"minor\";\n  readonly tonic: string;\n  readonly alteration: number;\n  readonly keySignature: string;\n}\n\nconst NoKey: Key = {\n  type: \"major\",\n  tonic: \"\",\n  alteration: 0,\n  keySignature: \"\",\n};\n\nexport interface KeyScale {\n  readonly tonic: string;\n  readonly grades: readonly string[];\n  readonly intervals: readonly string[];\n  readonly scale: readonly string[];\n  readonly triads: readonly string[];\n  readonly chords: readonly string[];\n  readonly chordsHarmonicFunction: readonly string[];\n  readonly chordScales: readonly string[];\n}\n\nconst NoKeyScale: KeyScale = {\n  tonic: \"\",\n  grades: Empty,\n  intervals: Empty,\n  scale: Empty,\n  triads: Empty,\n  chords: Empty,\n  chordsHarmonicFunction: Empty,\n  chordScales: Empty,\n};\n\nexport interface MajorKey extends Key, KeyScale {\n  readonly type: \"major\";\n  readonly minorRelative: string;\n  readonly scale: readonly string[];\n  readonly secondaryDominants: readonly string[];\n  readonly secondaryDominantsMinorRelative: readonly string[];\n  readonly substituteDominants: readonly string[];\n  readonly substituteDominantsMinorRelative: readonly string[];\n}\n\nconst NoMajorKey: MajorKey = {\n  ...NoKey,\n  ...NoKeyScale,\n  type: \"major\",\n  minorRelative: \"\",\n  scale: Empty,\n  secondaryDominants: Empty,\n  secondaryDominantsMinorRelative: Empty,\n  substituteDominants: Empty,\n  substituteDominantsMinorRelative: Empty,\n};\n\nexport interface MinorKey extends Key {\n  readonly type: \"minor\";\n  readonly relativeMajor: string;\n  readonly natural: KeyScale;\n  readonly harmonic: KeyScale;\n  readonly melodic: KeyScale;\n}\n\nconst NoMinorKey: MinorKey = {\n  ...NoKey,\n  type: \"minor\",\n  relativeMajor: \"\",\n  natural: NoKeyScale,\n  harmonic: NoKeyScale,\n  melodic: NoKeyScale,\n};\n\nconst mapScaleToType = (scale: string[], list: string[], sep = \"\") =>\n  list.map((type, i) => `${scale[i]}${sep}${type}`);\n\nfunction keyScale(\n  grades: string[],\n  triads: string[],\n  chords: string[],\n  harmonicFunctions: string[],\n  chordScales: string[],\n) {\n  return (tonic: string): KeyScale => {\n    const intervals = grades.map((gr) => roman(gr).interval || \"\");\n    const scale = intervals.map((interval) => transpose(tonic, interval));\n\n    return {\n      tonic,\n      grades,\n      intervals,\n      scale,\n      triads: mapScaleToType(scale, triads),\n      chords: mapScaleToType(scale, chords),\n      chordsHarmonicFunction: harmonicFunctions.slice(),\n      chordScales: mapScaleToType(scale, chordScales, \" \"),\n    };\n  };\n}\n\nconst distInFifths = (from: string, to: string) => {\n  const f = note(from);\n  const t = note(to);\n  return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\n};\n\nconst MajorScale = keyScale(\n  \"I II III IV V VI VII\".split(\" \"),\n  \" m m   m dim\".split(\" \"),\n  \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"),\n  \"T SD T SD D T D\".split(\" \"),\n  \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"),\n);\nconst NaturalScale = keyScale(\n  \"I II bIII IV V bVI bVII\".split(\" \"),\n  \"m dim  m m  \".split(\" \"),\n  \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"),\n  \"T SD T SD D SD SD\".split(\" \"),\n  \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"),\n);\nconst HarmonicScale = keyScale(\n  \"I II bIII IV V bVI VII\".split(\" \"),\n  \"m dim aug m   dim\".split(\" \"),\n  \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"),\n  \"T SD T SD D SD D\".split(\" \"),\n  \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\n    \",\",\n  ),\n);\nconst MelodicScale = keyScale(\n  \"I II bIII IV V VI VII\".split(\" \"),\n  \"m m aug   dim dim\".split(\" \"),\n  \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"),\n  \"T SD T SD D  \".split(\" \"),\n  \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\n    \",\",\n  ),\n);\n\n/**\n * Get a major key properties in a given tonic\n * @param tonic\n */\nexport function majorKey(tonic: string): MajorKey {\n  const pc = note(tonic).pc;\n  if (!pc) return NoMajorKey;\n\n  const keyScale = MajorScale(pc);\n  const alteration = distInFifths(\"C\", pc);\n  const romanInTonic = (src: string) => {\n    const r = roman(src);\n    if (r.empty) return \"\";\n\n    return transpose(tonic, r.interval) + r.chordType;\n  };\n\n  return {\n    ...keyScale,\n    type: \"major\",\n    minorRelative: transpose(pc, \"-3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\n    secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n  };\n}\n\n/**\n * Get minor key properties in a given tonic\n * @param tonic\n */\nexport function minorKey(tnc: string): MinorKey {\n  const pc = note(tnc).pc;\n  if (!pc) return NoMinorKey;\n\n  const alteration = distInFifths(\"C\", pc) - 3;\n  return {\n    type: \"minor\",\n    tonic: pc,\n    relativeMajor: transpose(pc, \"3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    natural: NaturalScale(pc),\n    harmonic: HarmonicScale(pc),\n    melodic: MelodicScale(pc),\n  };\n}\n\n/**\n * Given a key signature, returns the tonic of the major key\n * @param sigature\n * @example\n * majorTonicFromKeySignature('###') // => 'A'\n */\nexport function majorTonicFromKeySignature(\n  sig: string | number,\n): string | null {\n  if (typeof sig === \"number\") {\n    return transposeFifths(\"C\", sig);\n  } else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\n    return transposeFifths(\"C\", accToAlt(sig));\n  }\n  return null;\n}\n\nexport default { majorKey, majorTonicFromKeySignature, minorKey };\n","import { rotate } from \"@tonaljs/collection\";\nimport { deprecate, NamedPitch, NoteName, transpose } from \"@tonaljs/core\";\nimport { simplify, transposeFifths } from \"@tonaljs/interval\";\nimport { EmptyPcset, Pcset } from \"@tonaljs/pcset\";\nimport { get as getType } from \"@tonaljs/scale-type\";\n\nconst MODES = [\n  [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\n  [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\n  [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\n  [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\n  [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\n  [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\n  [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"],\n] as const;\n\ntype ModeDatum = (typeof MODES)[number];\n\nexport interface Mode extends Pcset {\n  readonly name: string;\n  readonly modeNum: number;\n  readonly alt: number; // number of alterations === number of fiths\n  readonly triad: string;\n  readonly seventh: string;\n  readonly aliases: string[];\n}\n\nconst NoMode: Mode = {\n  ...EmptyPcset,\n  name: \"\",\n  alt: 0,\n  modeNum: NaN,\n  triad: \"\",\n  seventh: \"\",\n  aliases: [],\n};\n\nconst modes: Mode[] = MODES.map(toMode);\nconst index: Record<string, Mode> = {};\nmodes.forEach((mode) => {\n  index[mode.name] = mode;\n  mode.aliases.forEach((alias) => {\n    index[alias] = mode;\n  });\n});\n\ntype ModeLiteral = string | NamedPitch;\n\n/**\n * Get a Mode by it's name\n *\n * @example\n * get('dorian')\n * // =>\n * // {\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\n * //   modeNum: 1,\n * //   chroma: '101101010110',\n * //   normalized: '101101010110',\n * //   name: 'dorian',\n * //   setNum: 2902,\n * //   alt: 2,\n * //   triad: 'm',\n * //   seventh: 'm7',\n * //   aliases: []\n * // }\n */\nexport function get(name: ModeLiteral): Mode {\n  return typeof name === \"string\"\n    ? index[name.toLowerCase()] || NoMode\n    : name && name.name\n      ? get(name.name)\n      : NoMode;\n}\n\nexport const mode = deprecate(\"Mode.mode\", \"Mode.get\", get);\n\n/**\n * Get a list of all modes\n */\nexport function all() {\n  return modes.slice();\n}\nexport const entries = deprecate(\"Mode.mode\", \"Mode.all\", all);\n\n/**\n * Get a list of all mode names\n */\nexport function names() {\n  return modes.map((mode) => mode.name);\n}\n\nfunction toMode(mode: ModeDatum): Mode {\n  const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\n  const aliases = alias ? [alias] : [];\n  const chroma = Number(setNum).toString(2);\n  const intervals = getType(name).intervals;\n  return {\n    empty: false,\n    intervals,\n    modeNum,\n    chroma,\n    normalized: chroma,\n    name,\n    setNum,\n    alt,\n    triad,\n    seventh,\n    aliases,\n  };\n}\n\nexport function notes(modeName: ModeLiteral, tonic: NoteName) {\n  return get(modeName).intervals.map((ivl) => transpose(tonic, ivl));\n}\n\nfunction chords(chords: string[]) {\n  return (modeName: ModeLiteral, tonic: NoteName) => {\n    const mode = get(modeName);\n    if (mode.empty) return [];\n    const triads = rotate(mode.modeNum, chords);\n    const tonics = mode.intervals.map((i) => transpose(tonic, i));\n    return triads.map((triad, i) => tonics[i] + triad);\n  };\n}\n\nexport const triads = chords(MODES.map((x) => x[4]));\nexport const seventhChords = chords(MODES.map((x) => x[5]));\n\nexport function distance(destination: ModeLiteral, source: ModeLiteral) {\n  const from = get(source);\n  const to = get(destination);\n  if (from.empty || to.empty) return \"\";\n  return simplify(transposeFifths(\"1P\", to.alt - from.alt));\n}\n\nexport function relativeTonic(\n  destination: ModeLiteral,\n  source: ModeLiteral,\n  tonic: NoteName,\n) {\n  return transpose(tonic, distance(destination, source));\n}\n\nexport default {\n  get,\n  names,\n  all,\n  distance,\n  relativeTonic,\n  notes,\n  triads,\n  seventhChords,\n  // deprecated\n  entries,\n  mode,\n};\n","/**\n * References:\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\n * @module scale\n */\nimport { all as chordTypes } from \"@tonaljs/chord-type\";\nimport { range as nums, rotate } from \"@tonaljs/collection\";\nimport {\n  deprecate,\n  note,\n  NoteName,\n  tonicIntervalsTransposer,\n  transpose,\n} from \"@tonaljs/core\";\nimport { enharmonic, fromMidi, sortedUniqNames } from \"@tonaljs/note\";\nimport {\n  chroma,\n  isChroma,\n  isSubsetOf,\n  isSupersetOf,\n  modes,\n} from \"@tonaljs/pcset\";\nimport {\n  all,\n  all as scaleTypes,\n  get as getScaleType,\n  names as scaleTypeNames,\n  ScaleType,\n} from \"@tonaljs/scale-type\";\n\ntype ScaleName = string;\ntype ScaleNameTokens = [string, string]; // [TONIC, SCALE TYPE]\n\nexport interface Scale extends ScaleType {\n  tonic: string | null;\n  type: string;\n  notes: NoteName[];\n}\n\nconst NoScale: Scale = {\n  empty: true,\n  name: \"\",\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(name: ScaleName): ScaleNameTokens {\n  if (typeof name !== \"string\") {\n    return [\"\", \"\"];\n  }\n  const i = name.indexOf(\" \");\n  const tonic = note(name.substring(0, i));\n  if (tonic.empty) {\n    const n = note(name);\n    return n.empty ? [\"\", name] : [n.name, \"\"];\n  }\n\n  const type = name.substring(tonic.name.length + 1);\n  return [tonic.name, type.length ? type : \"\"];\n}\n\n/**\n * Get all scale names\n * @function\n */\nexport const names = scaleTypeNames;\n\n/**\n * Get a Scale from a scale name.\n */\nexport function get(src: ScaleName | ScaleNameTokens): Scale {\n  const tokens = Array.isArray(src) ? src : tokenize(src);\n  const tonic = note(tokens[0]).name;\n  const st = getScaleType(tokens[1]);\n  if (st.empty) {\n    return NoScale;\n  }\n\n  const type = st.name;\n  const notes: string[] = tonic\n    ? st.intervals.map((i) => transpose(tonic, i))\n    : [];\n\n  const name = tonic ? tonic + \" \" + type : type;\n\n  return { ...st, name, type, tonic, notes };\n}\n\nexport const scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\n\nexport function detect(\n  notes: string[],\n  options: { tonic?: string; match?: \"exact\" | \"fit\" } = {},\n): string[] {\n  const notesChroma = chroma(notes);\n  const tonic = note(options.tonic ?? notes[0] ?? \"\");\n  const tonicChroma = tonic.chroma;\n  if (tonicChroma === undefined) {\n    return [];\n  }\n\n  const pitchClasses = notesChroma.split(\"\");\n  pitchClasses[tonicChroma] = \"1\";\n  const scaleChroma = rotate(tonicChroma, pitchClasses).join(\"\");\n  const match = all().find((scaleType) => scaleType.chroma === scaleChroma);\n\n  const results: string[] = [];\n  if (match) {\n    results.push(tonic.name + \" \" + match.name);\n  }\n  if (options.match === \"exact\") {\n    return results;\n  }\n\n  extended(scaleChroma).forEach((scaleName) => {\n    results.push(tonic.name + \" \" + scaleName);\n  });\n\n  return results;\n}\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nexport function scaleChords(name: string): string[] {\n  const s = get(name);\n  const inScale = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => inScale(chord.chroma))\n    .map((chord) => chord.aliases[0]);\n}\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nexport function extended(name: string): string[] {\n  const chroma = isChroma(name) ? name : get(name).chroma;\n  const isSuperset = isSupersetOf(chroma);\n  return scaleTypes()\n    .filter((scale) => isSuperset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nexport function reduced(name: string): string[] {\n  const isSubset = isSubsetOf(get(name).chroma);\n  return scaleTypes()\n    .filter((scale) => isSubset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {string[]} notes\n * @return {string[]} pitch classes with same tonic\n * @example\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nexport function scaleNotes(notes: NoteName[]) {\n  const pcset: string[] = notes.map((n) => note(n).pc).filter((x) => x);\n  const tonic = pcset[0];\n  const scale = sortedUniqNames(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n}\n\ntype ScaleMode = [string, string];\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nexport function modeNames(name: string): ScaleMode[] {\n  const s = get(name);\n  if (s.empty) {\n    return [];\n  }\n\n  const tonics = s.tonic ? s.notes : s.intervals;\n  return modes(s.chroma)\n    .map((chroma: string, i: number): ScaleMode => {\n      const modeName = get(chroma).name;\n      return modeName ? [tonics[i], modeName] : [\"\", \"\"];\n    })\n    .filter((x) => x[0]);\n}\n\nfunction getNoteNameOf(scale: string | string[]) {\n  const names = Array.isArray(scale) ? scaleNotes(scale) : get(scale).notes;\n  const chromas = names.map((name) => note(name).chroma);\n\n  return (noteOrMidi: string | number): string | undefined => {\n    const currNote =\n      typeof noteOrMidi === \"number\"\n        ? note(fromMidi(noteOrMidi))\n        : note(noteOrMidi);\n    const height = currNote.height;\n\n    if (height === undefined) return undefined;\n    const chroma = height % 12;\n    const position = chromas.indexOf(chroma);\n    if (position === -1) return undefined;\n    return enharmonic(currNote.name, names[position]);\n  };\n}\n\nexport function rangeOf(scale: string | string[]) {\n  const getName = getNoteNameOf(scale);\n  return (fromNote: string, toNote: string) => {\n    const from = note(fromNote).height;\n    const to = note(toNote).height;\n    if (from === undefined || to === undefined) return [];\n\n    return nums(from, to)\n      .map(getName)\n      .filter((x) => x);\n  };\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3].map(Scale.degrees(\"C major\")) => [\"C\", \"D\", \"E\"]\n * [1, 2, 3].map(Scale.degrees(\"C4 major\")) => [\"C4\", \"D4\", \"E4\"]\n */\nexport function degrees(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  const transpose = tonicIntervalsTransposer(intervals, tonic);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  return tonicIntervalsTransposer(intervals, tonic);\n}\n\nexport default {\n  degrees,\n  detect,\n  extended,\n  get,\n  modeNames,\n  names,\n  rangeOf,\n  reduced,\n  scaleChords,\n  scaleNotes,\n  steps,\n  tokenize,\n\n  // deprecated\n  scale,\n};\n","import Note from \"@tonaljs/note\";\n\n// A function that decides which of a set of voicings is picked as a follow up to lastVoicing.\nexport declare type VoiceLeadingFunction = (\n  voicings: string[][],\n  lastVoicing: string[],\n) => string[];\n\nexport const topNoteDiff: VoiceLeadingFunction = (voicings, lastVoicing) => {\n  if (!lastVoicing || !lastVoicing.length) {\n    return voicings[0];\n  }\n  const topNoteMidi = (voicing: string[]) =>\n    Note.midi(voicing[voicing.length - 1]) || 0;\n  const diff = (voicing: string[]) =>\n    Math.abs(topNoteMidi(lastVoicing) - topNoteMidi(voicing));\n  return voicings.sort((a, b) => diff(a) - diff(b))[0];\n};\n\nexport default {\n  topNoteDiff,\n};\n","import Chord from \"@tonaljs/chord\";\nimport { lefthand, VoicingDictionary, triads, all } from \"./data\";\n\nconst defaultDictionary: VoicingDictionary = lefthand;\n\nfunction lookup(\n  symbol: string,\n  dictionary = defaultDictionary,\n): string[] | undefined {\n  if (dictionary[symbol]) {\n    return dictionary[symbol];\n  }\n  const { aliases } = Chord.get(\"C\" + symbol);\n  // TODO: find other way to get aliases of symbol\n  const match =\n    Object.keys(dictionary).find((_symbol) => aliases.includes(_symbol)) || \"\";\n  if (match !== undefined) {\n    return dictionary[match];\n  }\n  return undefined;\n}\n\nexport default {\n  lookup,\n  lefthand,\n  triads,\n  all,\n  defaultDictionary,\n};\n","export type VoicingDictionary = { [symbol: string]: string[] };\n\nexport const triads: VoicingDictionary = {\n  M: [\"1P 3M 5P\", \"3M 5P 8P\", \"5P 8P 10M\"],\n  m: [\"1P 3m 5P\", \"3m 5P 8P\", \"5P 8P 10m\"],\n  o: [\"1P 3m 5d\", \"3m 5d 8P\", \"5d 8P 10m\"],\n  aug: [\"1P 3m 5A\", \"3m 5A 8P\", \"5A 8P 10m\"],\n};\nexport const lefthand: VoicingDictionary = {\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n  \"69\": [\"3M 5P 6A 9M\"],\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\n  \"7#11\": [\"7m 9M 11A 13A\"],\n  \"7#9\": [\"3M 7m 9A\"],\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"],\n};\nexport const all: VoicingDictionary = {\n  M: [\"1P 3M 5P\", \"3M 5P 8P\", \"5P 8P 10M\"],\n  m: [\"1P 3m 5P\", \"3m 5P 8P\", \"5P 8P 10m\"],\n  o: [\"1P 3m 5d\", \"3m 5d 8P\", \"5d 8P 10m\"],\n  aug: [\"1P 3m 5A\", \"3m 5A 8P\", \"5A 8P 10m\"],\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n  \"69\": [\"3M 5P 6A 9M\"],\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\n  \"7#11\": [\"7m 9M 11A 13A\"],\n  \"7#9\": [\"3M 7m 9A\"],\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"],\n};\n","import Chord from \"@tonaljs/chord\";\nimport Interval from \"@tonaljs/interval\";\nimport Note from \"@tonaljs/note\";\nimport Range from \"@tonaljs/range\";\nimport VoiceLeading from \"@tonaljs/voice-leading\";\nimport VoicingDictionary from \"@tonaljs/voicing-dictionary\";\n\nconst defaultRange = [\"C3\", \"C5\"];\nconst defaultDictionary = VoicingDictionary.all;\nconst defaultVoiceLeading = VoiceLeading.topNoteDiff;\n\nfunction get(\n  chord: string,\n  range: string[] = defaultRange,\n  dictionary = defaultDictionary,\n  voiceLeading = defaultVoiceLeading,\n  lastVoicing?: string[],\n) {\n  const voicings = search(chord, range, dictionary);\n  if (!lastVoicing || !lastVoicing.length) {\n    // notes = voicings[Math.ceil(voicings.length / 2)]; // pick middle voicing..\n    return voicings[0]; // pick lowest voicing..\n  } else {\n    // calculates the distance between the last note and the given voicings top note\n    // sort voicings with differ\n    return voiceLeading(voicings, lastVoicing);\n  }\n}\n\nfunction search(\n  chord: string,\n  range = defaultRange,\n  dictionary = VoicingDictionary.triads,\n): string[][] {\n  const [tonic, symbol] = Chord.tokenize(chord);\n  const sets = VoicingDictionary.lookup(symbol, dictionary);\n  // find equivalent symbol that is used as a key in dictionary:\n  if (!sets) {\n    return [];\n  }\n  // resolve array of interval arrays for the wanted symbol\n  const voicings = sets.map((intervals) => intervals.split(\" \"));\n  const notesInRange = Range.chromatic(range); // gives array of notes inside range\n  return voicings.reduce((voiced: string[][], voicing: string[]) => {\n    // transpose intervals relative to first interval (e.g. 3m 5P > 1P 3M)\n    const relativeIntervals = voicing.map(\n      (interval) => Interval.subtract(interval, voicing[0]) || \"\",\n    );\n    // get enharmonic correct pitch class the bottom note\n    const bottomPitchClass = Note.transpose(tonic, voicing[0]);\n    // get all possible start notes for voicing\n    const starts = notesInRange\n      // only get the start notes:\n      .filter((note) => Note.chroma(note) === Note.chroma(bottomPitchClass))\n      // filter out start notes that will overshoot the top end of the range\n      .filter(\n        (note) =>\n          (Note.midi(\n            Note.transpose(\n              note,\n              relativeIntervals[relativeIntervals.length - 1],\n            ),\n          ) || 0) <= (Note.midi(range[1]) || 0),\n      )\n      // replace Range.chromatic notes with the correct enharmonic equivalents\n      .map((note) => Note.enharmonic(note, bottomPitchClass));\n    // render one voicing for each start note\n    const notes = starts.map((start) =>\n      relativeIntervals.map((interval) => Note.transpose(start, interval)),\n    );\n    return voiced.concat(notes);\n  }, []);\n}\n\nfunction sequence(\n  chords: string[],\n  range = defaultRange,\n  dictionary = defaultDictionary,\n  voiceLeading = defaultVoiceLeading,\n  lastVoicing?: string[],\n) {\n  const { voicings } = chords.reduce<{\n    voicings: string[][];\n    lastVoicing: string[] | undefined;\n  }>(\n    ({ voicings, lastVoicing }, chord) => {\n      const voicing = get(chord, range, dictionary, voiceLeading, lastVoicing);\n      lastVoicing = voicing;\n      voicings.push(voicing);\n      return { voicings, lastVoicing };\n    },\n    { voicings: [], lastVoicing },\n  );\n  return voicings;\n}\n\nexport default {\n  get,\n  search,\n  sequence,\n};\n","export const console_green = \"\\u001b[32m\";\nexport const console_reset = \"\\u001b[0m\";\n\nexport const _throw = <E extends Error>(e: E) => { throw e; };  // 文の式化\nexport const assertNotNull = <T>(value: T | null, error = new TypeError(\"null value received\")) => value !== null ? value : _throw(error);\nexport const assertNotUndefined = <T>(value: T | undefined, error = new TypeError(\"undefined value received\")) => value !== undefined ? value : _throw(error);\nexport const assertNonNullable = <T>(value: T | null | undefined) => assertNotNull(assertNotUndefined(value));\nexport const assertNotNaN = (value: number) => isNaN(value) ? _throw(new TypeError(\"NaN value received\")) : value;\nexport const castToNumber = (value: string) => assertNotNaN(Number(value));\n\nexport type recurrentArray<T> = T | recurrentArray<T>[];\nexport function Arraying<T>(e: recurrentArray<T>): T[] {\n  const concat = function (arr: recurrentArray<T>[]): T[] {\n    let res: T[] = [];\n    for (const e of arr) {\n      res = res.concat(Arraying(e));\n    }\n    return res;\n  };\n  return e instanceof Array ? concat(e) : [e];\n}\n\n// 引数には any が入る.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const hasSameValue = (o1: any, o2: any) => {\n  if (o1 === o2) { return true; } // same object\n  if (o1 == null) { return false; } // because the other is not null\n  if (o2 == null) { return false; } // because the other is not null\n  if (Object.keys(o1).length != Object.keys(o2).length) { return false; }\n  for (const key in o1) {\n    if (!(key in o2)) { return false; }\n    if (typeof o1[key] === \"object\") {\n      if (!hasSameValue(o1[key], o2[key])) { return false; } // deep check\n    } else if (o1[key] != o2[key]) { return false; }\n  }\n  return true;\n};\n\nexport class IdDictionary<Key extends keyof any> { // eslint-disable-line @typescript-eslint/no-explicit-any\n  #item2id: { [key: keyof any]: number } = {}; // eslint-disable-line @typescript-eslint/no-explicit-any\n  #id2item: Key[] = [];\n  get length() {\n    return this.#id2item.length;\n  }\n  register(item: Key) {\n    const id = this.#item2id[item];\n    if (id !== undefined) { return id; }\n    else {\n      const i = this.#id2item.length;\n      this.#item2id[item] = i;\n      this.#id2item[i] = item;\n      return i;\n    }\n  }\n  getId(item: Key) { return assertNotUndefined(this.#item2id[item], new ReferenceError(`key ${String(item)} not found`)); }\n  getItem(id: number) { return assertNotUndefined(this.#id2item[id], new ReferenceError(`id ${String(id)} not found`)); }\n  showAll() { return this.#id2item; }\n}\n\n// エラーを期待するテストのための, 予想外のエラーを受け取った時のエラー\nexport class UnexpectedErrorThrownError extends Error { constructor(message = \"\") { super(message); } }\nexport class NotImplementedError extends Error { constructor(message = \"\") { super(message); } }\n\nexport class Assertion {\n  #assertion: boolean;\n  constructor(assertion: boolean) {\n    this.#assertion = assertion;\n  }\n  onFailed(errorExecution: () => void) { this.#assertion || errorExecution(); }\n}\n\n","export interface NamedPitch {\n  readonly name: string;\n}\n\n/*** @deprecated use NamedPitch */\nexport interface Named {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\" &&\n    !isNaN(pitch.step) &&\n    !isNaN(pitch.alt)\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n","import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nconst NoInterval: Interval = Object.freeze({\n  empty: true,\n  name: \"\",\n  num: NaN,\n  q: \"\" as Quality,\n  type: \"\" as Type,\n  step: NaN,\n  alt: NaN,\n  dir: NaN as Direction,\n  simple: NaN,\n  semitones: NaN,\n  chroma: NaN,\n  coord: [] as unknown as IntervalCoordinates,\n  oct: NaN,\n});\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n","import {\n  coordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type NoteWithOctave = string;\nexport type PcName = string;\nexport type NoteName = NoteWithOctave | PcName;\nexport type NoteLiteral = NoteName | Pitch | NamedPitch;\n\nexport interface Note extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: NoteName;\n  readonly letter: string;\n  readonly acc: string;\n  readonly pc: PcName;\n  readonly chroma: number;\n  readonly height: number;\n  readonly coord: PitchCoordinates;\n  readonly midi: number | null;\n  readonly freq: number | null;\n}\n\nconst NoNote: Note = Object.freeze({\n  empty: true,\n  name: \"\",\n  letter: \"\",\n  acc: \"\",\n  pc: \"\",\n  step: NaN,\n  alt: NaN,\n  chroma: NaN,\n  height: NaN,\n  coord: [] as unknown as PitchCoordinates,\n  midi: null,\n  freq: null,\n});\n\nconst cache: Map<NoteLiteral | undefined, Note> = new Map();\n\nexport const stepToLetter = (step: number) => \"CDEFGAB\".charAt(step);\nexport const altToAcc = (alt: number): string =>\n  alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\nexport const accToAlt = (acc: string): number =>\n  acc[0] === \"b\" ? -acc.length : acc.length;\n\n/**\n * Given a note literal (a note name or a note object), returns the Note object\n * @example\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport function note(src: NoteLiteral): Note {\n  const stringSrc = JSON.stringify(src);\n\n  const cached = cache.get(stringSrc);\n  if (cached) {\n    return cached;\n  }\n\n  const value =\n    typeof src === \"string\"\n      ? parse(src)\n      : isPitch(src)\n        ? note(pitchName(src))\n        : isNamedPitch(src)\n          ? note(src.name)\n          : NoNote;\n  cache.set(stringSrc, value);\n  return value;\n}\n\ntype NoteTokens = [string, string, string, string];\n\nconst REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * @private\n */\nexport function tokenizeNote(str: string): NoteTokens {\n  const m = REGEX.exec(str) as string[];\n  return m\n    ? [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]]\n    : [\"\", \"\", \"\", \"\"];\n}\n\n/**\n * @private\n */\nexport function coordToNote(noteCoord: PitchCoordinates): Note {\n  return note(pitch(noteCoord)) as Note;\n}\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\nfunction parse(noteName: NoteName): Note {\n  const tokens = tokenizeNote(noteName);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\n    return NoNote;\n  }\n\n  const letter = tokens[0];\n  const acc = tokens[1];\n  const octStr = tokens[2];\n\n  const step = (letter.charCodeAt(0) + 3) % 7;\n  const alt = accToAlt(acc);\n  const oct = octStr.length ? +octStr : undefined;\n  const coord = coordinates({ step, alt, oct });\n\n  const name = letter + acc + octStr;\n  const pc = letter + acc;\n  const chroma = (SEMI[step] + alt + 120) % 12;\n  const height =\n    oct === undefined\n      ? mod(SEMI[step] + alt, 12) - 12 * 99\n      : SEMI[step] + alt + 12 * (oct + 1);\n  const midi = height >= 0 && height <= 127 ? height : null;\n  const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\n\n  return {\n    empty: false,\n    acc,\n    alt,\n    chroma,\n    coord,\n    freq,\n    height,\n    letter,\n    midi,\n    name,\n    oct,\n    pc,\n    step,\n  };\n}\n\nfunction pitchName(props: Pitch): NoteName {\n  const { step, alt, oct } = props;\n  const letter = stepToLetter(step);\n  if (!letter) {\n    return \"\";\n  }\n\n  const pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n","import { PitchCoordinates } from \"@tonaljs/pitch\";\nimport {\n  IntervalLiteral,\n  IntervalName,\n  interval as asInterval,\n  coordToInterval,\n} from \"@tonaljs/pitch-interval\";\nimport {\n  NoteLiteral,\n  NoteName,\n  note as asNote,\n  coordToNote,\n} from \"@tonaljs/pitch-note\";\n\n/**\n * Transpose a note by an interval.\n *\n * @param {string} note - the note or note name\n * @param {string} interval - the interval or interval name\n * @return {string} the transposed note name or empty string if not valid notes\n * @example\n * import { transpose } from \"@tonaljs/core\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * transpose(\"D\", \"3M\") // => \"F#\"\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(\n  noteName: NoteLiteral,\n  intervalName: IntervalLiteral | [number, number],\n): NoteName {\n  const note = asNote(noteName);\n  const intervalCoord = Array.isArray(intervalName)\n    ? intervalName\n    : asInterval(intervalName).coord;\n  if (note.empty || !intervalCoord || intervalCoord.length < 2) {\n    return \"\";\n  }\n  const noteCoord = note.coord;\n  const tr: PitchCoordinates =\n    noteCoord.length === 1\n      ? [noteCoord[0] + intervalCoord[0]]\n      : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\n  return coordToNote(tr).name;\n}\n\n// Private\nexport function tonicIntervalsTransposer(\n  intervals: string[],\n  tonic: string | undefined | null,\n) {\n  const len = intervals.length;\n  return (normalized: number) => {\n    if (!tonic) return \"\";\n    const index =\n      normalized < 0 ? (len - (-normalized % len)) % len : normalized % len;\n    const octaves = Math.floor(normalized / len);\n    const root = transpose(tonic, [0, octaves]);\n    return transpose(root, intervals[index]);\n  };\n}\n\n/**\n * Find the interval distance between two notes or coord classes.\n *\n * To find distance between coord classes, both notes must be coord classes and\n * the interval is always ascending\n *\n * @param {Note|string} from - the note or note name to calculate distance from\n * @param {Note|string} to - the note or note name to calculate distance to\n * @return {string} the interval name or empty string if not valid notes\n *\n */\nexport function distance(\n  fromNote: NoteLiteral,\n  toNote: NoteLiteral,\n): IntervalName {\n  const from = asNote(fromNote);\n  const to = asNote(toNote);\n  if (from.empty || to.empty) {\n    return \"\";\n  }\n\n  const fcoord = from.coord;\n  const tcoord = to.coord;\n  const fifths = tcoord[0] - fcoord[0];\n  const octs =\n    fcoord.length === 2 && tcoord.length === 2\n      ? tcoord[1] - fcoord[1]\n      : -Math.floor((fifths * 7) / 12);\n\n  // If it's unison and not pitch class, it can be descending interval (#243)\n  const forceDescending =\n    to.height === from.height &&\n    to.midi !== null &&\n    from.midi !== null &&\n    from.step > to.step;\n  return coordToInterval([fifths, octs], forceDescending).name;\n}\n","import { IntervalCoordinates, NoteCoordinates } from \"@tonaljs/pitch\";\nimport { distance as dist } from \"@tonaljs/pitch-distance\";\nimport {\n  IntervalName,\n  coordToInterval,\n  interval as props,\n} from \"@tonaljs/pitch-interval\";\n\n/**\n * Get the natural list of names\n */\nexport function names(): IntervalName[] {\n  return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\n}\n\n/**\n * Get properties of an interval\n *\n * @function\n * @example\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\n */\nexport const get = props;\n\n/**\n * Get name of an interval\n *\n * @function\n * @example\n * Interval.name('4P') // => \"4P\"\n * Interval.name('P4') // => \"4P\"\n * Interval.name('C4') // => \"\"\n */\nexport const name = (name: string) => props(name).name;\n\n/**\n * Get semitones of an interval\n * @function\n * @example\n * Interval.semitones('P4') // => 5\n */\nexport const semitones = (name: string) => props(name).semitones;\n\n/**\n * Get quality of an interval\n * @function\n * @example\n * Interval.quality('P4') // => \"P\"\n */\nexport const quality = (name: string) => props(name).q;\n\n/**\n * Get number of an interval\n * @function\n * @example\n * Interval.num('P4') // => 4\n */\nexport const num = (name: string) => props(name).num;\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {string} interval - the interval to simplify\n * @return {string} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n */\nexport function simplify(name: IntervalName): IntervalName {\n  const i = props(name);\n  return i.empty ? \"\" : i.simple + i.q;\n}\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {string} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {string} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport function invert(name: IntervalName): IntervalName {\n  const i = props(name);\n  if (i.empty) {\n    return \"\";\n  }\n  const step = (7 - i.step) % 7;\n  const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\n  return props({ step, alt, oct: i.oct, dir: i.dir }).name;\n}\n\n// interval numbers\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitrary, but deterministic.\n *\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {string} the interval name\n * @example\n * Interval.fromSemitones(7) // => \"5P\"\n * Interval.fromSemitones(-7) // => \"-5P\"\n */\nexport function fromSemitones(semitones: number): IntervalName {\n  const d = semitones < 0 ? -1 : 1;\n  const n = Math.abs(semitones);\n  const c = n % 12;\n  const o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n}\n\n/**\n * Find interval between two notes\n *\n * @example\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\n */\nexport const distance = dist;\n\n/**\n * Adds two intervals\n *\n * @function\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the added interval name\n * @example\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\n */\nexport const add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\n\n/**\n * Returns a function that adds an interval\n *\n * @function\n * @example\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\n */\nexport const addTo = (interval: string) => (other: string) =>\n  add(interval, other);\n\n/**\n * Subtracts two intervals\n *\n * @function\n * @param {string} minuendInterval\n * @param {string} subtrahendInterval\n * @return {string} the subtracted interval name\n * @example\n * Interval.subtract('5P', '3M') // => '3m'\n * Interval.subtract('3M', '5P') // => '-3m'\n */\nexport const subtract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\n\nexport function transposeFifths(\n  interval: IntervalName,\n  fifths: number,\n): IntervalName {\n  const ivl = get(interval);\n  if (ivl.empty) return \"\";\n\n  const [nFifths, nOcts, dir] = ivl.coord;\n  return coordToInterval([nFifths + fifths, nOcts, dir]).name;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  num,\n  semitones,\n  quality,\n  fromSemitones,\n  distance,\n  invert,\n  simplify,\n  add,\n  addTo,\n  subtract,\n  transposeFifths,\n};\n\n//// PRIVATE ////\n\ntype Operation = (\n  a: IntervalCoordinates,\n  b: IntervalCoordinates,\n) => NoteCoordinates;\n\nfunction combinator(fn: Operation) {\n  return (a: IntervalName, b: IntervalName): IntervalName | undefined => {\n    const coordA = props(a).coord;\n    const coordB = props(b).coord;\n    if (coordA && coordB) {\n      const coord = fn(coordA, coordB);\n      return coordToInterval(coord).name;\n    }\n  };\n}\n","import { isNamedPitch } from \"@tonaljs/pitch\";\n\nexport * from \"@tonaljs/pitch\";\nexport * from \"@tonaljs/pitch-distance\";\nexport * from \"@tonaljs/pitch-interval\";\nexport * from \"@tonaljs/pitch-note\";\n\nexport const fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport function deprecate<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ResultFn extends (this: any, ...newArgs: any[]) => ReturnType<ResultFn>,\n>(original: string, alternative: string, fn: ResultFn) {\n  return function (this: unknown, ...args: unknown[]): ReturnType<ResultFn> {\n    // tslint:disable-next-line\n    console.warn(`${original} is deprecated. Use ${alternative}.`);\n    return fn.apply(this, args);\n  };\n}\n\nexport const isNamed = deprecate(\"isNamed\", \"isNamedPitch\", isNamedPitch);\n","import { NoteName, note as props } from \"@tonaljs/core\";\n\ntype Midi = number;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isMidi(arg: any): arg is Midi {\n  return +arg >= 0 && +arg <= 127;\n}\n\n/**\n * Get the note midi number (a number between 0 and 127)\n *\n * It returns undefined if not valid note name\n *\n * @function\n * @param {string|number} note - the note name or midi number\n * @return {Integer} the midi number or undefined if not valid note\n * @example\n * import { toMidi } from '@tonaljs/midi'\n * toMidi(\"C4\") // => 60\n * toMidi(60) // => 60\n * toMidi('60') // => 60\n */\nexport function toMidi(note: NoteName | number): number | null {\n  if (isMidi(note)) {\n    return +note;\n  }\n  const n = props(note);\n  return n.empty ? null : n.midi;\n}\n\n/**\n * Get the frequency in hertzs from midi number\n *\n * @param {number} midi - the note midi number\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\n * @return {number} the frequency or null if not valid note midi\n * @example\n * import { midiToFreq} from '@tonaljs/midi'\n * midiToFreq(69) // => 440\n */\nexport function midiToFreq(midi: number, tuning = 440): number {\n  return Math.pow(2, (midi - 69) / 12) * tuning;\n}\n\nconst L2 = Math.log(2);\nconst L440 = Math.log(440);\n\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precision)\n *\n * @param {number} frequency\n * @return {number}\n * @example\n * import { freqToMidi} from '@tonaljs/midi'\n * freqToMidi(220)); //=> 57\n * freqToMidi(261.62)); //=> 60\n * freqToMidi(261)); //=> 59.96\n */\nexport function freqToMidi(freq: number): number {\n  const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\n  return Math.round(v * 100) / 100;\n}\n\nexport interface ToNoteNameOptions {\n  pitchClass?: boolean;\n  sharps?: boolean;\n}\n\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * import { midiToNoteName } from '@tonaljs/midi'\n * midiToNoteName(61) // => \"Db4\"\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\n * // it rounds to nearest note\n * midiToNoteName(61.7) // => \"D4\"\n */\nexport function midiToNoteName(midi: number, options: ToNoteNameOptions = {}) {\n  if (isNaN(midi) || midi === -Infinity || midi === Infinity) return \"\";\n  midi = Math.round(midi);\n  const pcs = options.sharps === true ? SHARPS : FLATS;\n  const pc = pcs[midi % 12];\n  if (options.pitchClass) {\n    return pc;\n  }\n  const o = Math.floor(midi / 12) - 1;\n  return pc + o;\n}\n\nexport function chroma(midi: number): number {\n  return midi % 12;\n}\n\nfunction pcsetFromChroma(chroma: string): number[] {\n  return chroma.split(\"\").reduce((pcset, val, index) => {\n    if (index < 12 && val === \"1\") pcset.push(index);\n    return pcset;\n  }, [] as number[]);\n}\n\nfunction pcsetFromMidi(midi: number[]): number[] {\n  return midi\n    .map(chroma)\n    .sort((a, b) => a - b)\n    .filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n\n/**\n * Given a list of midi numbers, returns the pitch class set (unique chroma numbers)\n * @param midi\n * @example\n *\n */\nexport function pcset(notes: number[] | string): number[] {\n  return Array.isArray(notes) ? pcsetFromMidi(notes) : pcsetFromChroma(notes);\n}\n\nexport function pcsetNearest(notes: number[] | string) {\n  const set = pcset(notes);\n  return (midi: number): number | undefined => {\n    const ch = chroma(midi);\n    for (let i = 0; i < 12; i++) {\n      if (set.includes(ch + i)) return midi + i;\n      if (set.includes(ch - i)) return midi - i;\n    }\n    return undefined;\n  };\n}\n\nexport function pcsetSteps(notes: number[] | string, tonic: number) {\n  const set = pcset(notes);\n  const len = set.length;\n  return (step: number): number => {\n    const index = step < 0 ? (len - (-step % len)) % len : step % len;\n    const octaves = Math.floor(step / len);\n    return set[index] + octaves * 12 + tonic;\n  };\n}\n\nexport function pcsetDegrees(notes: number[] | string, tonic: number) {\n  const steps = pcsetSteps(notes, tonic);\n  return (degree: number): number | undefined => {\n    if (degree === 0) return undefined;\n    return steps(degree > 0 ? degree - 1 : degree);\n  };\n}\n\nexport default {\n  chroma,\n  freqToMidi,\n  isMidi,\n  midiToFreq,\n  midiToNoteName,\n  pcsetNearest,\n  pcset,\n  pcsetDegrees,\n  pcsetSteps,\n  toMidi,\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  IntervalName,\n  Note,\n  NoteLiteral,\n  NoteName,\n  Pitch,\n  transpose as _tr,\n  note as props,\n} from \"@tonaljs/core\";\nimport { freqToMidi, midiToNoteName } from \"@tonaljs/midi\";\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n\nconst toName = (n: Note) => n.name;\nconst onlyNotes = (array: any[]) =>\n  array.map(props).filter((n) => !n.empty) as Note[];\n\n/**\n * Return the natural note names without octave\n * @function\n * @example\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\n */\nexport function names(array?: any[]): string[] {\n  if (array === undefined) {\n    return NAMES.slice();\n  } else if (!Array.isArray(array)) {\n    return [];\n  } else {\n    return onlyNotes(array).map(toName);\n  }\n}\n\n/**\n * Get a note from a note name\n *\n * @function\n * @example\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport const get = props;\n\n/**\n * Get the note name\n * @function\n */\nexport const name = (note: NoteLiteral) => get(note).name;\n\n/**\n * Get the note pitch class name\n * @function\n */\nexport const pitchClass = (note: NoteLiteral) => get(note).pc;\n\n/**\n * Get the note accidentals\n * @function\n */\nexport const accidentals = (note: NoteLiteral) => get(note).acc;\n\n/**\n * Get the note octave\n * @function\n */\nexport const octave = (note: NoteLiteral) => get(note).oct;\n\n/**\n * Get the note midi\n * @function\n */\nexport const midi = (note: NoteLiteral) => get(note).midi;\n\n/**\n * Get the note midi\n * @function\n */\nexport const freq = (note: NoteLiteral) => get(note).freq;\n\n/**\n * Get the note chroma\n * @function\n */\nexport const chroma = (note: NoteLiteral) => get(note).chroma;\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidi(61) // => \"Db4\"\n * Note.fromMidi(61.7) // => \"D4\"\n */\nexport function fromMidi(midi: number) {\n  return midiToNoteName(midi);\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreq(freq: number) {\n  return midiToNoteName(freqToMidi(freq));\n}\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreqSharps(freq: number) {\n  return midiToNoteName(freqToMidi(freq), { sharps: true });\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidiSharps(61) // => \"C#4\"\n */\n\nexport function fromMidiSharps(midi: number) {\n  return midiToNoteName(midi, { sharps: true });\n}\n\n/**\n * Transpose a note by an interval\n */\nexport const transpose = _tr;\nexport const tr = _tr;\n\n/**\n * Transpose by an interval.\n * @function\n * @param {string} interval\n * @return {function} a function that transposes by the given interval\n * @example\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\n * // => [\"G\", \"A\", \"B\"]\n */\nexport const transposeBy = (interval: IntervalName) => (note: NoteName) =>\n  transpose(note, interval);\nexport const trBy = transposeBy;\n\n/**\n * Transpose from a note\n * @function\n * @param {string} note\n * @return {function}  a function that transposes the the note by an interval\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\n * // => [\"C\", \"E\", \"G\"]\n */\nexport const transposeFrom = (note: NoteName) => (interval: IntervalName) =>\n  transpose(note, interval);\nexport const trFrom = transposeFrom;\n\n/**\n * Transpose a note by a number of perfect fifths.\n *\n * @function\n * @param {string} note - the note name\n * @param {number} fifhts - the number of fifths\n * @return {string} the transposed note name\n *\n * @example\n * import { transposeFifths } from \"@tonaljs/note\"\n * transposeFifths(\"G4\", 1) // => \"D\"\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n */\nexport function transposeFifths(noteName: NoteName, fifths: number): NoteName {\n  return transpose(noteName, [fifths, 0]);\n}\nexport const trFifths = transposeFifths;\n\n// TODO: documentation\nexport function transposeOctaves(\n  noteName: NoteName,\n  octaves: number,\n): NoteName {\n  return transpose(noteName, [0, octaves]);\n}\n\nexport type NoteComparator = (a: Note, b: Note) => number;\n\nexport const ascending: NoteComparator = (a, b) => a.height - b.height;\nexport const descending: NoteComparator = (a, b) => b.height - a.height;\n\nexport function sortedNames(\n  notes: any[],\n  comparator?: NoteComparator,\n): string[] {\n  comparator = comparator || ascending;\n  return onlyNotes(notes).sort(comparator).map(toName);\n}\n\nexport function sortedUniqNames(notes: any[]): string[] {\n  return sortedNames(notes, ascending).filter(\n    (n, i, a) => i === 0 || n !== a[i - 1],\n  );\n}\n\n/**\n * Simplify a note\n *\n * @function\n * @param {string} note - the note to be simplified\n * - sameAccType: default true. Use same kind of accidentals that source\n * @return {string} the simplified note or '' if not valid note\n * @example\n * simplify(\"C##\") // => \"D\"\n * simplify(\"C###\") // => \"D#\"\n * simplify(\"C###\")\n * simplify(\"B#4\") // => \"C5\"\n */\nexport const simplify = (noteName: NoteName | Pitch): string => {\n  const note = get(noteName);\n  if (note.empty) {\n    return \"\";\n  }\n  return midiToNoteName(note.midi || note.chroma, {\n    sharps: note.alt > 0,\n    pitchClass: note.midi === null,\n  });\n};\n/**\n * Get enharmonic of a note\n *\n * @function\n * @param {string} note\n * @param [string] - [optional] Destination pitch class\n * @return {string} the enharmonic note name or '' if not valid note\n * @example\n * Note.enharmonic(\"Db\") // => \"C#\"\n * Note.enharmonic(\"C\") // => \"C\"\n * Note.enharmonic(\"F2\",\"E#\") // => \"E#2\"\n */\nexport function enharmonic(noteName: string, destName?: string) {\n  const src = get(noteName);\n  if (src.empty) {\n    return \"\";\n  }\n\n  // destination: use given or generate one\n  const dest = get(\n    destName ||\n      midiToNoteName(src.midi || src.chroma, {\n        sharps: src.alt < 0,\n        pitchClass: true,\n      }),\n  );\n\n  // ensure destination is valid\n  if (dest.empty || dest.chroma !== src.chroma) {\n    return \"\";\n  }\n\n  // if src has no octave, no need to calculate anything else\n  if (src.oct === undefined) {\n    return dest.pc;\n  }\n\n  // detect any octave overflow\n  const srcChroma = src.chroma - src.alt;\n  const destChroma = dest.chroma - dest.alt;\n  const destOctOffset =\n    srcChroma > 11 || destChroma < 0\n      ? -1\n      : srcChroma < 0 || destChroma > 11\n        ? +1\n        : 0;\n  // calculate the new octave\n  const destOct = src.oct + destOctOffset;\n  return dest.pc + destOct;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  pitchClass,\n  accidentals,\n  octave,\n  midi,\n  ascending,\n  descending,\n  sortedNames,\n  sortedUniqNames,\n  fromMidi,\n  fromMidiSharps,\n  freq,\n  fromFreq,\n  fromFreqSharps,\n  chroma,\n  transpose,\n  tr,\n  transposeBy,\n  trBy,\n  transposeFrom,\n  trFrom,\n  transposeFifths,\n  transposeOctaves,\n  trFifths,\n  simplify,\n  enharmonic,\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// ascending range\nfunction ascR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Creates a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\n * range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(from: number, to: number): number[] {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n\n/**\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} collection\n * @return {Array} the rotated collection\n *\n * @example\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate<T>(times: number, arr: T[]): T[] {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the collection with the null values removed\n * @function\n * @param {Array} collection\n * @return {Array}\n *\n * @example\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr: any[]): any[] {\n  return arr.filter((n) => n === 0 || n);\n}\n\n/**\n * Randomizes the order of the specified collection in-place, using the Fisher–Yates shuffle.\n *\n * @function\n * @param {Array} collection\n * @return {Array} the collection shuffled\n *\n * @example\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr: any[], rnd = Math.random): any[] {\n  let i: number;\n  let t: any;\n  let m: number = arr.length;\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an collection\n *\n * @param {Array} collection - the collection\n * @return {Array<Array>} an collection with all the permutations\n * @example\n * permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n */\nexport function permutations(arr: any[]): any[] {\n  if (arr.length === 0) {\n    return [[]];\n  }\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(\n      arr.map((e, pos) => {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      }),\n    );\n  }, []);\n}\n\nexport default {\n  compact,\n  permutations,\n  range,\n  rotate,\n  shuffle,\n};\n","import { compact, range, rotate } from \"@tonaljs/collection\";\nimport {\n  Interval,\n  IntervalName,\n  NotFound,\n  Note,\n  NoteName,\n  deprecate,\n  interval,\n  note,\n  transpose,\n} from \"@tonaljs/core\";\n\n/**\n * The properties of a pitch class set\n * @param {number} num - a number between 1 and 4095 (both included) that\n * uniquely identifies the set. It's the decimal number of the chrom.\n * @param {string} chroma - a string representation of the set: a 12-char string\n * with either \"1\" or \"0\" as characters, representing a pitch class or not\n * for the given position in the octave. For example, a \"1\" at index 0 means 'C',\n * a \"1\" at index 2 means 'D', and so on...\n * @param {string} normalized - the chroma but shifted to the first 1\n * @param {number} length - the number of notes of the pitch class set\n * @param {IntervalName[]} intervals - the intervals of the pitch class set\n * *starting from C*\n */\nexport interface Pcset {\n  readonly name: string;\n  readonly empty: boolean;\n  readonly setNum: number;\n  readonly chroma: PcsetChroma;\n  readonly normalized: PcsetChroma;\n  readonly intervals: IntervalName[];\n}\n\nexport const EmptyPcset: Pcset = {\n  empty: true,\n  name: \"\",\n  setNum: 0,\n  chroma: \"000000000000\",\n  normalized: \"000000000000\",\n  intervals: [],\n};\n\nexport type PcsetChroma = string;\nexport type PcsetNum = number;\n\n// UTILITIES\nconst setNumToChroma = (num: number): string =>\n  Number(num).toString(2).padStart(12, \"0\");\nconst chromaToNumber = (chroma: string): number => parseInt(chroma, 2);\nconst REGEX = /^[01]{12}$/;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isChroma(set: any): set is PcsetChroma {\n  return REGEX.test(set);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPcsetNum = (set: any): set is PcsetNum =>\n  typeof set === \"number\" && set >= 0 && set <= 4095;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPcset = (set: any): set is Pcset => set && isChroma(set.chroma);\n\nconst cache: { [key in string]: Pcset } = { [EmptyPcset.chroma]: EmptyPcset };\n\n/**\n * A definition of a pitch class set. It could be:\n * - The pitch class set chroma (a 12-length string with only 1s or 0s)\n * - The pitch class set number (an integer between 1 and 4095)\n * - An array of note names\n * - An array of interval names\n */\nexport type Set =\n  | Partial<Pcset>\n  | PcsetChroma\n  | PcsetNum\n  | NoteName[]\n  | IntervalName[];\n\n/**\n * Get the pitch class set of a collection of notes or set number or chroma\n */\nexport function get(src: Set): Pcset {\n  const chroma: PcsetChroma = isChroma(src)\n    ? src\n    : isPcsetNum(src)\n      ? setNumToChroma(src)\n      : Array.isArray(src)\n        ? listToChroma(src)\n        : isPcset(src)\n          ? src.chroma\n          : EmptyPcset.chroma;\n\n  return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\n}\n\n/**\n * Use Pcset.properties\n * @function\n * @deprecated\n */\nexport const pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\n\n/**\n * Get pitch class set chroma\n * @function\n * @example\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\n */\nexport const chroma = (set: Set) => get(set).chroma;\n\n/**\n * Get intervals (from C) of a set\n * @function\n * @example\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\n */\nconst intervals = (set: Set) => get(set).intervals;\n\n/**\n * Get pitch class set number\n * @function\n * @example\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\n */\nconst num = (set: Set) => get(set).setNum;\n\nconst IVLS = [\n  \"1P\",\n  \"2m\",\n  \"2M\",\n  \"3m\",\n  \"3M\",\n  \"4P\",\n  \"5d\",\n  \"5P\",\n  \"6m\",\n  \"6M\",\n  \"7m\",\n  \"7M\",\n];\n\n/**\n * @private\n * Get the intervals of a pcset *starting from C*\n * @param {Set} set - the pitch class set\n * @return {IntervalName[]} an array of interval names or an empty array\n * if not a valid pitch class set\n */\nexport function chromaToIntervals(chroma: PcsetChroma): IntervalName[] {\n  const intervals = [];\n  for (let i = 0; i < 12; i++) {\n    // tslint:disable-next-line:curly\n    if (chroma.charAt(i) === \"1\") intervals.push(IVLS[i]);\n  }\n  return intervals;\n}\n\nexport function notes(set: Set): NoteName[] {\n  return get(set).intervals.map((ivl) => transpose(\"C\", ivl));\n}\n\n/**\n * Get a list of all possible pitch class sets (all possible chromas) *having\n * C as root*. There are 2048 different chromas. If you want them with another\n * note you have to transpose it\n *\n * @see http://allthescales.org/\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\n */\nexport function chromas(): PcsetChroma[] {\n  return range(2048, 4095).map(setNumToChroma);\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|string} set - the list of notes or pitchChr of the set\n * @param {boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<string>} an array with all the modes of the chroma\n *\n * @example\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\n */\nexport function modes(set: Set, normalize = true): PcsetChroma[] {\n  const pcs = get(set);\n\n  const binary = pcs.chroma.split(\"\");\n  return compact(\n    binary.map((_, i) => {\n      const r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    }),\n  );\n}\n\n/**\n * Test if two pitch class sets are numentical\n *\n * @param {Array|string} set1 - one of the pitch class sets\n * @param {Array|string} set2 - the other pitch class set\n * @return {boolean} true if they are equal\n * @example\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1: Set, s2: Set) {\n  return get(s1).setNum === get(s2).setNum;\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function is curryfied.\n *\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\n * list of notes)\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\n * to test against (chroma or list of notes)\n * @example\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set: Set) {\n  const s = get(set).setNum;\n\n  return (notes: Set | Pcset) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o & s) === o;\n  };\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Set} set - an array of notes or a chroma set string to test against\n * @return {(subset: Set): boolean} a function that given a set\n * returns true if is a subset of the first one\n * @example\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set: Set) {\n  const s = get(set).setNum;\n  return (notes: Set) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o | s) === o;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n *\n * @param {Array<string>} set - the base set to test against\n * @param {string} note - the note to test\n * @return {boolean} true if the note is included in the pcset\n *\n * Can be partially applied\n *\n * @example\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\n * isNoteInCMajor('C4') // => true\n * isNoteInCMajor('C#4') // => false\n */\nexport function isNoteIncludedIn(set: Set) {\n  const s = get(set);\n\n  return (noteName: NoteName): boolean => {\n    const n = note(noteName);\n    return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\n  };\n}\n\n/** @deprecated use: isNoteIncludedIn */\nexport const includes = isNoteIncludedIn;\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|string} set - the pitch class set notes\n * @param {Array|string} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set: Set) {\n  const isIncluded = isNoteIncludedIn(set);\n  return (notes: NoteName[]) => {\n    return notes.filter(isIncluded);\n  };\n}\n\nexport default {\n  get,\n  chroma,\n  num,\n  intervals,\n  chromas,\n  isSupersetOf,\n  isSubsetOf,\n  isNoteIncludedIn,\n  isEqual,\n  filter,\n  modes,\n  notes,\n  // deprecated\n  pcset,\n};\n\n//// PRIVATE ////\n\nfunction chromaRotations(chroma: string): string[] {\n  const binary = chroma.split(\"\");\n  return binary.map((_, i) => rotate(i, binary).join(\"\"));\n}\n\nfunction chromaToPcset(chroma: PcsetChroma): Pcset {\n  const setNum = chromaToNumber(chroma);\n  const normalizedNum = chromaRotations(chroma)\n    .map(chromaToNumber)\n    .filter((n) => n >= 2048)\n    .sort()[0];\n  const normalized = setNumToChroma(normalizedNum);\n\n  const intervals = chromaToIntervals(chroma);\n\n  return {\n    empty: false,\n    name: \"\",\n    setNum,\n    chroma,\n    normalized,\n    intervals,\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction listToChroma(set: any[]): PcsetChroma {\n  if (set.length === 0) {\n    return EmptyPcset.chroma;\n  }\n\n  let pitch: Note | Interval | NotFound;\n  const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < set.length; i++) {\n    pitch = note(set[i]);\n    // tslint:disable-next-line: curly\n    if (pitch.empty) pitch = interval(set[i]);\n    // tslint:disable-next-line: curly\n    if (!pitch.empty) binary[pitch.chroma] = 1;\n  }\n  return binary.join(\"\");\n}\n","import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\nexport type ChordQuality =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  | \"Unknown\";\n\nexport interface ChordType extends Pcset {\n  name: string;\n  quality: ChordQuality;\n  aliases: string[];\n}\nconst NoChordType: ChordType = {\n  ...EmptyPcset,\n  name: \"\",\n  quality: \"Unknown\",\n  intervals: [],\n  aliases: [],\n};\n\ntype ChordTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ChordType[] = [];\nlet index: Record<ChordTypeName, ChordType> = {};\n\n/**\n * Given a chord name or chroma, return the chord properties\n * @param {string} source - chord name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/chord-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ChordTypeName): ChordType {\n  return index[type] || NoChordType;\n}\n\nexport const chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\n\n/**\n * Get all chord (long) names\n */\nexport function names() {\n  return dictionary.map((chord) => chord.name).filter((x) => x);\n}\n\n/**\n * Get all chord symbols\n */\nexport function symbols() {\n  return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\n}\n\n/**\n * Keys used to reference chord types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Return a list of all chord types\n */\nexport function all(): ChordType[] {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a chord to the dictionary.\n * @param intervals\n * @param aliases\n * @param [fullName]\n */\nexport function add(intervals: string[], aliases: string[], fullName?: string) {\n  const quality = getQuality(intervals);\n  const chord = {\n    ...pcset(intervals),\n    name: fullName || \"\",\n    quality,\n    intervals,\n    aliases,\n  };\n  dictionary.push(chord);\n  if (chord.name) {\n    index[chord.name] = chord;\n  }\n  index[chord.setNum] = chord;\n  index[chord.chroma] = chord;\n  chord.aliases.forEach((alias) => addAlias(chord, alias));\n}\n\nexport function addAlias(chord: ChordType, alias: string) {\n  index[alias] = chord;\n}\n\nfunction getQuality(intervals: string[]): ChordQuality {\n  const has = (interval: string) => intervals.indexOf(interval) !== -1;\n  return has(\"5A\")\n    ? \"Augmented\"\n    : has(\"3M\")\n      ? \"Major\"\n      : has(\"5d\")\n        ? \"Diminished\"\n        : has(\"3m\")\n          ? \"Minor\"\n          : \"Unknown\";\n}\n\ndata.forEach(([ivls, fullName, names]: string[]) =>\n  add(ivls.split(\" \"), names.split(\" \"), fullName),\n);\ndictionary.sort((a, b) => a.setNum - b.setNum);\n\nexport default {\n  names,\n  symbols,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n  // deprecated\n  entries,\n  chordType,\n};\n","/**\n * @private\n * Chord List\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\n */\nconst CHORDS: string[][] = [\n  // ==Major==\n  [\"1P 3M 5P\", \"major\", \"M ^  maj\"],\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7 ^7\"],\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9 ^9\"],\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\n  [\"1P 3M 5P 6M 9M\", \"sixth added ninth\", \"6add9 6/9 69 M69\"],\n  [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\n  [\n    \"1P 3M 5P 7M 11A\",\n    \"major seventh sharp eleventh\",\n    \"maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11\",\n  ],\n  // ==Minor==\n  // '''Normal'''\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\n  [\n    \"1P 3m 5P 7M\",\n    \"minor/major seventh\",\n    \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7 -maj7\",\n  ],\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\n  [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\n  // '''Diminished'''\n  [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø -7b5 h7 h\"],\n  // ==Dominant/Seventh==\n  // '''Normal'''\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\n  // '''Altered'''\n  [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\n  // '''Suspended'''\n  [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\n  [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\n  [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\n  [\n    \"1P 4P 5P 7m 9m\",\n    \"suspended fourth flat ninth\",\n    \"b9sus phryg 7b9sus 7b9sus4\",\n  ],\n  // ==Other==\n  [\"1P 5P\", \"fifth\", \"5\"],\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\n  [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\n  [\n    \"1P 3M 5P 7M 9M 11A\",\n    \"major sharp eleventh (lydian)\",\n    \"maj9#11 Δ9#11 ^9#11\",\n  ],\n  // ==Legacy==\n  [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\n  [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\n  [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\n  [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\n  [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\n  [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\n  [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\n  [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\n  [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\n  [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\n  [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\n  [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\n  [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\n  [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\n  [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\n  [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\n  [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\n  [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\n  [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\n  [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\n  [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\n  [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\n  [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\n  [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\n  [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\n  [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\n  [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\n  [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\n  [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\n  [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\n  [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\n  [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\n  [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\n  [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\n  [\"1P 3M 5d\", \"\", \"Mb5\"],\n  [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\n  [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\n  [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\n  [\"1P 3M 5d 7m\", \"\", \"7b5\"],\n  [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\n  [\"1P 3M 7m\", \"\", \"7no5\"],\n  [\"1P 3M 7m 13m\", \"\", \"7b13\"],\n  [\"1P 3M 7m 9M\", \"\", \"9no5\"],\n  [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\n  [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\n  [\"1P 3m 4P 5P\", \"\", \"madd4\"],\n  [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\n  [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\n  [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\n  [\"1P 3m 5P 9M\", \"\", \"madd9\"],\n  [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\n  [\"1P 3m 5d 7M\", \"\", \"oM7\"],\n  [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\n  [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\n  [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\n  [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\n  [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\n  [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\n  [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\n  [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\n  [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\n  [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\n  [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\n  [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\n  [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\n  [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\n  [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\n  [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\n];\n\nexport default CHORDS;\n","import { all, ChordType } from \"@tonaljs/chord-type\";\nimport { note } from \"@tonaljs/core\";\nimport { modes } from \"@tonaljs/pcset\";\n\ninterface FoundChord {\n  readonly weight: number;\n  readonly name: string;\n}\n\nconst namedSet = (notes: string[]) => {\n  const pcToName = notes.reduce<Record<number, string>>((record, n) => {\n    const chroma = note(n).chroma;\n    if (chroma !== undefined) {\n      record[chroma] = record[chroma] || note(n).name;\n    }\n    return record;\n  }, {});\n\n  return (chroma: number) => pcToName[chroma];\n};\n\ntype DetectOptions = {\n  assumePerfectFifth: boolean;\n};\nexport function detect(\n  source: string[],\n  options: Partial<DetectOptions> = {},\n): string[] {\n  const notes = source.map((n) => note(n).pc).filter((x) => x);\n  if (note.length === 0) {\n    return [];\n  }\n\n  const found: FoundChord[] = findMatches(notes, 1, options);\n\n  return found\n    .filter((chord) => chord.weight)\n    .sort((a, b) => b.weight - a.weight)\n    .map((chord) => chord.name);\n}\n\n/* tslint:disable:no-bitwise */\nconst BITMASK = {\n  // 3m 000100000000\n  // 3M 000010000000\n  anyThirds: 384,\n  // 5P 000000010000\n  perfectFifth: 16,\n  // 5d 000000100000\n  // 5A 000000001000\n  nonPerfectFifths: 40,\n  anySeventh: 3,\n};\n\nconst testChromaNumber = (bitmask: number) => (chromaNumber: number) =>\n  Boolean(chromaNumber & bitmask);\nconst hasAnyThird = testChromaNumber(BITMASK.anyThirds);\nconst hasPerfectFifth = testChromaNumber(BITMASK.perfectFifth);\nconst hasAnySeventh = testChromaNumber(BITMASK.anySeventh);\nconst hasNonPerfectFifth = testChromaNumber(BITMASK.nonPerfectFifths);\n\nfunction hasAnyThirdAndPerfectFifthAndAnySeventh(chordType: ChordType) {\n  const chromaNumber = parseInt(chordType.chroma, 2);\n  return (\n    hasAnyThird(chromaNumber) &&\n    hasPerfectFifth(chromaNumber) &&\n    hasAnySeventh(chromaNumber)\n  );\n}\n\nfunction withPerfectFifth(chroma: string): string {\n  const chromaNumber = parseInt(chroma, 2);\n  return hasNonPerfectFifth(chromaNumber)\n    ? chroma\n    : (chromaNumber | 16).toString(2);\n}\n\n/* tslint:enable:no-bitwise */\n\ntype FindMatchesOptions = {\n  assumePerfectFifth: boolean;\n};\nfunction findMatches(\n  notes: string[],\n  weight: number,\n  options: Partial<FindMatchesOptions>,\n): FoundChord[] {\n  const tonic = notes[0];\n  const tonicChroma = note(tonic).chroma;\n  const noteName = namedSet(notes);\n  // we need to test all chromas to get the correct baseNote\n  const allModes = modes(notes, false);\n\n  const found: FoundChord[] = [];\n  allModes.forEach((mode, index) => {\n    const modeWithPerfectFifth =\n      options.assumePerfectFifth && withPerfectFifth(mode);\n    // some chords could have the same chroma but different interval spelling\n    const chordTypes = all().filter((chordType) => {\n      if (\n        options.assumePerfectFifth &&\n        hasAnyThirdAndPerfectFifthAndAnySeventh(chordType)\n      ) {\n        return chordType.chroma === modeWithPerfectFifth;\n      }\n      return chordType.chroma === mode;\n    });\n\n    chordTypes.forEach((chordType) => {\n      const chordName = chordType.aliases[0];\n      const baseNote = noteName(index);\n      const isInversion = index !== tonicChroma;\n      if (isInversion) {\n        found.push({\n          weight: 0.5 * weight,\n          name: `${baseNote}${chordName}/${tonic}`,\n        });\n      } else {\n        found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\n      }\n    });\n  });\n\n  return found;\n}\n\nexport default { detect };\n","import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\n/**\n * Properties for a scale in the scale dictionary. It's a pitch class set\n * properties with the following additional information:\n * - name: the scale name\n * - aliases: alternative list of names\n * - intervals: an array of interval names\n */\nexport interface ScaleType extends Pcset {\n  readonly name: string;\n  readonly aliases: string[];\n}\n\nexport const NoScaleType: ScaleType = {\n  ...EmptyPcset,\n  intervals: [],\n  aliases: [],\n};\n\ntype ScaleTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ScaleType[] = [];\nlet index: Record<ScaleTypeName, ScaleType> = {};\n\nexport function names() {\n  return dictionary.map((scale) => scale.name);\n}\n\n/**\n * Given a scale name or chroma, return the scale properties\n *\n * @param {string} type - scale name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/scale-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ScaleTypeName): ScaleType {\n  return index[type] || NoScaleType;\n}\n\nexport const scaleType = deprecate(\n  \"ScaleDictionary.scaleType\",\n  \"ScaleType.get\",\n  get,\n);\n\n/**\n * Return a list of all scale types\n */\nexport function all() {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\n  \"ScaleDictionary.entries\",\n  \"ScaleType.all\",\n  all,\n);\n\n/**\n * Keys used to reference scale types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a scale into dictionary\n * @param intervals\n * @param name\n * @param aliases\n */\nexport function add(\n  intervals: string[],\n  name: string,\n  aliases: string[] = [],\n): ScaleType {\n  const scale = { ...pcset(intervals), name, intervals, aliases };\n  dictionary.push(scale);\n  index[scale.name] = scale;\n  index[scale.setNum] = scale;\n  index[scale.chroma] = scale;\n  scale.aliases.forEach((alias) => addAlias(scale, alias));\n  return scale;\n}\n\nexport function addAlias(scale: ScaleType, alias: string) {\n  index[alias] = scale;\n}\n\ndata.forEach(([ivls, name, ...aliases]: string[]) =>\n  add(ivls.split(\" \"), name, aliases),\n);\n\nexport default {\n  names,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n\n  // deprecated\n  entries,\n  scaleType,\n};\n","// SCALES\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\nconst SCALES: string[][] = [\n  // Basic scales\n  [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\n  [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m\", \"minor\", \"aeolian\"],\n\n  // Jazz common scales\n  [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\n  [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\n  [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\n  [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\n  [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\n  [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\n\n  // Modes\n  [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\n  [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\n  [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\n  [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\n  [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\n\n  // 5-note scales\n  [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\n  [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\n  [\"1P 2M 4P 5P 6M\", \"ritusen\"],\n  [\"1P 2M 4P 5P 7m\", \"egyptian\"],\n  [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\n  [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\n  [\"1P 2m 3m 5P 6m\", \"pelog\"],\n  [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\n  [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\n  [\"1P 2m 4P 5d 7m\", \"iwato\"],\n  [\"1P 2m 4P 5P 7m\", \"in-sen\"],\n  [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\n  [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\n  [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\n  [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\n  [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\n  [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\n  [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\n  [\"1P 2m 3M 5P 6M\", \"scriabin\"],\n  [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\n  [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\n  [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\n  [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\n  [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\n\n  // 6-note scales\n  [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\n  [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\n  [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\n  [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\n  [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\n  [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\n  [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\n  [\"1P 2M 3M 4A 5A 6A\", \"whole tone\", \"messiaen's mode #1\"],\n  [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\n\n  // 7-note scales\n  [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\n  [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\n  [\n    \"1P 2m 2A 3M 4A 6m 7m\",\n    \"altered\",\n    \"super locrian\",\n    \"diminished whole tone\",\n    \"pomeroy\",\n  ],\n  [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\n  [\n    \"1P 2M 3M 4P 5P 6m 7m\",\n    \"mixolydian b6\",\n    \"melodic minor fifth mode\",\n    \"hindu\",\n  ],\n  [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\n  [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\n  [\n    \"1P 2m 3m 4P 5P 6M 7m\",\n    \"dorian b2\",\n    \"phrygian #6\",\n    \"melodic minor second mode\",\n  ],\n  [\n    \"1P 2m 3m 4d 5d 6m 7d\",\n    \"ultralocrian\",\n    \"superlocrian bb7\",\n    \"superlocrian diminished\",\n  ],\n  [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\n  [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\n  // Source https://en.wikipedia.org/wiki/Ukrainian_Dorian_scale\n  [\n    \"1P 2M 3m 4A 5P 6M 7m\",\n    \"dorian #4\",\n    \"ukrainian dorian\",\n    \"romanian minor\",\n    \"altered dorian\",\n  ],\n  [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\n  [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\n  [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\n  [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\n  [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\n  [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\n  [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\n  [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\n  [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\n  [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\n  [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\n  [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\n  [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\n  [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\n  [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\n  [\n    \"1P 2M 3M 4P 5A 6M 7M\",\n    \"major augmented\",\n    \"major #5\",\n    \"ionian augmented\",\n    \"ionian #5\",\n  ],\n  [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\n\n  // 8-note scales\n  [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\n  [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\n  [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\n  [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\n  [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\n  [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\n  [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\n  [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\n  [\n    \"1P 2m 3m 3M 4A 5P 6M 7m\",\n    \"half-whole diminished\",\n    \"dominant diminished\",\n    \"messiaen's mode #2\",\n  ],\n  [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\n  [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\n\n  // 9-note scales\n  [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\n  [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\n\n  // 10-note scales\n  [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\n\n  // 12-note scales\n  [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\n];\n\nexport default SCALES;\n","import { detect } from \"@tonaljs/chord-detect\";\nimport {\n  ChordType,\n  all as chordTypes,\n  get as getChordType,\n} from \"@tonaljs/chord-type\";\nimport { subtract } from \"@tonaljs/interval\";\nimport { isSubsetOf, isSupersetOf } from \"@tonaljs/pcset\";\nimport {\n  distance,\n  tonicIntervalsTransposer,\n  transpose as transposeNote,\n} from \"@tonaljs/pitch-distance\";\nimport { NoteName, note, tokenizeNote } from \"@tonaljs/pitch-note\";\nimport { all as scaleTypes } from \"@tonaljs/scale-type\";\n\nexport { detect } from \"@tonaljs/chord-detect\";\n\ntype ChordNameOrTokens =\n  | string // full name to be parsed\n  | [string] // only the name\n  | [string, string] // tonic, name\n  | [string, string, string]; // tonic, name, bass\ntype ChordNameTokens = [string, string, string]; // [TONIC, SCALE TYPE, BASS]\n\nexport interface Chord extends ChordType {\n  tonic: string | null;\n  type: string;\n  root: string;\n  bass: string;\n  rootDegree: number;\n  symbol: string;\n  notes: NoteName[];\n}\n\nconst NoChord: Chord = {\n  empty: true,\n  name: \"\",\n  symbol: \"\",\n  root: \"\",\n  bass: \"\",\n  rootDegree: 0,\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  quality: \"Unknown\",\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\n//const NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic, chord type and bass\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * This function does NOT check if the bass is part of the chord or not but it\n * only accepts a pitch class as bass\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type, bass]\n * @example\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\n */\nexport function tokenize(name: string): ChordNameTokens {\n  const [letter, acc, oct, type] = tokenizeNote(name);\n  if (letter === \"\") {\n    return tokenizeBass(\"\", name);\n  } else if (letter === \"A\" && type === \"ug\") {\n    return tokenizeBass(\"\", \"aug\");\n  } else {\n    return tokenizeBass(letter + acc, oct + type);\n  }\n}\n\nfunction tokenizeBass(note: string, chord: string): ChordNameTokens {\n  const split = chord.split(\"/\");\n  if (split.length === 1) {\n    return [note, split[0], \"\"];\n  }\n  const [letter, acc, oct, type] = tokenizeNote(split[1]);\n  // Only a pitch class is accepted as bass note\n  if (letter !== \"\" && oct === \"\" && type === \"\") {\n    return [note, split[0], letter + acc];\n  } else {\n    return [note, chord, \"\"];\n  }\n}\n\n/**\n * Get a Chord from a chord name.\n */\nexport function get(src: ChordNameOrTokens): Chord {\n  if (Array.isArray(src)) {\n    return getChord(src[1] || \"\", src[0], src[2]);\n  } else if (src === \"\") {\n    return NoChord;\n  } else {\n    const [tonic, type, bass] = tokenize(src);\n    const chord = getChord(type, tonic, bass);\n    return chord.empty ? getChord(src) : chord;\n  }\n}\n\n/**\n * Get chord properties\n *\n * @param typeName - the chord type name\n * @param [tonic] - Optional tonic\n * @param [root]  - Optional root (requires a tonic)\n */\nexport function getChord(\n  typeName: string,\n  optionalTonic?: string,\n  optionalBass?: string,\n): Chord {\n  const type = getChordType(typeName);\n  const tonic = note(optionalTonic || \"\");\n  const bass = note(optionalBass || \"\");\n\n  if (\n    type.empty ||\n    (optionalTonic && tonic.empty) ||\n    (optionalBass && bass.empty)\n  ) {\n    return NoChord;\n  }\n\n  const bassInterval = distance(tonic.pc, bass.pc);\n  const bassIndex = type.intervals.indexOf(bassInterval);\n  const hasRoot = bassIndex >= 0;\n  const root = hasRoot ? bass : note(\"\");\n  const rootDegree = bassIndex === -1 ? NaN : bassIndex + 1;\n  const hasBass = bass.pc && bass.pc !== tonic.pc;\n\n  const intervals = Array.from(type.intervals);\n\n  if (hasRoot) {\n    for (let i = 1; i < rootDegree; i++) {\n      const num = intervals[0][0];\n      const quality = intervals[0][1];\n      const newNum = parseInt(num, 10) + 7;\n      intervals.push(`${newNum}${quality}`);\n      intervals.shift();\n    }\n  } else if (hasBass) {\n    const ivl = subtract(distance(tonic.pc, bass.pc), \"8P\");\n    if (ivl) intervals.unshift(ivl);\n  }\n\n  const notes = tonic.empty\n    ? []\n    : intervals.map((i) => transposeNote(tonic.pc, i));\n\n  typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\n  const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${\n    hasRoot && rootDegree > 1 ? \"/\" + root.pc : hasBass ? \"/\" + bass.pc : \"\"\n  }`;\n  const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${\n    hasRoot && rootDegree > 1\n      ? \" over \" + root.pc\n      : hasBass\n        ? \" over \" + bass.pc\n        : \"\"\n  }`;\n  return {\n    ...type,\n    name,\n    symbol,\n    tonic: tonic.pc,\n    type: type.name,\n    root: root.pc,\n    bass: hasBass ? bass.pc : \"\",\n    intervals,\n    rootDegree,\n    notes,\n  };\n}\n\nexport const chord = get;\n\n/**\n * Transpose a chord name\n *\n * @param {string} chordName - the chord name\n * @return {string} the transposed chord\n *\n * @example\n * transpose('Dm7', 'P4') // => 'Gm7\n */\nexport function transpose(chordName: string, interval: string): string {\n  const [tonic, type, bass] = tokenize(chordName);\n  if (!tonic) {\n    return chordName;\n  }\n  const tr = transposeNote(bass, interval);\n  const slash = tr ? \"/\" + tr : \"\";\n  return transposeNote(tonic, interval) + type + slash;\n}\n\n/**\n * Get all scales where the given chord fits\n *\n * @example\n * chordScales('C7b9')\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\n */\nexport function chordScales(name: string): string[] {\n  const s = get(name);\n  const isChordIncluded = isSupersetOf(s.chroma);\n  return scaleTypes()\n    .filter((scale) => isChordIncluded(scale.chroma))\n    .map((scale) => scale.name);\n}\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @example\n * extended(\"CMaj7\")\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\n */\nexport function extended(chordName: string): string[] {\n  const s = get(chordName);\n  const isSuperset = isSupersetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSuperset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @example\n */\nexport function reduced(chordName: string): string[] {\n  const s = get(chordName);\n  const isSubset = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSubset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Return the chord notes\n */\nexport function notes(chordName: ChordNameOrTokens, tonic?: string): string[] {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  if (!note || chord.empty) return [];\n  return chord.intervals.map((ivl) => transposeNote(note, ivl));\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3, 4].map(Chord.degrees(\"C\")) => [\"C\", \"E\", \"G\", \"C\"]\n * [1, 2, 3, 4].map(Chord.degrees(\"C4\")) => [\"C4\", \"E4\", \"G4\", \"C5\"]\n */\nexport function degrees(chordName: ChordNameOrTokens, tonic?: string) {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  const transpose = tonicIntervalsTransposer(chord.intervals, note);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(chordName: ChordNameOrTokens, tonic?: string) {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  return tonicIntervalsTransposer(chord.intervals, note);\n}\n\nexport default {\n  getChord,\n  get,\n  detect,\n  chordScales,\n  extended,\n  reduced,\n  tokenize,\n  transpose,\n  degrees,\n  steps,\n  notes,\n  chord,\n};\n","/**\n * References:\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\n * @module scale\n */\nimport { all as chordTypes } from \"@tonaljs/chord-type\";\nimport { range as nums, rotate } from \"@tonaljs/collection\";\nimport {\n  deprecate,\n  note,\n  NoteName,\n  tonicIntervalsTransposer,\n  transpose,\n} from \"@tonaljs/core\";\nimport { enharmonic, fromMidi, sortedUniqNames } from \"@tonaljs/note\";\nimport {\n  chroma,\n  isChroma,\n  isSubsetOf,\n  isSupersetOf,\n  modes,\n} from \"@tonaljs/pcset\";\nimport {\n  all,\n  all as scaleTypes,\n  get as getScaleType,\n  names as scaleTypeNames,\n  ScaleType,\n} from \"@tonaljs/scale-type\";\n\ntype ScaleName = string;\ntype ScaleNameTokens = [string, string]; // [TONIC, SCALE TYPE]\n\nexport interface Scale extends ScaleType {\n  tonic: string | null;\n  type: string;\n  notes: NoteName[];\n}\n\nconst NoScale: Scale = {\n  empty: true,\n  name: \"\",\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(name: ScaleName): ScaleNameTokens {\n  if (typeof name !== \"string\") {\n    return [\"\", \"\"];\n  }\n  const i = name.indexOf(\" \");\n  const tonic = note(name.substring(0, i));\n  if (tonic.empty) {\n    const n = note(name);\n    return n.empty ? [\"\", name] : [n.name, \"\"];\n  }\n\n  const type = name.substring(tonic.name.length + 1);\n  return [tonic.name, type.length ? type : \"\"];\n}\n\n/**\n * Get all scale names\n * @function\n */\nexport const names = scaleTypeNames;\n\n/**\n * Get a Scale from a scale name.\n */\nexport function get(src: ScaleName | ScaleNameTokens): Scale {\n  const tokens = Array.isArray(src) ? src : tokenize(src);\n  const tonic = note(tokens[0]).name;\n  const st = getScaleType(tokens[1]);\n  if (st.empty) {\n    return NoScale;\n  }\n\n  const type = st.name;\n  const notes: string[] = tonic\n    ? st.intervals.map((i) => transpose(tonic, i))\n    : [];\n\n  const name = tonic ? tonic + \" \" + type : type;\n\n  return { ...st, name, type, tonic, notes };\n}\n\nexport const scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\n\nexport function detect(\n  notes: string[],\n  options: { tonic?: string; match?: \"exact\" | \"fit\" } = {},\n): string[] {\n  const notesChroma = chroma(notes);\n  const tonic = note(options.tonic ?? notes[0] ?? \"\");\n  const tonicChroma = tonic.chroma;\n  if (tonicChroma === undefined) {\n    return [];\n  }\n\n  const pitchClasses = notesChroma.split(\"\");\n  pitchClasses[tonicChroma] = \"1\";\n  const scaleChroma = rotate(tonicChroma, pitchClasses).join(\"\");\n  const match = all().find((scaleType) => scaleType.chroma === scaleChroma);\n\n  const results: string[] = [];\n  if (match) {\n    results.push(tonic.name + \" \" + match.name);\n  }\n  if (options.match === \"exact\") {\n    return results;\n  }\n\n  extended(scaleChroma).forEach((scaleName) => {\n    results.push(tonic.name + \" \" + scaleName);\n  });\n\n  return results;\n}\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nexport function scaleChords(name: string): string[] {\n  const s = get(name);\n  const inScale = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => inScale(chord.chroma))\n    .map((chord) => chord.aliases[0]);\n}\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nexport function extended(name: string): string[] {\n  const chroma = isChroma(name) ? name : get(name).chroma;\n  const isSuperset = isSupersetOf(chroma);\n  return scaleTypes()\n    .filter((scale) => isSuperset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nexport function reduced(name: string): string[] {\n  const isSubset = isSubsetOf(get(name).chroma);\n  return scaleTypes()\n    .filter((scale) => isSubset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {string[]} notes\n * @return {string[]} pitch classes with same tonic\n * @example\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nexport function scaleNotes(notes: NoteName[]) {\n  const pcset: string[] = notes.map((n) => note(n).pc).filter((x) => x);\n  const tonic = pcset[0];\n  const scale = sortedUniqNames(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n}\n\ntype ScaleMode = [string, string];\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nexport function modeNames(name: string): ScaleMode[] {\n  const s = get(name);\n  if (s.empty) {\n    return [];\n  }\n\n  const tonics = s.tonic ? s.notes : s.intervals;\n  return modes(s.chroma)\n    .map((chroma: string, i: number): ScaleMode => {\n      const modeName = get(chroma).name;\n      return modeName ? [tonics[i], modeName] : [\"\", \"\"];\n    })\n    .filter((x) => x[0]);\n}\n\nfunction getNoteNameOf(scale: string | string[]) {\n  const names = Array.isArray(scale) ? scaleNotes(scale) : get(scale).notes;\n  const chromas = names.map((name) => note(name).chroma);\n\n  return (noteOrMidi: string | number): string | undefined => {\n    const currNote =\n      typeof noteOrMidi === \"number\"\n        ? note(fromMidi(noteOrMidi))\n        : note(noteOrMidi);\n    const height = currNote.height;\n\n    if (height === undefined) return undefined;\n    const chroma = height % 12;\n    const position = chromas.indexOf(chroma);\n    if (position === -1) return undefined;\n    return enharmonic(currNote.name, names[position]);\n  };\n}\n\nexport function rangeOf(scale: string | string[]) {\n  const getName = getNoteNameOf(scale);\n  return (fromNote: string, toNote: string) => {\n    const from = note(fromNote).height;\n    const to = note(toNote).height;\n    if (from === undefined || to === undefined) return [];\n\n    return nums(from, to)\n      .map(getName)\n      .filter((x) => x);\n  };\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3].map(Scale.degrees(\"C major\")) => [\"C\", \"D\", \"E\"]\n * [1, 2, 3].map(Scale.degrees(\"C4 major\")) => [\"C4\", \"D4\", \"E4\"]\n */\nexport function degrees(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  const transpose = tonicIntervalsTransposer(intervals, tonic);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  return tonicIntervalsTransposer(intervals, tonic);\n}\n\nexport default {\n  degrees,\n  detect,\n  extended,\n  get,\n  modeNames,\n  names,\n  rangeOf,\n  reduced,\n  scaleChords,\n  scaleNotes,\n  steps,\n  tokenize,\n\n  // deprecated\n  scale,\n};\n","import {\n  accToAlt,\n  altToAcc,\n  deprecate,\n  interval,\n  isNamed,\n  isPitch,\n  Pitch,\n} from \"@tonaljs/core\";\n\nexport interface RomanNumeral extends Pitch {\n  readonly name: string;\n  readonly empty: boolean;\n  readonly roman: string;\n  readonly interval: string;\n  readonly acc: string;\n  readonly chordType: string;\n  readonly major: boolean;\n  readonly dir: 1;\n}\n\nexport interface NoRomanNumeral extends Partial<RomanNumeral> {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly chordType: \"\";\n}\nconst NoRomanNumeral: NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\n\nconst cache: Record<string, RomanNumeral | NoRomanNumeral> = {};\n\n/**\n * Get properties of a roman numeral string\n *\n * @function\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\n * @return {Object} - the roman numeral properties\n * @param {string} name - the roman numeral (tonic)\n * @param {string} type - the chord type\n * @param {string} num - the number (1 = I, 2 = II...)\n * @param {boolean} major - major or not\n *\n * @example\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function get(src: any): RomanNumeral | NoRomanNumeral {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : typeof src === \"number\"\n      ? get(NAMES[src] || \"\")\n      : isPitch(src)\n        ? fromPitch(src)\n        : isNamed(src)\n          ? get(src.name)\n          : NoRomanNumeral;\n}\n\nconst romanNumeral = deprecate(\n  \"RomanNumeral.romanNumeral\",\n  \"RomanNumeral.get\",\n  get,\n);\n\n/**\n * Get roman numeral names\n *\n * @function\n * @param {boolean} [isMajor=true]\n * @return {Array<String>}\n *\n * @example\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n */\nexport function names(major = true) {\n  return (major ? NAMES : NAMES_MINOR).slice();\n}\n\nfunction fromPitch(pitch: Pitch): RomanNumeral | NoRomanNumeral {\n  return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\n}\n\nconst REGEX =\n  /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\n\n// [name, accidentals, romanNumeral, chordType]\ntype RomanNumeralTokens = [string, string, string, string];\nexport function tokenize(str: string): RomanNumeralTokens {\n  return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]) as RomanNumeralTokens;\n}\n\nconst ROMANS = \"I II III IV V VI VII\";\nconst NAMES = ROMANS.split(\" \");\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\n\nfunction parse(src: string): RomanNumeral | NoRomanNumeral {\n  const [name, acc, roman, chordType] = tokenize(src);\n  if (!roman) {\n    return NoRomanNumeral;\n  }\n\n  const upperRoman = roman.toUpperCase();\n  const step = NAMES.indexOf(upperRoman);\n  const alt = accToAlt(acc);\n  const dir = 1;\n  return {\n    empty: false,\n    name,\n    roman,\n    interval: interval({ step, alt, dir }).name,\n    acc,\n    chordType,\n    alt,\n    step,\n    major: roman === upperRoman,\n    oct: 0,\n    dir,\n  };\n}\n\nexport default {\n  names,\n  get,\n  // deprecated\n  romanNumeral,\n};\n","import { accToAlt, altToAcc, note, transpose } from \"@tonaljs/core\";\nimport { transposeFifths } from \"@tonaljs/note\";\nimport { get as roman } from \"@tonaljs/roman-numeral\";\n\nconst Empty: readonly string[] = Object.freeze([] as string[]);\n\nexport interface Key {\n  readonly type: \"major\" | \"minor\";\n  readonly tonic: string;\n  readonly alteration: number;\n  readonly keySignature: string;\n}\n\nconst NoKey: Key = {\n  type: \"major\",\n  tonic: \"\",\n  alteration: 0,\n  keySignature: \"\",\n};\n\nexport interface KeyScale {\n  readonly tonic: string;\n  readonly grades: readonly string[];\n  readonly intervals: readonly string[];\n  readonly scale: readonly string[];\n  readonly triads: readonly string[];\n  readonly chords: readonly string[];\n  readonly chordsHarmonicFunction: readonly string[];\n  readonly chordScales: readonly string[];\n}\n\nconst NoKeyScale: KeyScale = {\n  tonic: \"\",\n  grades: Empty,\n  intervals: Empty,\n  scale: Empty,\n  triads: Empty,\n  chords: Empty,\n  chordsHarmonicFunction: Empty,\n  chordScales: Empty,\n};\n\nexport interface MajorKey extends Key, KeyScale {\n  readonly type: \"major\";\n  readonly minorRelative: string;\n  readonly scale: readonly string[];\n  readonly secondaryDominants: readonly string[];\n  readonly secondaryDominantsMinorRelative: readonly string[];\n  readonly substituteDominants: readonly string[];\n  readonly substituteDominantsMinorRelative: readonly string[];\n}\n\nconst NoMajorKey: MajorKey = {\n  ...NoKey,\n  ...NoKeyScale,\n  type: \"major\",\n  minorRelative: \"\",\n  scale: Empty,\n  secondaryDominants: Empty,\n  secondaryDominantsMinorRelative: Empty,\n  substituteDominants: Empty,\n  substituteDominantsMinorRelative: Empty,\n};\n\nexport interface MinorKey extends Key {\n  readonly type: \"minor\";\n  readonly relativeMajor: string;\n  readonly natural: KeyScale;\n  readonly harmonic: KeyScale;\n  readonly melodic: KeyScale;\n}\n\nconst NoMinorKey: MinorKey = {\n  ...NoKey,\n  type: \"minor\",\n  relativeMajor: \"\",\n  natural: NoKeyScale,\n  harmonic: NoKeyScale,\n  melodic: NoKeyScale,\n};\n\nconst mapScaleToType = (scale: string[], list: string[], sep = \"\") =>\n  list.map((type, i) => `${scale[i]}${sep}${type}`);\n\nfunction keyScale(\n  grades: string[],\n  triads: string[],\n  chords: string[],\n  harmonicFunctions: string[],\n  chordScales: string[],\n) {\n  return (tonic: string): KeyScale => {\n    const intervals = grades.map((gr) => roman(gr).interval || \"\");\n    const scale = intervals.map((interval) => transpose(tonic, interval));\n\n    return {\n      tonic,\n      grades,\n      intervals,\n      scale,\n      triads: mapScaleToType(scale, triads),\n      chords: mapScaleToType(scale, chords),\n      chordsHarmonicFunction: harmonicFunctions.slice(),\n      chordScales: mapScaleToType(scale, chordScales, \" \"),\n    };\n  };\n}\n\nconst distInFifths = (from: string, to: string) => {\n  const f = note(from);\n  const t = note(to);\n  return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\n};\n\nconst MajorScale = keyScale(\n  \"I II III IV V VI VII\".split(\" \"),\n  \" m m   m dim\".split(\" \"),\n  \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"),\n  \"T SD T SD D T D\".split(\" \"),\n  \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"),\n);\nconst NaturalScale = keyScale(\n  \"I II bIII IV V bVI bVII\".split(\" \"),\n  \"m dim  m m  \".split(\" \"),\n  \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"),\n  \"T SD T SD D SD SD\".split(\" \"),\n  \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"),\n);\nconst HarmonicScale = keyScale(\n  \"I II bIII IV V bVI VII\".split(\" \"),\n  \"m dim aug m   dim\".split(\" \"),\n  \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"),\n  \"T SD T SD D SD D\".split(\" \"),\n  \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\n    \",\",\n  ),\n);\nconst MelodicScale = keyScale(\n  \"I II bIII IV V VI VII\".split(\" \"),\n  \"m m aug   dim dim\".split(\" \"),\n  \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"),\n  \"T SD T SD D  \".split(\" \"),\n  \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\n    \",\",\n  ),\n);\n\n/**\n * Get a major key properties in a given tonic\n * @param tonic\n */\nexport function majorKey(tonic: string): MajorKey {\n  const pc = note(tonic).pc;\n  if (!pc) return NoMajorKey;\n\n  const keyScale = MajorScale(pc);\n  const alteration = distInFifths(\"C\", pc);\n  const romanInTonic = (src: string) => {\n    const r = roman(src);\n    if (r.empty) return \"\";\n\n    return transpose(tonic, r.interval) + r.chordType;\n  };\n\n  return {\n    ...keyScale,\n    type: \"major\",\n    minorRelative: transpose(pc, \"-3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\n    secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n  };\n}\n\n/**\n * Get minor key properties in a given tonic\n * @param tonic\n */\nexport function minorKey(tnc: string): MinorKey {\n  const pc = note(tnc).pc;\n  if (!pc) return NoMinorKey;\n\n  const alteration = distInFifths(\"C\", pc) - 3;\n  return {\n    type: \"minor\",\n    tonic: pc,\n    relativeMajor: transpose(pc, \"3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    natural: NaturalScale(pc),\n    harmonic: HarmonicScale(pc),\n    melodic: MelodicScale(pc),\n  };\n}\n\n/**\n * Given a key signature, returns the tonic of the major key\n * @param sigature\n * @example\n * majorTonicFromKeySignature('###') // => 'A'\n */\nexport function majorTonicFromKeySignature(\n  sig: string | number,\n): string | null {\n  if (typeof sig === \"number\") {\n    return transposeFifths(\"C\", sig);\n  } else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\n    return transposeFifths(\"C\", accToAlt(sig));\n  }\n  return null;\n}\n\nexport default { majorKey, majorTonicFromKeySignature, minorKey };\n","import { assertNonNullable as NN, castToNumber } from \"../StdLib\";\nimport { NoteLiteral as _NoteLiteral } from \"tonal\";\nimport _Interval from \"@tonaljs/interval\";\nimport _Note from \"@tonaljs/note\";\nimport __Chord from \"@tonaljs/chord\";\nimport __Scale from \"@tonaljs/scale\";\n\n\nexport { Chord } from '@tonaljs/chord';\nexport { Scale } from '@tonaljs/scale';\nexport const _Chord = __Chord;\nexport const _Scale = __Scale;\nexport { default as _RomanNumeral } from \"@tonaljs/roman-numeral\";\nexport { default as _Note } from \"@tonaljs/note\";\nexport { default as _Interval } from \"@tonaljs/interval\";\nexport { default as _Key } from \"@tonaljs/key\";\nexport { ChordDictionary as _ChordDictionary } from \"tonal\";\n\nexport type Note = ReturnType<typeof _Note.get>\nexport type Interval = ReturnType<typeof _Interval.get>\nexport type ChordName = string;\nexport type ScaleName = string;\nexport type NoteLiteral = _NoteLiteral;\nexport const getIntervalDegree = (src: _NoteLiteral, dst: _NoteLiteral) => castToNumber(_Interval.distance(src, dst).slice(0, 1));\nexport const getChroma = (note: _NoteLiteral | null) => NN(_Note.chroma(NN(note)));","export const console_green = \"\\u001b[32m\";\nexport const console_reset = \"\\u001b[0m\";\n\nexport const _throw = <E extends Error>(e: E) => { throw e; };  // 文の式化\nexport const assertNotNull = <T>(value: T | null, error = new TypeError(\"null value received\")) => value !== null ? value : _throw(error);\nexport const assertNotUndefined = <T>(value: T | undefined, error = new TypeError(\"undefined value received\")) => value !== undefined ? value : _throw(error);\nexport const assertNonNullable = <T>(value: T | null | undefined) => assertNotNull(assertNotUndefined(value));\nexport const assertNotNaN = (value: number) => isNaN(value) ? _throw(new TypeError(\"NaN value received\")) : value;\nexport const castToNumber = (value: string) => assertNotNaN(Number(value));\n\nexport type recurrentArray<T> = T | recurrentArray<T>[];\nexport function Arraying<T>(e: recurrentArray<T>): T[] {\n  const concat = function (arr: recurrentArray<T>[]): T[] {\n    let res: T[] = [];\n    for (const e of arr) {\n      res = res.concat(Arraying(e));\n    }\n    return res;\n  };\n  return e instanceof Array ? concat(e) : [e];\n}\n\n// 引数には any が入る.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const hasSameValue = (o1: any, o2: any) => {\n  if (o1 === o2) { return true; } // same object\n  if (o1 == null) { return false; } // because the other is not null\n  if (o2 == null) { return false; } // because the other is not null\n  if (Object.keys(o1).length != Object.keys(o2).length) { return false; }\n  for (const key in o1) {\n    if (!(key in o2)) { return false; }\n    if (typeof o1[key] === \"object\") {\n      if (!hasSameValue(o1[key], o2[key])) { return false; } // deep check\n    } else if (o1[key] != o2[key]) { return false; }\n  }\n  return true;\n};\n\nexport class IdDictionary<Key extends keyof any> { // eslint-disable-line @typescript-eslint/no-explicit-any\n  #item2id: { [key: keyof any]: number } = {}; // eslint-disable-line @typescript-eslint/no-explicit-any\n  #id2item: Key[] = [];\n  get length() {\n    return this.#id2item.length;\n  }\n  register(item: Key) {\n    const id = this.#item2id[item];\n    if (id !== undefined) { return id; }\n    else {\n      const i = this.#id2item.length;\n      this.#item2id[item] = i;\n      this.#id2item[i] = item;\n      return i;\n    }\n  }\n  getId(item: Key) { return assertNotUndefined(this.#item2id[item], new ReferenceError(`key ${String(item)} not found`)); }\n  getItem(id: number) { return assertNotUndefined(this.#id2item[id], new ReferenceError(`id ${String(id)} not found`)); }\n  showAll() { return this.#id2item; }\n}\n\n// エラーを期待するテストのための, 予想外のエラーを受け取った時のエラー\nexport class UnexpectedErrorThrownError extends Error { constructor(message = \"\") { super(message); } }\nexport class NotImplementedError extends Error { constructor(message = \"\") { super(message); } }\n\nexport class Assertion {\n  #assertion: boolean;\n  constructor(assertion: boolean) {\n    this.#assertion = assertion;\n  }\n  onFailed(errorExecution: () => void) { this.#assertion || errorExecution(); }\n}\n\n","import { hasSameValue } from \"../StdLib\";\n\nexport const not = (b: boolean): boolean => !b;\nexport const getRange = (begin: number, end: number, step = 1): number[] => [...Array(Math.abs(end - begin))].map((_, i) => i * step + begin);\nexport const getZeros = (length: number): number[] => [...Array(length)].map(e => 0); // eslint-disable-line @typescript-eslint/no-unused-vars\nexport const vFunc = (\n  a: number[],\n  b: number | number[],\n  f: (a: number, b: number) => number,\n) => {\n  if (typeof b == \"number\") { return a.map(e => f(e, Number(b))); }\n  if (b instanceof Array) { return a.map((_, i) => f(a[i], b[i])); }\n  throw TypeError(\"arguments of vFunc must be (a:number[], b:number, f:(a:number,b:number)=>number\",);\n};\n\nexport const genArr = (n: number, f: (i: number) => number) => [...Array(n)].map((_, i) => f(i));\nexport const matTrans = (matrix: number[][]) => getRange(0, matrix[0].length).map(i => getRange(0, matrix.length).map(j => matrix[j][i]),);\nexport const forAll = <T>(set: T[], condition: (element: T) => boolean) => {\n  for (const e of set) {\n    if (condition(e) == false) { return false; }\n  }\n  return true;\n};\nexport const forSome = <T>(set: T[], condition: (element: T) => boolean) => {\n  for (const e of set) {\n    if (condition(e)) { return true; }\n  }\n  return false;\n};\nexport const isSubSet = <T>(set: T[], superset: T[]) => forAll(set, e => superset.includes(e));\nexport const isSuperSet = <T>(set: T[], subset: T[]) => isSubSet(subset, set);\nexport const sameArray = <T>(arr1: T[], arr2: T[]) => hasSameValue(arr1, arr2);\n\n/** @brief avoid bug from negative value */\nexport const mod = (n: number, m: number): number => (n % m + m) % m;\nexport const decimal = (n: number) => n - Math.floor(n);\nexport const bool2number = (b: boolean) => b ? 1 : 0;\nexport const removeFromArray = <T>(array: T[], rmv: T[]) => array.filter(e => not(rmv.includes(e)));\nexport const ringShift = <T>(array: T[], b: number) => {\n  const N = array.length;\n  const bm = mod(b, N);\n  return array.concat(array).slice(N - bm, 2 * N - bm);\n};\nexport const vAdd = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => a + b);\nexport const vSub = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => a - b);\nexport const vMul = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => a * b);\nexport const vDiv = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => a / b);\nexport const vMod = (vector1: number[], vector2: number | number[]) => vFunc(vector1, vector2, (a, b) => mod(a, b));\nexport const vGet = <T>(array: T[], indexes: number[]) => indexes.map(e => array[e]);\nexport const max = (array: number[]) => array.reduce((p, c) => Math.max(p, c));\nexport const min = (array: number[]) => array.reduce((p, c) => Math.min(p, c));\nexport const argmax = (array: number[]) => array.map((e, i) => [e, i]).reduce((p, c) => c[0] >= p[0] ? c : p)[1];\nexport const argmin = (array: number[]) => array.map((e, i) => [e, i]).reduce((p, c) => c[0] <= p[0] ? c : p)[1];\n\nexport const getOnehot = (positionOfOnes: number[], n = 0) => [...Array(Math.max(Math.max(...positionOfOnes) + 1, n))].map((_, i) => bool2number(positionOfOnes.includes(i)),);\nexport const getOnehotInMod = (positionOfOnes: number[] | number, m = 1) => {\n  if (typeof positionOfOnes === \"number\") { return getOnehot(vMod([positionOfOnes], m), m); }\n  return getOnehot(vMod(positionOfOnes, m), m);\n};\n\nexport const vSum = (...arrays: number[][]) => arrays.reduce((p, c) => vAdd(p, c));\nexport const totalSum = (array: number[]) => array.reduce((p, c) => p + c);\nexport const totalProd = (array: number[]) => array.reduce((p, c) => p * c);\n\nexport const complex = {\n  multiply: (c1: number[], c2: number[]) => [c1[0] * c2[0] - c1[1] * c2[1], c1[0] * c2[1] + c1[1] * c2[0]],\n  add: (c1: number[], c2: number[]) => [c1[0] + c2[0], c1[1] + c2[1]],\n  subtract: (c1: number[], c2: number[]) => [c1[0] - c2[0], c1[1] - c2[1]]\n};\nexport class fftUtil {\n  private static readonly cache: { [index: number]: number[][] } = {};\n  static exponent(k: number, N: number) {\n    const x = -2 * Math.PI * (k / N);\n    this.cache[N] ||= [];\n    this.cache[N][k] ||= [Math.cos(x), Math.sin(x)];\n    return this.cache[N][k];\n  }\n};\n\ntype RealOrComplex = number | number[]\n// real number fft\n// thanks for fft-js\nexport const fft = (seq: (RealOrComplex)[]): number[][] => {\n  const N = Math.pow(2, Math.ceil(Math.log2(seq.length)));\n  if (N !== seq.length) {\n    const zero = Array.isArray(seq[0]) ? [0, 0] : 0;\n    seq = [...Array(N)].map((_, i) => i < seq.length ? seq[i] : zero);\n  }\n  const res: number[][] = [];\n\n  // expected real number\n  if (N == 1) {\n    if (Array.isArray(seq[0])) { return [[seq[0][0], seq[0][1]]]; }\n    else { return [[seq[0], 0]]; }\n  }\n\n  const X_evens = fft(seq.filter((_, i) => i % 2 === 0));\n  const X_odds = fft(seq.filter((_, i) => i % 2 == 1));\n\n  for (let k = 0; k < N / 2; k++) {\n    const t = X_evens[k];\n    const e = complex.multiply(fftUtil.exponent(k, N), X_odds[k]);\n    res[k] = complex.add(t, e);\n    res[k + N / 2] = complex.subtract(t, e);\n  }\n  return res;\n};\n\nexport const ifft = (seq: number[][]): number[][] => {\n  const ps = fft(seq.map(e => [e[1], e[0]]));\n  return ps.map(e => [e[1] / ps.length, e[0] / ps.length]);\n};\n\nexport const convolution = (seq1: RealOrComplex[], seq2: RealOrComplex[]) => {\n  const f_seq1 = fft(seq1);\n  const f_seq2 = fft(seq2);\n  const mul = f_seq1.map((e, i) => complex.multiply(e, f_seq2[i]));\n  return ifft(mul);\n};\n\nexport const correlation = (seq1: RealOrComplex[], seq2: RealOrComplex[]) => convolution(seq1, seq2.reverse());\n","import { mod } from \"../Math\";\n\n// 0 <= h < 360; 0 <= s <= 1; 0 <= b <= 1\n// h |-> [red, yellow, green, cyan, blue, magenta]\nexport const hsv2rgb = (h: number, s: number, v: number) => {\n  const H = mod(h, 360) / 60;\n  const x = s * Math.abs(mod(H + 1, 2) - 1);\n  const rgb = [[s, x, 0], [x, s, 0], [0, s, x], [0, x, s], [x, 0, s], [s, 0, x]][Math.floor(H)];\n  return rgb.map(e => Math.floor((e + 1 - s) * v * 255));\n};\n\nexport const rgbToString = (rgb: number[]) => '#' + rgb.map(e => ('0' + e.toString(16)).slice(-2)).join('');\n","export interface NamedPitch {\n  readonly name: string;\n}\n\n/*** @deprecated use NamedPitch */\nexport interface Named {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\" &&\n    !isNaN(pitch.step) &&\n    !isNaN(pitch.alt)\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n","import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nconst NoInterval: Interval = Object.freeze({\n  empty: true,\n  name: \"\",\n  num: NaN,\n  q: \"\" as Quality,\n  type: \"\" as Type,\n  step: NaN,\n  alt: NaN,\n  dir: NaN as Direction,\n  simple: NaN,\n  semitones: NaN,\n  chroma: NaN,\n  coord: [] as unknown as IntervalCoordinates,\n  oct: NaN,\n});\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n","import {\n  coordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type NoteWithOctave = string;\nexport type PcName = string;\nexport type NoteName = NoteWithOctave | PcName;\nexport type NoteLiteral = NoteName | Pitch | NamedPitch;\n\nexport interface Note extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: NoteName;\n  readonly letter: string;\n  readonly acc: string;\n  readonly pc: PcName;\n  readonly chroma: number;\n  readonly height: number;\n  readonly coord: PitchCoordinates;\n  readonly midi: number | null;\n  readonly freq: number | null;\n}\n\nconst NoNote: Note = Object.freeze({\n  empty: true,\n  name: \"\",\n  letter: \"\",\n  acc: \"\",\n  pc: \"\",\n  step: NaN,\n  alt: NaN,\n  chroma: NaN,\n  height: NaN,\n  coord: [] as unknown as PitchCoordinates,\n  midi: null,\n  freq: null,\n});\n\nconst cache: Map<NoteLiteral | undefined, Note> = new Map();\n\nexport const stepToLetter = (step: number) => \"CDEFGAB\".charAt(step);\nexport const altToAcc = (alt: number): string =>\n  alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\nexport const accToAlt = (acc: string): number =>\n  acc[0] === \"b\" ? -acc.length : acc.length;\n\n/**\n * Given a note literal (a note name or a note object), returns the Note object\n * @example\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport function note(src: NoteLiteral): Note {\n  const stringSrc = JSON.stringify(src);\n\n  const cached = cache.get(stringSrc);\n  if (cached) {\n    return cached;\n  }\n\n  const value =\n    typeof src === \"string\"\n      ? parse(src)\n      : isPitch(src)\n        ? note(pitchName(src))\n        : isNamedPitch(src)\n          ? note(src.name)\n          : NoNote;\n  cache.set(stringSrc, value);\n  return value;\n}\n\ntype NoteTokens = [string, string, string, string];\n\nconst REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * @private\n */\nexport function tokenizeNote(str: string): NoteTokens {\n  const m = REGEX.exec(str) as string[];\n  return m\n    ? [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]]\n    : [\"\", \"\", \"\", \"\"];\n}\n\n/**\n * @private\n */\nexport function coordToNote(noteCoord: PitchCoordinates): Note {\n  return note(pitch(noteCoord)) as Note;\n}\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\nfunction parse(noteName: NoteName): Note {\n  const tokens = tokenizeNote(noteName);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\n    return NoNote;\n  }\n\n  const letter = tokens[0];\n  const acc = tokens[1];\n  const octStr = tokens[2];\n\n  const step = (letter.charCodeAt(0) + 3) % 7;\n  const alt = accToAlt(acc);\n  const oct = octStr.length ? +octStr : undefined;\n  const coord = coordinates({ step, alt, oct });\n\n  const name = letter + acc + octStr;\n  const pc = letter + acc;\n  const chroma = (SEMI[step] + alt + 120) % 12;\n  const height =\n    oct === undefined\n      ? mod(SEMI[step] + alt, 12) - 12 * 99\n      : SEMI[step] + alt + 12 * (oct + 1);\n  const midi = height >= 0 && height <= 127 ? height : null;\n  const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\n\n  return {\n    empty: false,\n    acc,\n    alt,\n    chroma,\n    coord,\n    freq,\n    height,\n    letter,\n    midi,\n    name,\n    oct,\n    pc,\n    step,\n  };\n}\n\nfunction pitchName(props: Pitch): NoteName {\n  const { step, alt, oct } = props;\n  const letter = stepToLetter(step);\n  if (!letter) {\n    return \"\";\n  }\n\n  const pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n","import { PitchCoordinates } from \"@tonaljs/pitch\";\nimport {\n  IntervalLiteral,\n  IntervalName,\n  interval as asInterval,\n  coordToInterval,\n} from \"@tonaljs/pitch-interval\";\nimport {\n  NoteLiteral,\n  NoteName,\n  note as asNote,\n  coordToNote,\n} from \"@tonaljs/pitch-note\";\n\n/**\n * Transpose a note by an interval.\n *\n * @param {string} note - the note or note name\n * @param {string} interval - the interval or interval name\n * @return {string} the transposed note name or empty string if not valid notes\n * @example\n * import { transpose } from \"@tonaljs/core\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * transpose(\"D\", \"3M\") // => \"F#\"\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(\n  noteName: NoteLiteral,\n  intervalName: IntervalLiteral | [number, number],\n): NoteName {\n  const note = asNote(noteName);\n  const intervalCoord = Array.isArray(intervalName)\n    ? intervalName\n    : asInterval(intervalName).coord;\n  if (note.empty || !intervalCoord || intervalCoord.length < 2) {\n    return \"\";\n  }\n  const noteCoord = note.coord;\n  const tr: PitchCoordinates =\n    noteCoord.length === 1\n      ? [noteCoord[0] + intervalCoord[0]]\n      : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\n  return coordToNote(tr).name;\n}\n\n// Private\nexport function tonicIntervalsTransposer(\n  intervals: string[],\n  tonic: string | undefined | null,\n) {\n  const len = intervals.length;\n  return (normalized: number) => {\n    if (!tonic) return \"\";\n    const index =\n      normalized < 0 ? (len - (-normalized % len)) % len : normalized % len;\n    const octaves = Math.floor(normalized / len);\n    const root = transpose(tonic, [0, octaves]);\n    return transpose(root, intervals[index]);\n  };\n}\n\n/**\n * Find the interval distance between two notes or coord classes.\n *\n * To find distance between coord classes, both notes must be coord classes and\n * the interval is always ascending\n *\n * @param {Note|string} from - the note or note name to calculate distance from\n * @param {Note|string} to - the note or note name to calculate distance to\n * @return {string} the interval name or empty string if not valid notes\n *\n */\nexport function distance(\n  fromNote: NoteLiteral,\n  toNote: NoteLiteral,\n): IntervalName {\n  const from = asNote(fromNote);\n  const to = asNote(toNote);\n  if (from.empty || to.empty) {\n    return \"\";\n  }\n\n  const fcoord = from.coord;\n  const tcoord = to.coord;\n  const fifths = tcoord[0] - fcoord[0];\n  const octs =\n    fcoord.length === 2 && tcoord.length === 2\n      ? tcoord[1] - fcoord[1]\n      : -Math.floor((fifths * 7) / 12);\n\n  // If it's unison and not pitch class, it can be descending interval (#243)\n  const forceDescending =\n    to.height === from.height &&\n    to.midi !== null &&\n    from.midi !== null &&\n    from.step > to.step;\n  return coordToInterval([fifths, octs], forceDescending).name;\n}\n","import { isNamedPitch } from \"@tonaljs/pitch\";\n\nexport * from \"@tonaljs/pitch\";\nexport * from \"@tonaljs/pitch-distance\";\nexport * from \"@tonaljs/pitch-interval\";\nexport * from \"@tonaljs/pitch-note\";\n\nexport const fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport function deprecate<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ResultFn extends (this: any, ...newArgs: any[]) => ReturnType<ResultFn>,\n>(original: string, alternative: string, fn: ResultFn) {\n  return function (this: unknown, ...args: unknown[]): ReturnType<ResultFn> {\n    // tslint:disable-next-line\n    console.warn(`${original} is deprecated. Use ${alternative}.`);\n    return fn.apply(this, args);\n  };\n}\n\nexport const isNamed = deprecate(\"isNamed\", \"isNamedPitch\", isNamedPitch);\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// ascending range\nfunction ascR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Creates a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\n * range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(from: number, to: number): number[] {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n\n/**\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} collection\n * @return {Array} the rotated collection\n *\n * @example\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate<T>(times: number, arr: T[]): T[] {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the collection with the null values removed\n * @function\n * @param {Array} collection\n * @return {Array}\n *\n * @example\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr: any[]): any[] {\n  return arr.filter((n) => n === 0 || n);\n}\n\n/**\n * Randomizes the order of the specified collection in-place, using the Fisher–Yates shuffle.\n *\n * @function\n * @param {Array} collection\n * @return {Array} the collection shuffled\n *\n * @example\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr: any[], rnd = Math.random): any[] {\n  let i: number;\n  let t: any;\n  let m: number = arr.length;\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an collection\n *\n * @param {Array} collection - the collection\n * @return {Array<Array>} an collection with all the permutations\n * @example\n * permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n */\nexport function permutations(arr: any[]): any[] {\n  if (arr.length === 0) {\n    return [[]];\n  }\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(\n      arr.map((e, pos) => {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      }),\n    );\n  }, []);\n}\n\nexport default {\n  compact,\n  permutations,\n  range,\n  rotate,\n  shuffle,\n};\n","import { compact, range, rotate } from \"@tonaljs/collection\";\nimport {\n  Interval,\n  IntervalName,\n  NotFound,\n  Note,\n  NoteName,\n  deprecate,\n  interval,\n  note,\n  transpose,\n} from \"@tonaljs/core\";\n\n/**\n * The properties of a pitch class set\n * @param {number} num - a number between 1 and 4095 (both included) that\n * uniquely identifies the set. It's the decimal number of the chrom.\n * @param {string} chroma - a string representation of the set: a 12-char string\n * with either \"1\" or \"0\" as characters, representing a pitch class or not\n * for the given position in the octave. For example, a \"1\" at index 0 means 'C',\n * a \"1\" at index 2 means 'D', and so on...\n * @param {string} normalized - the chroma but shifted to the first 1\n * @param {number} length - the number of notes of the pitch class set\n * @param {IntervalName[]} intervals - the intervals of the pitch class set\n * *starting from C*\n */\nexport interface Pcset {\n  readonly name: string;\n  readonly empty: boolean;\n  readonly setNum: number;\n  readonly chroma: PcsetChroma;\n  readonly normalized: PcsetChroma;\n  readonly intervals: IntervalName[];\n}\n\nexport const EmptyPcset: Pcset = {\n  empty: true,\n  name: \"\",\n  setNum: 0,\n  chroma: \"000000000000\",\n  normalized: \"000000000000\",\n  intervals: [],\n};\n\nexport type PcsetChroma = string;\nexport type PcsetNum = number;\n\n// UTILITIES\nconst setNumToChroma = (num: number): string =>\n  Number(num).toString(2).padStart(12, \"0\");\nconst chromaToNumber = (chroma: string): number => parseInt(chroma, 2);\nconst REGEX = /^[01]{12}$/;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isChroma(set: any): set is PcsetChroma {\n  return REGEX.test(set);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPcsetNum = (set: any): set is PcsetNum =>\n  typeof set === \"number\" && set >= 0 && set <= 4095;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPcset = (set: any): set is Pcset => set && isChroma(set.chroma);\n\nconst cache: { [key in string]: Pcset } = { [EmptyPcset.chroma]: EmptyPcset };\n\n/**\n * A definition of a pitch class set. It could be:\n * - The pitch class set chroma (a 12-length string with only 1s or 0s)\n * - The pitch class set number (an integer between 1 and 4095)\n * - An array of note names\n * - An array of interval names\n */\nexport type Set =\n  | Partial<Pcset>\n  | PcsetChroma\n  | PcsetNum\n  | NoteName[]\n  | IntervalName[];\n\n/**\n * Get the pitch class set of a collection of notes or set number or chroma\n */\nexport function get(src: Set): Pcset {\n  const chroma: PcsetChroma = isChroma(src)\n    ? src\n    : isPcsetNum(src)\n      ? setNumToChroma(src)\n      : Array.isArray(src)\n        ? listToChroma(src)\n        : isPcset(src)\n          ? src.chroma\n          : EmptyPcset.chroma;\n\n  return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\n}\n\n/**\n * Use Pcset.properties\n * @function\n * @deprecated\n */\nexport const pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\n\n/**\n * Get pitch class set chroma\n * @function\n * @example\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\n */\nexport const chroma = (set: Set) => get(set).chroma;\n\n/**\n * Get intervals (from C) of a set\n * @function\n * @example\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\n */\nconst intervals = (set: Set) => get(set).intervals;\n\n/**\n * Get pitch class set number\n * @function\n * @example\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\n */\nconst num = (set: Set) => get(set).setNum;\n\nconst IVLS = [\n  \"1P\",\n  \"2m\",\n  \"2M\",\n  \"3m\",\n  \"3M\",\n  \"4P\",\n  \"5d\",\n  \"5P\",\n  \"6m\",\n  \"6M\",\n  \"7m\",\n  \"7M\",\n];\n\n/**\n * @private\n * Get the intervals of a pcset *starting from C*\n * @param {Set} set - the pitch class set\n * @return {IntervalName[]} an array of interval names or an empty array\n * if not a valid pitch class set\n */\nexport function chromaToIntervals(chroma: PcsetChroma): IntervalName[] {\n  const intervals = [];\n  for (let i = 0; i < 12; i++) {\n    // tslint:disable-next-line:curly\n    if (chroma.charAt(i) === \"1\") intervals.push(IVLS[i]);\n  }\n  return intervals;\n}\n\nexport function notes(set: Set): NoteName[] {\n  return get(set).intervals.map((ivl) => transpose(\"C\", ivl));\n}\n\n/**\n * Get a list of all possible pitch class sets (all possible chromas) *having\n * C as root*. There are 2048 different chromas. If you want them with another\n * note you have to transpose it\n *\n * @see http://allthescales.org/\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\n */\nexport function chromas(): PcsetChroma[] {\n  return range(2048, 4095).map(setNumToChroma);\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|string} set - the list of notes or pitchChr of the set\n * @param {boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<string>} an array with all the modes of the chroma\n *\n * @example\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\n */\nexport function modes(set: Set, normalize = true): PcsetChroma[] {\n  const pcs = get(set);\n\n  const binary = pcs.chroma.split(\"\");\n  return compact(\n    binary.map((_, i) => {\n      const r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    }),\n  );\n}\n\n/**\n * Test if two pitch class sets are numentical\n *\n * @param {Array|string} set1 - one of the pitch class sets\n * @param {Array|string} set2 - the other pitch class set\n * @return {boolean} true if they are equal\n * @example\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1: Set, s2: Set) {\n  return get(s1).setNum === get(s2).setNum;\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function is curryfied.\n *\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\n * list of notes)\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\n * to test against (chroma or list of notes)\n * @example\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set: Set) {\n  const s = get(set).setNum;\n\n  return (notes: Set | Pcset) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o & s) === o;\n  };\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Set} set - an array of notes or a chroma set string to test against\n * @return {(subset: Set): boolean} a function that given a set\n * returns true if is a subset of the first one\n * @example\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set: Set) {\n  const s = get(set).setNum;\n  return (notes: Set) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o | s) === o;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n *\n * @param {Array<string>} set - the base set to test against\n * @param {string} note - the note to test\n * @return {boolean} true if the note is included in the pcset\n *\n * Can be partially applied\n *\n * @example\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\n * isNoteInCMajor('C4') // => true\n * isNoteInCMajor('C#4') // => false\n */\nexport function isNoteIncludedIn(set: Set) {\n  const s = get(set);\n\n  return (noteName: NoteName): boolean => {\n    const n = note(noteName);\n    return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\n  };\n}\n\n/** @deprecated use: isNoteIncludedIn */\nexport const includes = isNoteIncludedIn;\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|string} set - the pitch class set notes\n * @param {Array|string} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set: Set) {\n  const isIncluded = isNoteIncludedIn(set);\n  return (notes: NoteName[]) => {\n    return notes.filter(isIncluded);\n  };\n}\n\nexport default {\n  get,\n  chroma,\n  num,\n  intervals,\n  chromas,\n  isSupersetOf,\n  isSubsetOf,\n  isNoteIncludedIn,\n  isEqual,\n  filter,\n  modes,\n  notes,\n  // deprecated\n  pcset,\n};\n\n//// PRIVATE ////\n\nfunction chromaRotations(chroma: string): string[] {\n  const binary = chroma.split(\"\");\n  return binary.map((_, i) => rotate(i, binary).join(\"\"));\n}\n\nfunction chromaToPcset(chroma: PcsetChroma): Pcset {\n  const setNum = chromaToNumber(chroma);\n  const normalizedNum = chromaRotations(chroma)\n    .map(chromaToNumber)\n    .filter((n) => n >= 2048)\n    .sort()[0];\n  const normalized = setNumToChroma(normalizedNum);\n\n  const intervals = chromaToIntervals(chroma);\n\n  return {\n    empty: false,\n    name: \"\",\n    setNum,\n    chroma,\n    normalized,\n    intervals,\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction listToChroma(set: any[]): PcsetChroma {\n  if (set.length === 0) {\n    return EmptyPcset.chroma;\n  }\n\n  let pitch: Note | Interval | NotFound;\n  const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < set.length; i++) {\n    pitch = note(set[i]);\n    // tslint:disable-next-line: curly\n    if (pitch.empty) pitch = interval(set[i]);\n    // tslint:disable-next-line: curly\n    if (!pitch.empty) binary[pitch.chroma] = 1;\n  }\n  return binary.join(\"\");\n}\n","import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\nexport type ChordQuality =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  | \"Unknown\";\n\nexport interface ChordType extends Pcset {\n  name: string;\n  quality: ChordQuality;\n  aliases: string[];\n}\nconst NoChordType: ChordType = {\n  ...EmptyPcset,\n  name: \"\",\n  quality: \"Unknown\",\n  intervals: [],\n  aliases: [],\n};\n\ntype ChordTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ChordType[] = [];\nlet index: Record<ChordTypeName, ChordType> = {};\n\n/**\n * Given a chord name or chroma, return the chord properties\n * @param {string} source - chord name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/chord-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ChordTypeName): ChordType {\n  return index[type] || NoChordType;\n}\n\nexport const chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\n\n/**\n * Get all chord (long) names\n */\nexport function names() {\n  return dictionary.map((chord) => chord.name).filter((x) => x);\n}\n\n/**\n * Get all chord symbols\n */\nexport function symbols() {\n  return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\n}\n\n/**\n * Keys used to reference chord types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Return a list of all chord types\n */\nexport function all(): ChordType[] {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a chord to the dictionary.\n * @param intervals\n * @param aliases\n * @param [fullName]\n */\nexport function add(intervals: string[], aliases: string[], fullName?: string) {\n  const quality = getQuality(intervals);\n  const chord = {\n    ...pcset(intervals),\n    name: fullName || \"\",\n    quality,\n    intervals,\n    aliases,\n  };\n  dictionary.push(chord);\n  if (chord.name) {\n    index[chord.name] = chord;\n  }\n  index[chord.setNum] = chord;\n  index[chord.chroma] = chord;\n  chord.aliases.forEach((alias) => addAlias(chord, alias));\n}\n\nexport function addAlias(chord: ChordType, alias: string) {\n  index[alias] = chord;\n}\n\nfunction getQuality(intervals: string[]): ChordQuality {\n  const has = (interval: string) => intervals.indexOf(interval) !== -1;\n  return has(\"5A\")\n    ? \"Augmented\"\n    : has(\"3M\")\n      ? \"Major\"\n      : has(\"5d\")\n        ? \"Diminished\"\n        : has(\"3m\")\n          ? \"Minor\"\n          : \"Unknown\";\n}\n\ndata.forEach(([ivls, fullName, names]: string[]) =>\n  add(ivls.split(\" \"), names.split(\" \"), fullName),\n);\ndictionary.sort((a, b) => a.setNum - b.setNum);\n\nexport default {\n  names,\n  symbols,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n  // deprecated\n  entries,\n  chordType,\n};\n","/**\n * @private\n * Chord List\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\n */\nconst CHORDS: string[][] = [\n  // ==Major==\n  [\"1P 3M 5P\", \"major\", \"M ^  maj\"],\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7 ^7\"],\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9 ^9\"],\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\n  [\"1P 3M 5P 6M 9M\", \"sixth added ninth\", \"6add9 6/9 69 M69\"],\n  [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\n  [\n    \"1P 3M 5P 7M 11A\",\n    \"major seventh sharp eleventh\",\n    \"maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11\",\n  ],\n  // ==Minor==\n  // '''Normal'''\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\n  [\n    \"1P 3m 5P 7M\",\n    \"minor/major seventh\",\n    \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7 -maj7\",\n  ],\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\n  [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\n  // '''Diminished'''\n  [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø -7b5 h7 h\"],\n  // ==Dominant/Seventh==\n  // '''Normal'''\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\n  // '''Altered'''\n  [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\n  // '''Suspended'''\n  [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\n  [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\n  [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\n  [\n    \"1P 4P 5P 7m 9m\",\n    \"suspended fourth flat ninth\",\n    \"b9sus phryg 7b9sus 7b9sus4\",\n  ],\n  // ==Other==\n  [\"1P 5P\", \"fifth\", \"5\"],\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\n  [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\n  [\n    \"1P 3M 5P 7M 9M 11A\",\n    \"major sharp eleventh (lydian)\",\n    \"maj9#11 Δ9#11 ^9#11\",\n  ],\n  // ==Legacy==\n  [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\n  [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\n  [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\n  [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\n  [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\n  [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\n  [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\n  [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\n  [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\n  [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\n  [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\n  [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\n  [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\n  [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\n  [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\n  [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\n  [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\n  [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\n  [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\n  [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\n  [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\n  [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\n  [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\n  [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\n  [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\n  [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\n  [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\n  [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\n  [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\n  [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\n  [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\n  [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\n  [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\n  [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\n  [\"1P 3M 5d\", \"\", \"Mb5\"],\n  [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\n  [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\n  [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\n  [\"1P 3M 5d 7m\", \"\", \"7b5\"],\n  [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\n  [\"1P 3M 7m\", \"\", \"7no5\"],\n  [\"1P 3M 7m 13m\", \"\", \"7b13\"],\n  [\"1P 3M 7m 9M\", \"\", \"9no5\"],\n  [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\n  [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\n  [\"1P 3m 4P 5P\", \"\", \"madd4\"],\n  [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\n  [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\n  [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\n  [\"1P 3m 5P 9M\", \"\", \"madd9\"],\n  [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\n  [\"1P 3m 5d 7M\", \"\", \"oM7\"],\n  [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\n  [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\n  [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\n  [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\n  [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\n  [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\n  [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\n  [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\n  [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\n  [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\n  [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\n  [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\n  [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\n  [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\n  [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\n  [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\n];\n\nexport default CHORDS;\n","import { all, ChordType } from \"@tonaljs/chord-type\";\nimport { note } from \"@tonaljs/core\";\nimport { modes } from \"@tonaljs/pcset\";\n\ninterface FoundChord {\n  readonly weight: number;\n  readonly name: string;\n}\n\nconst namedSet = (notes: string[]) => {\n  const pcToName = notes.reduce<Record<number, string>>((record, n) => {\n    const chroma = note(n).chroma;\n    if (chroma !== undefined) {\n      record[chroma] = record[chroma] || note(n).name;\n    }\n    return record;\n  }, {});\n\n  return (chroma: number) => pcToName[chroma];\n};\n\ntype DetectOptions = {\n  assumePerfectFifth: boolean;\n};\nexport function detect(\n  source: string[],\n  options: Partial<DetectOptions> = {},\n): string[] {\n  const notes = source.map((n) => note(n).pc).filter((x) => x);\n  if (note.length === 0) {\n    return [];\n  }\n\n  const found: FoundChord[] = findMatches(notes, 1, options);\n\n  return found\n    .filter((chord) => chord.weight)\n    .sort((a, b) => b.weight - a.weight)\n    .map((chord) => chord.name);\n}\n\n/* tslint:disable:no-bitwise */\nconst BITMASK = {\n  // 3m 000100000000\n  // 3M 000010000000\n  anyThirds: 384,\n  // 5P 000000010000\n  perfectFifth: 16,\n  // 5d 000000100000\n  // 5A 000000001000\n  nonPerfectFifths: 40,\n  anySeventh: 3,\n};\n\nconst testChromaNumber = (bitmask: number) => (chromaNumber: number) =>\n  Boolean(chromaNumber & bitmask);\nconst hasAnyThird = testChromaNumber(BITMASK.anyThirds);\nconst hasPerfectFifth = testChromaNumber(BITMASK.perfectFifth);\nconst hasAnySeventh = testChromaNumber(BITMASK.anySeventh);\nconst hasNonPerfectFifth = testChromaNumber(BITMASK.nonPerfectFifths);\n\nfunction hasAnyThirdAndPerfectFifthAndAnySeventh(chordType: ChordType) {\n  const chromaNumber = parseInt(chordType.chroma, 2);\n  return (\n    hasAnyThird(chromaNumber) &&\n    hasPerfectFifth(chromaNumber) &&\n    hasAnySeventh(chromaNumber)\n  );\n}\n\nfunction withPerfectFifth(chroma: string): string {\n  const chromaNumber = parseInt(chroma, 2);\n  return hasNonPerfectFifth(chromaNumber)\n    ? chroma\n    : (chromaNumber | 16).toString(2);\n}\n\n/* tslint:enable:no-bitwise */\n\ntype FindMatchesOptions = {\n  assumePerfectFifth: boolean;\n};\nfunction findMatches(\n  notes: string[],\n  weight: number,\n  options: Partial<FindMatchesOptions>,\n): FoundChord[] {\n  const tonic = notes[0];\n  const tonicChroma = note(tonic).chroma;\n  const noteName = namedSet(notes);\n  // we need to test all chromas to get the correct baseNote\n  const allModes = modes(notes, false);\n\n  const found: FoundChord[] = [];\n  allModes.forEach((mode, index) => {\n    const modeWithPerfectFifth =\n      options.assumePerfectFifth && withPerfectFifth(mode);\n    // some chords could have the same chroma but different interval spelling\n    const chordTypes = all().filter((chordType) => {\n      if (\n        options.assumePerfectFifth &&\n        hasAnyThirdAndPerfectFifthAndAnySeventh(chordType)\n      ) {\n        return chordType.chroma === modeWithPerfectFifth;\n      }\n      return chordType.chroma === mode;\n    });\n\n    chordTypes.forEach((chordType) => {\n      const chordName = chordType.aliases[0];\n      const baseNote = noteName(index);\n      const isInversion = index !== tonicChroma;\n      if (isInversion) {\n        found.push({\n          weight: 0.5 * weight,\n          name: `${baseNote}${chordName}/${tonic}`,\n        });\n      } else {\n        found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\n      }\n    });\n  });\n\n  return found;\n}\n\nexport default { detect };\n","import { IntervalCoordinates, NoteCoordinates } from \"@tonaljs/pitch\";\nimport { distance as dist } from \"@tonaljs/pitch-distance\";\nimport {\n  IntervalName,\n  coordToInterval,\n  interval as props,\n} from \"@tonaljs/pitch-interval\";\n\n/**\n * Get the natural list of names\n */\nexport function names(): IntervalName[] {\n  return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\n}\n\n/**\n * Get properties of an interval\n *\n * @function\n * @example\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\n */\nexport const get = props;\n\n/**\n * Get name of an interval\n *\n * @function\n * @example\n * Interval.name('4P') // => \"4P\"\n * Interval.name('P4') // => \"4P\"\n * Interval.name('C4') // => \"\"\n */\nexport const name = (name: string) => props(name).name;\n\n/**\n * Get semitones of an interval\n * @function\n * @example\n * Interval.semitones('P4') // => 5\n */\nexport const semitones = (name: string) => props(name).semitones;\n\n/**\n * Get quality of an interval\n * @function\n * @example\n * Interval.quality('P4') // => \"P\"\n */\nexport const quality = (name: string) => props(name).q;\n\n/**\n * Get number of an interval\n * @function\n * @example\n * Interval.num('P4') // => 4\n */\nexport const num = (name: string) => props(name).num;\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {string} interval - the interval to simplify\n * @return {string} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n */\nexport function simplify(name: IntervalName): IntervalName {\n  const i = props(name);\n  return i.empty ? \"\" : i.simple + i.q;\n}\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {string} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {string} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport function invert(name: IntervalName): IntervalName {\n  const i = props(name);\n  if (i.empty) {\n    return \"\";\n  }\n  const step = (7 - i.step) % 7;\n  const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\n  return props({ step, alt, oct: i.oct, dir: i.dir }).name;\n}\n\n// interval numbers\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitrary, but deterministic.\n *\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {string} the interval name\n * @example\n * Interval.fromSemitones(7) // => \"5P\"\n * Interval.fromSemitones(-7) // => \"-5P\"\n */\nexport function fromSemitones(semitones: number): IntervalName {\n  const d = semitones < 0 ? -1 : 1;\n  const n = Math.abs(semitones);\n  const c = n % 12;\n  const o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n}\n\n/**\n * Find interval between two notes\n *\n * @example\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\n */\nexport const distance = dist;\n\n/**\n * Adds two intervals\n *\n * @function\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the added interval name\n * @example\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\n */\nexport const add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\n\n/**\n * Returns a function that adds an interval\n *\n * @function\n * @example\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\n */\nexport const addTo = (interval: string) => (other: string) =>\n  add(interval, other);\n\n/**\n * Subtracts two intervals\n *\n * @function\n * @param {string} minuendInterval\n * @param {string} subtrahendInterval\n * @return {string} the subtracted interval name\n * @example\n * Interval.subtract('5P', '3M') // => '3m'\n * Interval.subtract('3M', '5P') // => '-3m'\n */\nexport const subtract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\n\nexport function transposeFifths(\n  interval: IntervalName,\n  fifths: number,\n): IntervalName {\n  const ivl = get(interval);\n  if (ivl.empty) return \"\";\n\n  const [nFifths, nOcts, dir] = ivl.coord;\n  return coordToInterval([nFifths + fifths, nOcts, dir]).name;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  num,\n  semitones,\n  quality,\n  fromSemitones,\n  distance,\n  invert,\n  simplify,\n  add,\n  addTo,\n  subtract,\n  transposeFifths,\n};\n\n//// PRIVATE ////\n\ntype Operation = (\n  a: IntervalCoordinates,\n  b: IntervalCoordinates,\n) => NoteCoordinates;\n\nfunction combinator(fn: Operation) {\n  return (a: IntervalName, b: IntervalName): IntervalName | undefined => {\n    const coordA = props(a).coord;\n    const coordB = props(b).coord;\n    if (coordA && coordB) {\n      const coord = fn(coordA, coordB);\n      return coordToInterval(coord).name;\n    }\n  };\n}\n","import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\n/**\n * Properties for a scale in the scale dictionary. It's a pitch class set\n * properties with the following additional information:\n * - name: the scale name\n * - aliases: alternative list of names\n * - intervals: an array of interval names\n */\nexport interface ScaleType extends Pcset {\n  readonly name: string;\n  readonly aliases: string[];\n}\n\nexport const NoScaleType: ScaleType = {\n  ...EmptyPcset,\n  intervals: [],\n  aliases: [],\n};\n\ntype ScaleTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ScaleType[] = [];\nlet index: Record<ScaleTypeName, ScaleType> = {};\n\nexport function names() {\n  return dictionary.map((scale) => scale.name);\n}\n\n/**\n * Given a scale name or chroma, return the scale properties\n *\n * @param {string} type - scale name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/scale-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ScaleTypeName): ScaleType {\n  return index[type] || NoScaleType;\n}\n\nexport const scaleType = deprecate(\n  \"ScaleDictionary.scaleType\",\n  \"ScaleType.get\",\n  get,\n);\n\n/**\n * Return a list of all scale types\n */\nexport function all() {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\n  \"ScaleDictionary.entries\",\n  \"ScaleType.all\",\n  all,\n);\n\n/**\n * Keys used to reference scale types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a scale into dictionary\n * @param intervals\n * @param name\n * @param aliases\n */\nexport function add(\n  intervals: string[],\n  name: string,\n  aliases: string[] = [],\n): ScaleType {\n  const scale = { ...pcset(intervals), name, intervals, aliases };\n  dictionary.push(scale);\n  index[scale.name] = scale;\n  index[scale.setNum] = scale;\n  index[scale.chroma] = scale;\n  scale.aliases.forEach((alias) => addAlias(scale, alias));\n  return scale;\n}\n\nexport function addAlias(scale: ScaleType, alias: string) {\n  index[alias] = scale;\n}\n\ndata.forEach(([ivls, name, ...aliases]: string[]) =>\n  add(ivls.split(\" \"), name, aliases),\n);\n\nexport default {\n  names,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n\n  // deprecated\n  entries,\n  scaleType,\n};\n","// SCALES\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\nconst SCALES: string[][] = [\n  // Basic scales\n  [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\n  [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m\", \"minor\", \"aeolian\"],\n\n  // Jazz common scales\n  [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\n  [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\n  [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\n  [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\n  [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\n  [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\n\n  // Modes\n  [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\n  [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\n  [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\n  [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\n  [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\n\n  // 5-note scales\n  [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\n  [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\n  [\"1P 2M 4P 5P 6M\", \"ritusen\"],\n  [\"1P 2M 4P 5P 7m\", \"egyptian\"],\n  [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\n  [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\n  [\"1P 2m 3m 5P 6m\", \"pelog\"],\n  [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\n  [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\n  [\"1P 2m 4P 5d 7m\", \"iwato\"],\n  [\"1P 2m 4P 5P 7m\", \"in-sen\"],\n  [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\n  [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\n  [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\n  [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\n  [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\n  [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\n  [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\n  [\"1P 2m 3M 5P 6M\", \"scriabin\"],\n  [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\n  [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\n  [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\n  [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\n  [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\n\n  // 6-note scales\n  [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\n  [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\n  [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\n  [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\n  [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\n  [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\n  [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\n  [\"1P 2M 3M 4A 5A 6A\", \"whole tone\", \"messiaen's mode #1\"],\n  [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\n\n  // 7-note scales\n  [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\n  [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\n  [\n    \"1P 2m 2A 3M 4A 6m 7m\",\n    \"altered\",\n    \"super locrian\",\n    \"diminished whole tone\",\n    \"pomeroy\",\n  ],\n  [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\n  [\n    \"1P 2M 3M 4P 5P 6m 7m\",\n    \"mixolydian b6\",\n    \"melodic minor fifth mode\",\n    \"hindu\",\n  ],\n  [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\n  [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\n  [\n    \"1P 2m 3m 4P 5P 6M 7m\",\n    \"dorian b2\",\n    \"phrygian #6\",\n    \"melodic minor second mode\",\n  ],\n  [\n    \"1P 2m 3m 4d 5d 6m 7d\",\n    \"ultralocrian\",\n    \"superlocrian bb7\",\n    \"superlocrian diminished\",\n  ],\n  [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\n  [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\n  // Source https://en.wikipedia.org/wiki/Ukrainian_Dorian_scale\n  [\n    \"1P 2M 3m 4A 5P 6M 7m\",\n    \"dorian #4\",\n    \"ukrainian dorian\",\n    \"romanian minor\",\n    \"altered dorian\",\n  ],\n  [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\n  [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\n  [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\n  [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\n  [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\n  [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\n  [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\n  [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\n  [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\n  [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\n  [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\n  [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\n  [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\n  [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\n  [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\n  [\n    \"1P 2M 3M 4P 5A 6M 7M\",\n    \"major augmented\",\n    \"major #5\",\n    \"ionian augmented\",\n    \"ionian #5\",\n  ],\n  [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\n\n  // 8-note scales\n  [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\n  [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\n  [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\n  [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\n  [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\n  [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\n  [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\n  [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\n  [\n    \"1P 2m 3m 3M 4A 5P 6M 7m\",\n    \"half-whole diminished\",\n    \"dominant diminished\",\n    \"messiaen's mode #2\",\n  ],\n  [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\n  [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\n\n  // 9-note scales\n  [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\n  [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\n\n  // 10-note scales\n  [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\n\n  // 12-note scales\n  [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\n];\n\nexport default SCALES;\n","import { detect } from \"@tonaljs/chord-detect\";\nimport {\n  ChordType,\n  all as chordTypes,\n  get as getChordType,\n} from \"@tonaljs/chord-type\";\nimport { subtract } from \"@tonaljs/interval\";\nimport { isSubsetOf, isSupersetOf } from \"@tonaljs/pcset\";\nimport {\n  distance,\n  tonicIntervalsTransposer,\n  transpose as transposeNote,\n} from \"@tonaljs/pitch-distance\";\nimport { NoteName, note, tokenizeNote } from \"@tonaljs/pitch-note\";\nimport { all as scaleTypes } from \"@tonaljs/scale-type\";\n\nexport { detect } from \"@tonaljs/chord-detect\";\n\ntype ChordNameOrTokens =\n  | string // full name to be parsed\n  | [string] // only the name\n  | [string, string] // tonic, name\n  | [string, string, string]; // tonic, name, bass\ntype ChordNameTokens = [string, string, string]; // [TONIC, SCALE TYPE, BASS]\n\nexport interface Chord extends ChordType {\n  tonic: string | null;\n  type: string;\n  root: string;\n  bass: string;\n  rootDegree: number;\n  symbol: string;\n  notes: NoteName[];\n}\n\nconst NoChord: Chord = {\n  empty: true,\n  name: \"\",\n  symbol: \"\",\n  root: \"\",\n  bass: \"\",\n  rootDegree: 0,\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  quality: \"Unknown\",\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\n//const NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic, chord type and bass\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * This function does NOT check if the bass is part of the chord or not but it\n * only accepts a pitch class as bass\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type, bass]\n * @example\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\n */\nexport function tokenize(name: string): ChordNameTokens {\n  const [letter, acc, oct, type] = tokenizeNote(name);\n  if (letter === \"\") {\n    return tokenizeBass(\"\", name);\n  } else if (letter === \"A\" && type === \"ug\") {\n    return tokenizeBass(\"\", \"aug\");\n  } else {\n    return tokenizeBass(letter + acc, oct + type);\n  }\n}\n\nfunction tokenizeBass(note: string, chord: string): ChordNameTokens {\n  const split = chord.split(\"/\");\n  if (split.length === 1) {\n    return [note, split[0], \"\"];\n  }\n  const [letter, acc, oct, type] = tokenizeNote(split[1]);\n  // Only a pitch class is accepted as bass note\n  if (letter !== \"\" && oct === \"\" && type === \"\") {\n    return [note, split[0], letter + acc];\n  } else {\n    return [note, chord, \"\"];\n  }\n}\n\n/**\n * Get a Chord from a chord name.\n */\nexport function get(src: ChordNameOrTokens): Chord {\n  if (Array.isArray(src)) {\n    return getChord(src[1] || \"\", src[0], src[2]);\n  } else if (src === \"\") {\n    return NoChord;\n  } else {\n    const [tonic, type, bass] = tokenize(src);\n    const chord = getChord(type, tonic, bass);\n    return chord.empty ? getChord(src) : chord;\n  }\n}\n\n/**\n * Get chord properties\n *\n * @param typeName - the chord type name\n * @param [tonic] - Optional tonic\n * @param [root]  - Optional root (requires a tonic)\n */\nexport function getChord(\n  typeName: string,\n  optionalTonic?: string,\n  optionalBass?: string,\n): Chord {\n  const type = getChordType(typeName);\n  const tonic = note(optionalTonic || \"\");\n  const bass = note(optionalBass || \"\");\n\n  if (\n    type.empty ||\n    (optionalTonic && tonic.empty) ||\n    (optionalBass && bass.empty)\n  ) {\n    return NoChord;\n  }\n\n  const bassInterval = distance(tonic.pc, bass.pc);\n  const bassIndex = type.intervals.indexOf(bassInterval);\n  const hasRoot = bassIndex >= 0;\n  const root = hasRoot ? bass : note(\"\");\n  const rootDegree = bassIndex === -1 ? NaN : bassIndex + 1;\n  const hasBass = bass.pc && bass.pc !== tonic.pc;\n\n  const intervals = Array.from(type.intervals);\n\n  if (hasRoot) {\n    for (let i = 1; i < rootDegree; i++) {\n      const num = intervals[0][0];\n      const quality = intervals[0][1];\n      const newNum = parseInt(num, 10) + 7;\n      intervals.push(`${newNum}${quality}`);\n      intervals.shift();\n    }\n  } else if (hasBass) {\n    const ivl = subtract(distance(tonic.pc, bass.pc), \"8P\");\n    if (ivl) intervals.unshift(ivl);\n  }\n\n  const notes = tonic.empty\n    ? []\n    : intervals.map((i) => transposeNote(tonic.pc, i));\n\n  typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\n  const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${\n    hasRoot && rootDegree > 1 ? \"/\" + root.pc : hasBass ? \"/\" + bass.pc : \"\"\n  }`;\n  const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${\n    hasRoot && rootDegree > 1\n      ? \" over \" + root.pc\n      : hasBass\n        ? \" over \" + bass.pc\n        : \"\"\n  }`;\n  return {\n    ...type,\n    name,\n    symbol,\n    tonic: tonic.pc,\n    type: type.name,\n    root: root.pc,\n    bass: hasBass ? bass.pc : \"\",\n    intervals,\n    rootDegree,\n    notes,\n  };\n}\n\nexport const chord = get;\n\n/**\n * Transpose a chord name\n *\n * @param {string} chordName - the chord name\n * @return {string} the transposed chord\n *\n * @example\n * transpose('Dm7', 'P4') // => 'Gm7\n */\nexport function transpose(chordName: string, interval: string): string {\n  const [tonic, type, bass] = tokenize(chordName);\n  if (!tonic) {\n    return chordName;\n  }\n  const tr = transposeNote(bass, interval);\n  const slash = tr ? \"/\" + tr : \"\";\n  return transposeNote(tonic, interval) + type + slash;\n}\n\n/**\n * Get all scales where the given chord fits\n *\n * @example\n * chordScales('C7b9')\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\n */\nexport function chordScales(name: string): string[] {\n  const s = get(name);\n  const isChordIncluded = isSupersetOf(s.chroma);\n  return scaleTypes()\n    .filter((scale) => isChordIncluded(scale.chroma))\n    .map((scale) => scale.name);\n}\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @example\n * extended(\"CMaj7\")\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\n */\nexport function extended(chordName: string): string[] {\n  const s = get(chordName);\n  const isSuperset = isSupersetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSuperset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @example\n */\nexport function reduced(chordName: string): string[] {\n  const s = get(chordName);\n  const isSubset = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSubset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Return the chord notes\n */\nexport function notes(chordName: ChordNameOrTokens, tonic?: string): string[] {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  if (!note || chord.empty) return [];\n  return chord.intervals.map((ivl) => transposeNote(note, ivl));\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3, 4].map(Chord.degrees(\"C\")) => [\"C\", \"E\", \"G\", \"C\"]\n * [1, 2, 3, 4].map(Chord.degrees(\"C4\")) => [\"C4\", \"E4\", \"G4\", \"C5\"]\n */\nexport function degrees(chordName: ChordNameOrTokens, tonic?: string) {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  const transpose = tonicIntervalsTransposer(chord.intervals, note);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(chordName: ChordNameOrTokens, tonic?: string) {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  return tonicIntervalsTransposer(chord.intervals, note);\n}\n\nexport default {\n  getChord,\n  get,\n  detect,\n  chordScales,\n  extended,\n  reduced,\n  tokenize,\n  transpose,\n  degrees,\n  steps,\n  notes,\n  chord,\n};\n","// source: https://en.wikipedia.org/wiki/Note_value\nconst DATA: [number, string, string[]][] = [\n  [\n    0.125,\n    \"dl\",\n    [\"large\", \"duplex longa\", \"maxima\", \"octuple\", \"octuple whole\"],\n  ],\n  [0.25, \"l\", [\"long\", \"longa\"]],\n  [0.5, \"d\", [\"double whole\", \"double\", \"breve\"]],\n  [1, \"w\", [\"whole\", \"semibreve\"]],\n  [2, \"h\", [\"half\", \"minim\"]],\n  [4, \"q\", [\"quarter\", \"crotchet\"]],\n  [8, \"e\", [\"eighth\", \"quaver\"]],\n  [16, \"s\", [\"sixteenth\", \"semiquaver\"]],\n  [32, \"t\", [\"thirty-second\", \"demisemiquaver\"]],\n  [64, \"sf\", [\"sixty-fourth\", \"hemidemisemiquaver\"]],\n  [128, \"h\", [\"hundred twenty-eighth\"]],\n  [256, \"th\", [\"two hundred fifty-sixth\"]],\n];\n\nexport default DATA;\n","import DATA from \"./data\";\n\ntype Fraction = [number, number];\n\nconst VALUES: DurationValue[] = [];\n\nDATA.forEach(([denominator, shorthand, names]) =>\n  add(denominator, shorthand, names),\n);\n\nexport interface DurationValue {\n  empty: boolean;\n  value: number;\n  name: string;\n  fraction: Fraction;\n  shorthand: string;\n  dots: string;\n  names: string[];\n}\n\nconst NoDuration: DurationValue = {\n  empty: true,\n  name: \"\",\n  value: 0,\n  fraction: [0, 0],\n  shorthand: \"\",\n  dots: \"\",\n  names: [],\n};\n\nexport function names(): string[] {\n  return VALUES.reduce((names, duration) => {\n    duration.names.forEach((name) => names.push(name));\n    return names;\n  }, [] as string[]);\n}\n\nexport function shorthands(): string[] {\n  return VALUES.map((dur) => dur.shorthand);\n}\n\nconst REGEX = /^([^.]+)(\\.*)$/;\n\nexport function get(name: string): DurationValue {\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const [_, simple, dots] = REGEX.exec(name) || [];\n  const base = VALUES.find(\n    (dur) => dur.shorthand === simple || dur.names.includes(simple),\n  );\n  if (!base) {\n    return NoDuration;\n  }\n\n  const fraction = calcDots(base.fraction, dots.length);\n  const value = fraction[0] / fraction[1];\n\n  return { ...base, name, dots, value, fraction };\n}\n\nexport const value = (name: string) => get(name).value;\nexport const fraction = (name: string) => get(name).fraction;\n\nexport default { names, shorthands, get, value, fraction };\n\n//// PRIVATE ////\n\nfunction add(denominator: number, shorthand: string, names: string[]) {\n  VALUES.push({\n    empty: false,\n    dots: \"\",\n    name: \"\",\n    value: 1 / denominator,\n    fraction: denominator < 1 ? [1 / denominator, 1] : [1, denominator],\n    shorthand,\n    names,\n  });\n}\n\nfunction calcDots(fraction: Fraction, dots: number): Fraction {\n  const pow = Math.pow(2, dots);\n\n  let numerator = fraction[0] * pow;\n  let denominator = fraction[1] * pow;\n  const base = numerator;\n\n  // add fractions\n  for (let i = 0; i < dots; i++) {\n    numerator += base / Math.pow(2, i + 1);\n  }\n\n  // simplify\n  while (numerator % 2 === 0 && denominator % 2 === 0) {\n    numerator /= 2;\n    denominator /= 2;\n  }\n  return [numerator, denominator];\n}\n","import { NoteName, note as props } from \"@tonaljs/core\";\n\ntype Midi = number;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isMidi(arg: any): arg is Midi {\n  return +arg >= 0 && +arg <= 127;\n}\n\n/**\n * Get the note midi number (a number between 0 and 127)\n *\n * It returns undefined if not valid note name\n *\n * @function\n * @param {string|number} note - the note name or midi number\n * @return {Integer} the midi number or undefined if not valid note\n * @example\n * import { toMidi } from '@tonaljs/midi'\n * toMidi(\"C4\") // => 60\n * toMidi(60) // => 60\n * toMidi('60') // => 60\n */\nexport function toMidi(note: NoteName | number): number | null {\n  if (isMidi(note)) {\n    return +note;\n  }\n  const n = props(note);\n  return n.empty ? null : n.midi;\n}\n\n/**\n * Get the frequency in hertzs from midi number\n *\n * @param {number} midi - the note midi number\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\n * @return {number} the frequency or null if not valid note midi\n * @example\n * import { midiToFreq} from '@tonaljs/midi'\n * midiToFreq(69) // => 440\n */\nexport function midiToFreq(midi: number, tuning = 440): number {\n  return Math.pow(2, (midi - 69) / 12) * tuning;\n}\n\nconst L2 = Math.log(2);\nconst L440 = Math.log(440);\n\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precision)\n *\n * @param {number} frequency\n * @return {number}\n * @example\n * import { freqToMidi} from '@tonaljs/midi'\n * freqToMidi(220)); //=> 57\n * freqToMidi(261.62)); //=> 60\n * freqToMidi(261)); //=> 59.96\n */\nexport function freqToMidi(freq: number): number {\n  const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\n  return Math.round(v * 100) / 100;\n}\n\nexport interface ToNoteNameOptions {\n  pitchClass?: boolean;\n  sharps?: boolean;\n}\n\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * import { midiToNoteName } from '@tonaljs/midi'\n * midiToNoteName(61) // => \"Db4\"\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\n * // it rounds to nearest note\n * midiToNoteName(61.7) // => \"D4\"\n */\nexport function midiToNoteName(midi: number, options: ToNoteNameOptions = {}) {\n  if (isNaN(midi) || midi === -Infinity || midi === Infinity) return \"\";\n  midi = Math.round(midi);\n  const pcs = options.sharps === true ? SHARPS : FLATS;\n  const pc = pcs[midi % 12];\n  if (options.pitchClass) {\n    return pc;\n  }\n  const o = Math.floor(midi / 12) - 1;\n  return pc + o;\n}\n\nexport function chroma(midi: number): number {\n  return midi % 12;\n}\n\nfunction pcsetFromChroma(chroma: string): number[] {\n  return chroma.split(\"\").reduce((pcset, val, index) => {\n    if (index < 12 && val === \"1\") pcset.push(index);\n    return pcset;\n  }, [] as number[]);\n}\n\nfunction pcsetFromMidi(midi: number[]): number[] {\n  return midi\n    .map(chroma)\n    .sort((a, b) => a - b)\n    .filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n\n/**\n * Given a list of midi numbers, returns the pitch class set (unique chroma numbers)\n * @param midi\n * @example\n *\n */\nexport function pcset(notes: number[] | string): number[] {\n  return Array.isArray(notes) ? pcsetFromMidi(notes) : pcsetFromChroma(notes);\n}\n\nexport function pcsetNearest(notes: number[] | string) {\n  const set = pcset(notes);\n  return (midi: number): number | undefined => {\n    const ch = chroma(midi);\n    for (let i = 0; i < 12; i++) {\n      if (set.includes(ch + i)) return midi + i;\n      if (set.includes(ch - i)) return midi - i;\n    }\n    return undefined;\n  };\n}\n\nexport function pcsetSteps(notes: number[] | string, tonic: number) {\n  const set = pcset(notes);\n  const len = set.length;\n  return (step: number): number => {\n    const index = step < 0 ? (len - (-step % len)) % len : step % len;\n    const octaves = Math.floor(step / len);\n    return set[index] + octaves * 12 + tonic;\n  };\n}\n\nexport function pcsetDegrees(notes: number[] | string, tonic: number) {\n  const steps = pcsetSteps(notes, tonic);\n  return (degree: number): number | undefined => {\n    if (degree === 0) return undefined;\n    return steps(degree > 0 ? degree - 1 : degree);\n  };\n}\n\nexport default {\n  chroma,\n  freqToMidi,\n  isMidi,\n  midiToFreq,\n  midiToNoteName,\n  pcsetNearest,\n  pcset,\n  pcsetDegrees,\n  pcsetSteps,\n  toMidi,\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  IntervalName,\n  Note,\n  NoteLiteral,\n  NoteName,\n  Pitch,\n  transpose as _tr,\n  note as props,\n} from \"@tonaljs/core\";\nimport { freqToMidi, midiToNoteName } from \"@tonaljs/midi\";\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n\nconst toName = (n: Note) => n.name;\nconst onlyNotes = (array: any[]) =>\n  array.map(props).filter((n) => !n.empty) as Note[];\n\n/**\n * Return the natural note names without octave\n * @function\n * @example\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\n */\nexport function names(array?: any[]): string[] {\n  if (array === undefined) {\n    return NAMES.slice();\n  } else if (!Array.isArray(array)) {\n    return [];\n  } else {\n    return onlyNotes(array).map(toName);\n  }\n}\n\n/**\n * Get a note from a note name\n *\n * @function\n * @example\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport const get = props;\n\n/**\n * Get the note name\n * @function\n */\nexport const name = (note: NoteLiteral) => get(note).name;\n\n/**\n * Get the note pitch class name\n * @function\n */\nexport const pitchClass = (note: NoteLiteral) => get(note).pc;\n\n/**\n * Get the note accidentals\n * @function\n */\nexport const accidentals = (note: NoteLiteral) => get(note).acc;\n\n/**\n * Get the note octave\n * @function\n */\nexport const octave = (note: NoteLiteral) => get(note).oct;\n\n/**\n * Get the note midi\n * @function\n */\nexport const midi = (note: NoteLiteral) => get(note).midi;\n\n/**\n * Get the note midi\n * @function\n */\nexport const freq = (note: NoteLiteral) => get(note).freq;\n\n/**\n * Get the note chroma\n * @function\n */\nexport const chroma = (note: NoteLiteral) => get(note).chroma;\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidi(61) // => \"Db4\"\n * Note.fromMidi(61.7) // => \"D4\"\n */\nexport function fromMidi(midi: number) {\n  return midiToNoteName(midi);\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreq(freq: number) {\n  return midiToNoteName(freqToMidi(freq));\n}\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreqSharps(freq: number) {\n  return midiToNoteName(freqToMidi(freq), { sharps: true });\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidiSharps(61) // => \"C#4\"\n */\n\nexport function fromMidiSharps(midi: number) {\n  return midiToNoteName(midi, { sharps: true });\n}\n\n/**\n * Transpose a note by an interval\n */\nexport const transpose = _tr;\nexport const tr = _tr;\n\n/**\n * Transpose by an interval.\n * @function\n * @param {string} interval\n * @return {function} a function that transposes by the given interval\n * @example\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\n * // => [\"G\", \"A\", \"B\"]\n */\nexport const transposeBy = (interval: IntervalName) => (note: NoteName) =>\n  transpose(note, interval);\nexport const trBy = transposeBy;\n\n/**\n * Transpose from a note\n * @function\n * @param {string} note\n * @return {function}  a function that transposes the the note by an interval\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\n * // => [\"C\", \"E\", \"G\"]\n */\nexport const transposeFrom = (note: NoteName) => (interval: IntervalName) =>\n  transpose(note, interval);\nexport const trFrom = transposeFrom;\n\n/**\n * Transpose a note by a number of perfect fifths.\n *\n * @function\n * @param {string} note - the note name\n * @param {number} fifhts - the number of fifths\n * @return {string} the transposed note name\n *\n * @example\n * import { transposeFifths } from \"@tonaljs/note\"\n * transposeFifths(\"G4\", 1) // => \"D\"\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n */\nexport function transposeFifths(noteName: NoteName, fifths: number): NoteName {\n  return transpose(noteName, [fifths, 0]);\n}\nexport const trFifths = transposeFifths;\n\n// TODO: documentation\nexport function transposeOctaves(\n  noteName: NoteName,\n  octaves: number,\n): NoteName {\n  return transpose(noteName, [0, octaves]);\n}\n\nexport type NoteComparator = (a: Note, b: Note) => number;\n\nexport const ascending: NoteComparator = (a, b) => a.height - b.height;\nexport const descending: NoteComparator = (a, b) => b.height - a.height;\n\nexport function sortedNames(\n  notes: any[],\n  comparator?: NoteComparator,\n): string[] {\n  comparator = comparator || ascending;\n  return onlyNotes(notes).sort(comparator).map(toName);\n}\n\nexport function sortedUniqNames(notes: any[]): string[] {\n  return sortedNames(notes, ascending).filter(\n    (n, i, a) => i === 0 || n !== a[i - 1],\n  );\n}\n\n/**\n * Simplify a note\n *\n * @function\n * @param {string} note - the note to be simplified\n * - sameAccType: default true. Use same kind of accidentals that source\n * @return {string} the simplified note or '' if not valid note\n * @example\n * simplify(\"C##\") // => \"D\"\n * simplify(\"C###\") // => \"D#\"\n * simplify(\"C###\")\n * simplify(\"B#4\") // => \"C5\"\n */\nexport const simplify = (noteName: NoteName | Pitch): string => {\n  const note = get(noteName);\n  if (note.empty) {\n    return \"\";\n  }\n  return midiToNoteName(note.midi || note.chroma, {\n    sharps: note.alt > 0,\n    pitchClass: note.midi === null,\n  });\n};\n/**\n * Get enharmonic of a note\n *\n * @function\n * @param {string} note\n * @param [string] - [optional] Destination pitch class\n * @return {string} the enharmonic note name or '' if not valid note\n * @example\n * Note.enharmonic(\"Db\") // => \"C#\"\n * Note.enharmonic(\"C\") // => \"C\"\n * Note.enharmonic(\"F2\",\"E#\") // => \"E#2\"\n */\nexport function enharmonic(noteName: string, destName?: string) {\n  const src = get(noteName);\n  if (src.empty) {\n    return \"\";\n  }\n\n  // destination: use given or generate one\n  const dest = get(\n    destName ||\n      midiToNoteName(src.midi || src.chroma, {\n        sharps: src.alt < 0,\n        pitchClass: true,\n      }),\n  );\n\n  // ensure destination is valid\n  if (dest.empty || dest.chroma !== src.chroma) {\n    return \"\";\n  }\n\n  // if src has no octave, no need to calculate anything else\n  if (src.oct === undefined) {\n    return dest.pc;\n  }\n\n  // detect any octave overflow\n  const srcChroma = src.chroma - src.alt;\n  const destChroma = dest.chroma - dest.alt;\n  const destOctOffset =\n    srcChroma > 11 || destChroma < 0\n      ? -1\n      : srcChroma < 0 || destChroma > 11\n        ? +1\n        : 0;\n  // calculate the new octave\n  const destOct = src.oct + destOctOffset;\n  return dest.pc + destOct;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  pitchClass,\n  accidentals,\n  octave,\n  midi,\n  ascending,\n  descending,\n  sortedNames,\n  sortedUniqNames,\n  fromMidi,\n  fromMidiSharps,\n  freq,\n  fromFreq,\n  fromFreqSharps,\n  chroma,\n  transpose,\n  tr,\n  transposeBy,\n  trBy,\n  transposeFrom,\n  trFrom,\n  transposeFifths,\n  transposeOctaves,\n  trFifths,\n  simplify,\n  enharmonic,\n};\n","import {\n  accToAlt,\n  altToAcc,\n  deprecate,\n  interval,\n  isNamed,\n  isPitch,\n  Pitch,\n} from \"@tonaljs/core\";\n\nexport interface RomanNumeral extends Pitch {\n  readonly name: string;\n  readonly empty: boolean;\n  readonly roman: string;\n  readonly interval: string;\n  readonly acc: string;\n  readonly chordType: string;\n  readonly major: boolean;\n  readonly dir: 1;\n}\n\nexport interface NoRomanNumeral extends Partial<RomanNumeral> {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly chordType: \"\";\n}\nconst NoRomanNumeral: NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\n\nconst cache: Record<string, RomanNumeral | NoRomanNumeral> = {};\n\n/**\n * Get properties of a roman numeral string\n *\n * @function\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\n * @return {Object} - the roman numeral properties\n * @param {string} name - the roman numeral (tonic)\n * @param {string} type - the chord type\n * @param {string} num - the number (1 = I, 2 = II...)\n * @param {boolean} major - major or not\n *\n * @example\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function get(src: any): RomanNumeral | NoRomanNumeral {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : typeof src === \"number\"\n      ? get(NAMES[src] || \"\")\n      : isPitch(src)\n        ? fromPitch(src)\n        : isNamed(src)\n          ? get(src.name)\n          : NoRomanNumeral;\n}\n\nconst romanNumeral = deprecate(\n  \"RomanNumeral.romanNumeral\",\n  \"RomanNumeral.get\",\n  get,\n);\n\n/**\n * Get roman numeral names\n *\n * @function\n * @param {boolean} [isMajor=true]\n * @return {Array<String>}\n *\n * @example\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n */\nexport function names(major = true) {\n  return (major ? NAMES : NAMES_MINOR).slice();\n}\n\nfunction fromPitch(pitch: Pitch): RomanNumeral | NoRomanNumeral {\n  return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\n}\n\nconst REGEX =\n  /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\n\n// [name, accidentals, romanNumeral, chordType]\ntype RomanNumeralTokens = [string, string, string, string];\nexport function tokenize(str: string): RomanNumeralTokens {\n  return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]) as RomanNumeralTokens;\n}\n\nconst ROMANS = \"I II III IV V VI VII\";\nconst NAMES = ROMANS.split(\" \");\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\n\nfunction parse(src: string): RomanNumeral | NoRomanNumeral {\n  const [name, acc, roman, chordType] = tokenize(src);\n  if (!roman) {\n    return NoRomanNumeral;\n  }\n\n  const upperRoman = roman.toUpperCase();\n  const step = NAMES.indexOf(upperRoman);\n  const alt = accToAlt(acc);\n  const dir = 1;\n  return {\n    empty: false,\n    name,\n    roman,\n    interval: interval({ step, alt, dir }).name,\n    acc,\n    chordType,\n    alt,\n    step,\n    major: roman === upperRoman,\n    oct: 0,\n    dir,\n  };\n}\n\nexport default {\n  names,\n  get,\n  // deprecated\n  romanNumeral,\n};\n","import { accToAlt, altToAcc, note, transpose } from \"@tonaljs/core\";\nimport { transposeFifths } from \"@tonaljs/note\";\nimport { get as roman } from \"@tonaljs/roman-numeral\";\n\nconst Empty: readonly string[] = Object.freeze([] as string[]);\n\nexport interface Key {\n  readonly type: \"major\" | \"minor\";\n  readonly tonic: string;\n  readonly alteration: number;\n  readonly keySignature: string;\n}\n\nconst NoKey: Key = {\n  type: \"major\",\n  tonic: \"\",\n  alteration: 0,\n  keySignature: \"\",\n};\n\nexport interface KeyScale {\n  readonly tonic: string;\n  readonly grades: readonly string[];\n  readonly intervals: readonly string[];\n  readonly scale: readonly string[];\n  readonly triads: readonly string[];\n  readonly chords: readonly string[];\n  readonly chordsHarmonicFunction: readonly string[];\n  readonly chordScales: readonly string[];\n}\n\nconst NoKeyScale: KeyScale = {\n  tonic: \"\",\n  grades: Empty,\n  intervals: Empty,\n  scale: Empty,\n  triads: Empty,\n  chords: Empty,\n  chordsHarmonicFunction: Empty,\n  chordScales: Empty,\n};\n\nexport interface MajorKey extends Key, KeyScale {\n  readonly type: \"major\";\n  readonly minorRelative: string;\n  readonly scale: readonly string[];\n  readonly secondaryDominants: readonly string[];\n  readonly secondaryDominantsMinorRelative: readonly string[];\n  readonly substituteDominants: readonly string[];\n  readonly substituteDominantsMinorRelative: readonly string[];\n}\n\nconst NoMajorKey: MajorKey = {\n  ...NoKey,\n  ...NoKeyScale,\n  type: \"major\",\n  minorRelative: \"\",\n  scale: Empty,\n  secondaryDominants: Empty,\n  secondaryDominantsMinorRelative: Empty,\n  substituteDominants: Empty,\n  substituteDominantsMinorRelative: Empty,\n};\n\nexport interface MinorKey extends Key {\n  readonly type: \"minor\";\n  readonly relativeMajor: string;\n  readonly natural: KeyScale;\n  readonly harmonic: KeyScale;\n  readonly melodic: KeyScale;\n}\n\nconst NoMinorKey: MinorKey = {\n  ...NoKey,\n  type: \"minor\",\n  relativeMajor: \"\",\n  natural: NoKeyScale,\n  harmonic: NoKeyScale,\n  melodic: NoKeyScale,\n};\n\nconst mapScaleToType = (scale: string[], list: string[], sep = \"\") =>\n  list.map((type, i) => `${scale[i]}${sep}${type}`);\n\nfunction keyScale(\n  grades: string[],\n  triads: string[],\n  chords: string[],\n  harmonicFunctions: string[],\n  chordScales: string[],\n) {\n  return (tonic: string): KeyScale => {\n    const intervals = grades.map((gr) => roman(gr).interval || \"\");\n    const scale = intervals.map((interval) => transpose(tonic, interval));\n\n    return {\n      tonic,\n      grades,\n      intervals,\n      scale,\n      triads: mapScaleToType(scale, triads),\n      chords: mapScaleToType(scale, chords),\n      chordsHarmonicFunction: harmonicFunctions.slice(),\n      chordScales: mapScaleToType(scale, chordScales, \" \"),\n    };\n  };\n}\n\nconst distInFifths = (from: string, to: string) => {\n  const f = note(from);\n  const t = note(to);\n  return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\n};\n\nconst MajorScale = keyScale(\n  \"I II III IV V VI VII\".split(\" \"),\n  \" m m   m dim\".split(\" \"),\n  \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"),\n  \"T SD T SD D T D\".split(\" \"),\n  \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"),\n);\nconst NaturalScale = keyScale(\n  \"I II bIII IV V bVI bVII\".split(\" \"),\n  \"m dim  m m  \".split(\" \"),\n  \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"),\n  \"T SD T SD D SD SD\".split(\" \"),\n  \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"),\n);\nconst HarmonicScale = keyScale(\n  \"I II bIII IV V bVI VII\".split(\" \"),\n  \"m dim aug m   dim\".split(\" \"),\n  \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"),\n  \"T SD T SD D SD D\".split(\" \"),\n  \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\n    \",\",\n  ),\n);\nconst MelodicScale = keyScale(\n  \"I II bIII IV V VI VII\".split(\" \"),\n  \"m m aug   dim dim\".split(\" \"),\n  \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"),\n  \"T SD T SD D  \".split(\" \"),\n  \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\n    \",\",\n  ),\n);\n\n/**\n * Get a major key properties in a given tonic\n * @param tonic\n */\nexport function majorKey(tonic: string): MajorKey {\n  const pc = note(tonic).pc;\n  if (!pc) return NoMajorKey;\n\n  const keyScale = MajorScale(pc);\n  const alteration = distInFifths(\"C\", pc);\n  const romanInTonic = (src: string) => {\n    const r = roman(src);\n    if (r.empty) return \"\";\n\n    return transpose(tonic, r.interval) + r.chordType;\n  };\n\n  return {\n    ...keyScale,\n    type: \"major\",\n    minorRelative: transpose(pc, \"-3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\n    secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n  };\n}\n\n/**\n * Get minor key properties in a given tonic\n * @param tonic\n */\nexport function minorKey(tnc: string): MinorKey {\n  const pc = note(tnc).pc;\n  if (!pc) return NoMinorKey;\n\n  const alteration = distInFifths(\"C\", pc) - 3;\n  return {\n    type: \"minor\",\n    tonic: pc,\n    relativeMajor: transpose(pc, \"3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    natural: NaturalScale(pc),\n    harmonic: HarmonicScale(pc),\n    melodic: MelodicScale(pc),\n  };\n}\n\n/**\n * Given a key signature, returns the tonic of the major key\n * @param sigature\n * @example\n * majorTonicFromKeySignature('###') // => 'A'\n */\nexport function majorTonicFromKeySignature(\n  sig: string | number,\n): string | null {\n  if (typeof sig === \"number\") {\n    return transposeFifths(\"C\", sig);\n  } else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\n    return transposeFifths(\"C\", accToAlt(sig));\n  }\n  return null;\n}\n\nexport default { majorKey, majorTonicFromKeySignature, minorKey };\n","import { rotate } from \"@tonaljs/collection\";\nimport { deprecate, NamedPitch, NoteName, transpose } from \"@tonaljs/core\";\nimport { simplify, transposeFifths } from \"@tonaljs/interval\";\nimport { EmptyPcset, Pcset } from \"@tonaljs/pcset\";\nimport { get as getType } from \"@tonaljs/scale-type\";\n\nconst MODES = [\n  [0, 2773, 0, \"ionian\", \"\", \"Maj7\", \"major\"],\n  [1, 2902, 2, \"dorian\", \"m\", \"m7\"],\n  [2, 3418, 4, \"phrygian\", \"m\", \"m7\"],\n  [3, 2741, -1, \"lydian\", \"\", \"Maj7\"],\n  [4, 2774, 1, \"mixolydian\", \"\", \"7\"],\n  [5, 2906, 3, \"aeolian\", \"m\", \"m7\", \"minor\"],\n  [6, 3434, 5, \"locrian\", \"dim\", \"m7b5\"],\n] as const;\n\ntype ModeDatum = (typeof MODES)[number];\n\nexport interface Mode extends Pcset {\n  readonly name: string;\n  readonly modeNum: number;\n  readonly alt: number; // number of alterations === number of fiths\n  readonly triad: string;\n  readonly seventh: string;\n  readonly aliases: string[];\n}\n\nconst NoMode: Mode = {\n  ...EmptyPcset,\n  name: \"\",\n  alt: 0,\n  modeNum: NaN,\n  triad: \"\",\n  seventh: \"\",\n  aliases: [],\n};\n\nconst modes: Mode[] = MODES.map(toMode);\nconst index: Record<string, Mode> = {};\nmodes.forEach((mode) => {\n  index[mode.name] = mode;\n  mode.aliases.forEach((alias) => {\n    index[alias] = mode;\n  });\n});\n\ntype ModeLiteral = string | NamedPitch;\n\n/**\n * Get a Mode by it's name\n *\n * @example\n * get('dorian')\n * // =>\n * // {\n * //   intervals: [ '1P', '2M', '3m', '4P', '5P', '6M', '7m' ],\n * //   modeNum: 1,\n * //   chroma: '101101010110',\n * //   normalized: '101101010110',\n * //   name: 'dorian',\n * //   setNum: 2902,\n * //   alt: 2,\n * //   triad: 'm',\n * //   seventh: 'm7',\n * //   aliases: []\n * // }\n */\nexport function get(name: ModeLiteral): Mode {\n  return typeof name === \"string\"\n    ? index[name.toLowerCase()] || NoMode\n    : name && name.name\n      ? get(name.name)\n      : NoMode;\n}\n\nexport const mode = deprecate(\"Mode.mode\", \"Mode.get\", get);\n\n/**\n * Get a list of all modes\n */\nexport function all() {\n  return modes.slice();\n}\nexport const entries = deprecate(\"Mode.mode\", \"Mode.all\", all);\n\n/**\n * Get a list of all mode names\n */\nexport function names() {\n  return modes.map((mode) => mode.name);\n}\n\nfunction toMode(mode: ModeDatum): Mode {\n  const [modeNum, setNum, alt, name, triad, seventh, alias] = mode;\n  const aliases = alias ? [alias] : [];\n  const chroma = Number(setNum).toString(2);\n  const intervals = getType(name).intervals;\n  return {\n    empty: false,\n    intervals,\n    modeNum,\n    chroma,\n    normalized: chroma,\n    name,\n    setNum,\n    alt,\n    triad,\n    seventh,\n    aliases,\n  };\n}\n\nexport function notes(modeName: ModeLiteral, tonic: NoteName) {\n  return get(modeName).intervals.map((ivl) => transpose(tonic, ivl));\n}\n\nfunction chords(chords: string[]) {\n  return (modeName: ModeLiteral, tonic: NoteName) => {\n    const mode = get(modeName);\n    if (mode.empty) return [];\n    const triads = rotate(mode.modeNum, chords);\n    const tonics = mode.intervals.map((i) => transpose(tonic, i));\n    return triads.map((triad, i) => tonics[i] + triad);\n  };\n}\n\nexport const triads = chords(MODES.map((x) => x[4]));\nexport const seventhChords = chords(MODES.map((x) => x[5]));\n\nexport function distance(destination: ModeLiteral, source: ModeLiteral) {\n  const from = get(source);\n  const to = get(destination);\n  if (from.empty || to.empty) return \"\";\n  return simplify(transposeFifths(\"1P\", to.alt - from.alt));\n}\n\nexport function relativeTonic(\n  destination: ModeLiteral,\n  source: ModeLiteral,\n  tonic: NoteName,\n) {\n  return transpose(tonic, distance(destination, source));\n}\n\nexport default {\n  get,\n  names,\n  all,\n  distance,\n  relativeTonic,\n  notes,\n  triads,\n  seventhChords,\n  // deprecated\n  entries,\n  mode,\n};\n","/**\n * References:\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\n * @module scale\n */\nimport { all as chordTypes } from \"@tonaljs/chord-type\";\nimport { range as nums, rotate } from \"@tonaljs/collection\";\nimport {\n  deprecate,\n  note,\n  NoteName,\n  tonicIntervalsTransposer,\n  transpose,\n} from \"@tonaljs/core\";\nimport { enharmonic, fromMidi, sortedUniqNames } from \"@tonaljs/note\";\nimport {\n  chroma,\n  isChroma,\n  isSubsetOf,\n  isSupersetOf,\n  modes,\n} from \"@tonaljs/pcset\";\nimport {\n  all,\n  all as scaleTypes,\n  get as getScaleType,\n  names as scaleTypeNames,\n  ScaleType,\n} from \"@tonaljs/scale-type\";\n\ntype ScaleName = string;\ntype ScaleNameTokens = [string, string]; // [TONIC, SCALE TYPE]\n\nexport interface Scale extends ScaleType {\n  tonic: string | null;\n  type: string;\n  notes: NoteName[];\n}\n\nconst NoScale: Scale = {\n  empty: true,\n  name: \"\",\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(name: ScaleName): ScaleNameTokens {\n  if (typeof name !== \"string\") {\n    return [\"\", \"\"];\n  }\n  const i = name.indexOf(\" \");\n  const tonic = note(name.substring(0, i));\n  if (tonic.empty) {\n    const n = note(name);\n    return n.empty ? [\"\", name] : [n.name, \"\"];\n  }\n\n  const type = name.substring(tonic.name.length + 1);\n  return [tonic.name, type.length ? type : \"\"];\n}\n\n/**\n * Get all scale names\n * @function\n */\nexport const names = scaleTypeNames;\n\n/**\n * Get a Scale from a scale name.\n */\nexport function get(src: ScaleName | ScaleNameTokens): Scale {\n  const tokens = Array.isArray(src) ? src : tokenize(src);\n  const tonic = note(tokens[0]).name;\n  const st = getScaleType(tokens[1]);\n  if (st.empty) {\n    return NoScale;\n  }\n\n  const type = st.name;\n  const notes: string[] = tonic\n    ? st.intervals.map((i) => transpose(tonic, i))\n    : [];\n\n  const name = tonic ? tonic + \" \" + type : type;\n\n  return { ...st, name, type, tonic, notes };\n}\n\nexport const scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\n\nexport function detect(\n  notes: string[],\n  options: { tonic?: string; match?: \"exact\" | \"fit\" } = {},\n): string[] {\n  const notesChroma = chroma(notes);\n  const tonic = note(options.tonic ?? notes[0] ?? \"\");\n  const tonicChroma = tonic.chroma;\n  if (tonicChroma === undefined) {\n    return [];\n  }\n\n  const pitchClasses = notesChroma.split(\"\");\n  pitchClasses[tonicChroma] = \"1\";\n  const scaleChroma = rotate(tonicChroma, pitchClasses).join(\"\");\n  const match = all().find((scaleType) => scaleType.chroma === scaleChroma);\n\n  const results: string[] = [];\n  if (match) {\n    results.push(tonic.name + \" \" + match.name);\n  }\n  if (options.match === \"exact\") {\n    return results;\n  }\n\n  extended(scaleChroma).forEach((scaleName) => {\n    results.push(tonic.name + \" \" + scaleName);\n  });\n\n  return results;\n}\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nexport function scaleChords(name: string): string[] {\n  const s = get(name);\n  const inScale = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => inScale(chord.chroma))\n    .map((chord) => chord.aliases[0]);\n}\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nexport function extended(name: string): string[] {\n  const chroma = isChroma(name) ? name : get(name).chroma;\n  const isSuperset = isSupersetOf(chroma);\n  return scaleTypes()\n    .filter((scale) => isSuperset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nexport function reduced(name: string): string[] {\n  const isSubset = isSubsetOf(get(name).chroma);\n  return scaleTypes()\n    .filter((scale) => isSubset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {string[]} notes\n * @return {string[]} pitch classes with same tonic\n * @example\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nexport function scaleNotes(notes: NoteName[]) {\n  const pcset: string[] = notes.map((n) => note(n).pc).filter((x) => x);\n  const tonic = pcset[0];\n  const scale = sortedUniqNames(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n}\n\ntype ScaleMode = [string, string];\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nexport function modeNames(name: string): ScaleMode[] {\n  const s = get(name);\n  if (s.empty) {\n    return [];\n  }\n\n  const tonics = s.tonic ? s.notes : s.intervals;\n  return modes(s.chroma)\n    .map((chroma: string, i: number): ScaleMode => {\n      const modeName = get(chroma).name;\n      return modeName ? [tonics[i], modeName] : [\"\", \"\"];\n    })\n    .filter((x) => x[0]);\n}\n\nfunction getNoteNameOf(scale: string | string[]) {\n  const names = Array.isArray(scale) ? scaleNotes(scale) : get(scale).notes;\n  const chromas = names.map((name) => note(name).chroma);\n\n  return (noteOrMidi: string | number): string | undefined => {\n    const currNote =\n      typeof noteOrMidi === \"number\"\n        ? note(fromMidi(noteOrMidi))\n        : note(noteOrMidi);\n    const height = currNote.height;\n\n    if (height === undefined) return undefined;\n    const chroma = height % 12;\n    const position = chromas.indexOf(chroma);\n    if (position === -1) return undefined;\n    return enharmonic(currNote.name, names[position]);\n  };\n}\n\nexport function rangeOf(scale: string | string[]) {\n  const getName = getNoteNameOf(scale);\n  return (fromNote: string, toNote: string) => {\n    const from = note(fromNote).height;\n    const to = note(toNote).height;\n    if (from === undefined || to === undefined) return [];\n\n    return nums(from, to)\n      .map(getName)\n      .filter((x) => x);\n  };\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3].map(Scale.degrees(\"C major\")) => [\"C\", \"D\", \"E\"]\n * [1, 2, 3].map(Scale.degrees(\"C4 major\")) => [\"C4\", \"D4\", \"E4\"]\n */\nexport function degrees(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  const transpose = tonicIntervalsTransposer(intervals, tonic);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  return tonicIntervalsTransposer(intervals, tonic);\n}\n\nexport default {\n  degrees,\n  detect,\n  extended,\n  get,\n  modeNames,\n  names,\n  rangeOf,\n  reduced,\n  scaleChords,\n  scaleNotes,\n  steps,\n  tokenize,\n\n  // deprecated\n  scale,\n};\n","import Note from \"@tonaljs/note\";\n\n// A function that decides which of a set of voicings is picked as a follow up to lastVoicing.\nexport declare type VoiceLeadingFunction = (\n  voicings: string[][],\n  lastVoicing: string[],\n) => string[];\n\nexport const topNoteDiff: VoiceLeadingFunction = (voicings, lastVoicing) => {\n  if (!lastVoicing || !lastVoicing.length) {\n    return voicings[0];\n  }\n  const topNoteMidi = (voicing: string[]) =>\n    Note.midi(voicing[voicing.length - 1]) || 0;\n  const diff = (voicing: string[]) =>\n    Math.abs(topNoteMidi(lastVoicing) - topNoteMidi(voicing));\n  return voicings.sort((a, b) => diff(a) - diff(b))[0];\n};\n\nexport default {\n  topNoteDiff,\n};\n","import Chord from \"@tonaljs/chord\";\nimport { lefthand, VoicingDictionary, triads, all } from \"./data\";\n\nconst defaultDictionary: VoicingDictionary = lefthand;\n\nfunction lookup(\n  symbol: string,\n  dictionary = defaultDictionary,\n): string[] | undefined {\n  if (dictionary[symbol]) {\n    return dictionary[symbol];\n  }\n  const { aliases } = Chord.get(\"C\" + symbol);\n  // TODO: find other way to get aliases of symbol\n  const match =\n    Object.keys(dictionary).find((_symbol) => aliases.includes(_symbol)) || \"\";\n  if (match !== undefined) {\n    return dictionary[match];\n  }\n  return undefined;\n}\n\nexport default {\n  lookup,\n  lefthand,\n  triads,\n  all,\n  defaultDictionary,\n};\n","export type VoicingDictionary = { [symbol: string]: string[] };\n\nexport const triads: VoicingDictionary = {\n  M: [\"1P 3M 5P\", \"3M 5P 8P\", \"5P 8P 10M\"],\n  m: [\"1P 3m 5P\", \"3m 5P 8P\", \"5P 8P 10m\"],\n  o: [\"1P 3m 5d\", \"3m 5d 8P\", \"5d 8P 10m\"],\n  aug: [\"1P 3m 5A\", \"3m 5A 8P\", \"5A 8P 10m\"],\n};\nexport const lefthand: VoicingDictionary = {\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n  \"69\": [\"3M 5P 6A 9M\"],\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\n  \"7#11\": [\"7m 9M 11A 13A\"],\n  \"7#9\": [\"3M 7m 9A\"],\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"],\n};\nexport const all: VoicingDictionary = {\n  M: [\"1P 3M 5P\", \"3M 5P 8P\", \"5P 8P 10M\"],\n  m: [\"1P 3m 5P\", \"3m 5P 8P\", \"5P 8P 10m\"],\n  o: [\"1P 3m 5d\", \"3m 5d 8P\", \"5d 8P 10m\"],\n  aug: [\"1P 3m 5A\", \"3m 5A 8P\", \"5A 8P 10m\"],\n  m7: [\"3m 5P 7m 9M\", \"7m 9M 10m 12P\"],\n  \"7\": [\"3M 6M 7m 9M\", \"7m 9M 10M 13M\"],\n  \"^7\": [\"3M 5P 7M 9M\", \"7M 9M 10M 12P\"],\n  \"69\": [\"3M 5P 6A 9M\"],\n  m7b5: [\"3m 5d 7m 8P\", \"7m 8P 10m 12d\"],\n  \"7b9\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  \"7b13\": [\"3M 6m 7m 9m\", \"7m 9m 10M 13m\"], // b9 / b13\n  o7: [\"1P 3m 5d 6M\", \"5d 6M 8P 10m\"],\n  \"7#11\": [\"7m 9M 11A 13A\"],\n  \"7#9\": [\"3M 7m 9A\"],\n  mM7: [\"3m 5P 7M 9M\", \"7M 9M 10m 12P\"],\n  m6: [\"3m 5P 6M 9M\", \"6M 9M 10m 12P\"],\n};\n","import Chord from \"@tonaljs/chord\";\nimport Interval from \"@tonaljs/interval\";\nimport Note from \"@tonaljs/note\";\nimport Range from \"@tonaljs/range\";\nimport VoiceLeading from \"@tonaljs/voice-leading\";\nimport VoicingDictionary from \"@tonaljs/voicing-dictionary\";\n\nconst defaultRange = [\"C3\", \"C5\"];\nconst defaultDictionary = VoicingDictionary.all;\nconst defaultVoiceLeading = VoiceLeading.topNoteDiff;\n\nfunction get(\n  chord: string,\n  range: string[] = defaultRange,\n  dictionary = defaultDictionary,\n  voiceLeading = defaultVoiceLeading,\n  lastVoicing?: string[],\n) {\n  const voicings = search(chord, range, dictionary);\n  if (!lastVoicing || !lastVoicing.length) {\n    // notes = voicings[Math.ceil(voicings.length / 2)]; // pick middle voicing..\n    return voicings[0]; // pick lowest voicing..\n  } else {\n    // calculates the distance between the last note and the given voicings top note\n    // sort voicings with differ\n    return voiceLeading(voicings, lastVoicing);\n  }\n}\n\nfunction search(\n  chord: string,\n  range = defaultRange,\n  dictionary = VoicingDictionary.triads,\n): string[][] {\n  const [tonic, symbol] = Chord.tokenize(chord);\n  const sets = VoicingDictionary.lookup(symbol, dictionary);\n  // find equivalent symbol that is used as a key in dictionary:\n  if (!sets) {\n    return [];\n  }\n  // resolve array of interval arrays for the wanted symbol\n  const voicings = sets.map((intervals) => intervals.split(\" \"));\n  const notesInRange = Range.chromatic(range); // gives array of notes inside range\n  return voicings.reduce((voiced: string[][], voicing: string[]) => {\n    // transpose intervals relative to first interval (e.g. 3m 5P > 1P 3M)\n    const relativeIntervals = voicing.map(\n      (interval) => Interval.subtract(interval, voicing[0]) || \"\",\n    );\n    // get enharmonic correct pitch class the bottom note\n    const bottomPitchClass = Note.transpose(tonic, voicing[0]);\n    // get all possible start notes for voicing\n    const starts = notesInRange\n      // only get the start notes:\n      .filter((note) => Note.chroma(note) === Note.chroma(bottomPitchClass))\n      // filter out start notes that will overshoot the top end of the range\n      .filter(\n        (note) =>\n          (Note.midi(\n            Note.transpose(\n              note,\n              relativeIntervals[relativeIntervals.length - 1],\n            ),\n          ) || 0) <= (Note.midi(range[1]) || 0),\n      )\n      // replace Range.chromatic notes with the correct enharmonic equivalents\n      .map((note) => Note.enharmonic(note, bottomPitchClass));\n    // render one voicing for each start note\n    const notes = starts.map((start) =>\n      relativeIntervals.map((interval) => Note.transpose(start, interval)),\n    );\n    return voiced.concat(notes);\n  }, []);\n}\n\nfunction sequence(\n  chords: string[],\n  range = defaultRange,\n  dictionary = defaultDictionary,\n  voiceLeading = defaultVoiceLeading,\n  lastVoicing?: string[],\n) {\n  const { voicings } = chords.reduce<{\n    voicings: string[][];\n    lastVoicing: string[] | undefined;\n  }>(\n    ({ voicings, lastVoicing }, chord) => {\n      const voicing = get(chord, range, dictionary, voiceLeading, lastVoicing);\n      lastVoicing = voicing;\n      voicings.push(voicing);\n      return { voicings, lastVoicing };\n    },\n    { voicings: [], lastVoicing },\n  );\n  return voicings;\n}\n\nexport default {\n  get,\n  search,\n  sequence,\n};\n","export const console_green = \"\\u001b[32m\";\nexport const console_reset = \"\\u001b[0m\";\n\nexport const _throw = <E extends Error>(e: E) => { throw e; };  // 文の式化\nexport const assertNotNull = <T>(value: T | null, error = new TypeError(\"null value received\")) => value !== null ? value : _throw(error);\nexport const assertNotUndefined = <T>(value: T | undefined, error = new TypeError(\"undefined value received\")) => value !== undefined ? value : _throw(error);\nexport const assertNonNullable = <T>(value: T | null | undefined) => assertNotNull(assertNotUndefined(value));\nexport const assertNotNaN = (value: number) => isNaN(value) ? _throw(new TypeError(\"NaN value received\")) : value;\nexport const castToNumber = (value: string) => assertNotNaN(Number(value));\n\nexport type recurrentArray<T> = T | recurrentArray<T>[];\nexport function Arraying<T>(e: recurrentArray<T>): T[] {\n  const concat = function (arr: recurrentArray<T>[]): T[] {\n    let res: T[] = [];\n    for (const e of arr) {\n      res = res.concat(Arraying(e));\n    }\n    return res;\n  };\n  return e instanceof Array ? concat(e) : [e];\n}\n\n// 引数には any が入る.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport const hasSameValue = (o1: any, o2: any) => {\n  if (o1 === o2) { return true; } // same object\n  if (o1 == null) { return false; } // because the other is not null\n  if (o2 == null) { return false; } // because the other is not null\n  if (Object.keys(o1).length != Object.keys(o2).length) { return false; }\n  for (const key in o1) {\n    if (!(key in o2)) { return false; }\n    if (typeof o1[key] === \"object\") {\n      if (!hasSameValue(o1[key], o2[key])) { return false; } // deep check\n    } else if (o1[key] != o2[key]) { return false; }\n  }\n  return true;\n};\n\nexport class IdDictionary<Key extends keyof any> { // eslint-disable-line @typescript-eslint/no-explicit-any\n  #item2id: { [key: keyof any]: number } = {}; // eslint-disable-line @typescript-eslint/no-explicit-any\n  #id2item: Key[] = [];\n  get length() {\n    return this.#id2item.length;\n  }\n  register(item: Key) {\n    const id = this.#item2id[item];\n    if (id !== undefined) { return id; }\n    else {\n      const i = this.#id2item.length;\n      this.#item2id[item] = i;\n      this.#id2item[i] = item;\n      return i;\n    }\n  }\n  getId(item: Key) { return assertNotUndefined(this.#item2id[item], new ReferenceError(`key ${String(item)} not found`)); }\n  getItem(id: number) { return assertNotUndefined(this.#id2item[id], new ReferenceError(`id ${String(id)} not found`)); }\n  showAll() { return this.#id2item; }\n}\n\n// エラーを期待するテストのための, 予想外のエラーを受け取った時のエラー\nexport class UnexpectedErrorThrownError extends Error { constructor(message = \"\") { super(message); } }\nexport class NotImplementedError extends Error { constructor(message = \"\") { super(message); } }\n\nexport class Assertion {\n  #assertion: boolean;\n  constructor(assertion: boolean) {\n    this.#assertion = assertion;\n  }\n  onFailed(errorExecution: () => void) { this.#assertion || errorExecution(); }\n}\n\n","export interface NamedPitch {\n  readonly name: string;\n}\n\n/*** @deprecated use NamedPitch */\nexport interface Named {\n  readonly name: string;\n}\n\nexport interface NotFound extends NamedPitch {\n  readonly empty: true;\n  readonly name: \"\";\n}\n\nexport function isNamedPitch(src: unknown): src is NamedPitch {\n  return src !== null &&\n    typeof src === \"object\" &&\n    \"name\" in src &&\n    typeof src.name === \"string\"\n    ? true\n    : false;\n}\n\ntype Fifths = number;\ntype Octaves = number;\nexport type Direction = 1 | -1;\n\nexport type PitchClassCoordinates = [Fifths];\nexport type NoteCoordinates = [Fifths, Octaves];\nexport type IntervalCoordinates = [Fifths, Octaves, Direction];\nexport type PitchCoordinates =\n  | PitchClassCoordinates\n  | NoteCoordinates\n  | IntervalCoordinates;\n\n/**\n * Pitch properties\n *\n * - {number} step - The step number: 0 = C, 1 = D, ... 6 = B\n * - {number} alt - Number of alterations: -2 = 'bb', -1 = 'b', 0 = '', 1 = '#', ...\n * - {number} [oct] = The octave (undefined when is a coord class)\n * - {number} [dir] = Interval direction (undefined when is not an interval)\n */\nexport interface Pitch {\n  readonly step: number;\n  readonly alt: number;\n  readonly oct?: number; // undefined for pitch classes\n  readonly dir?: Direction; // undefined for notes\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nexport const chroma = ({ step, alt }: Pitch) => (SIZES[step] + alt + 120) % 12;\n\nexport const height = ({ step, alt, oct, dir = 1 }: Pitch) =>\n  dir * (SIZES[step] + alt + 12 * (oct === undefined ? -100 : oct));\n\nexport const midi = (pitch: Pitch) => {\n  const h = height(pitch);\n  return pitch.oct !== undefined && h >= -12 && h <= 115 ? h + 12 : null;\n};\n\nexport function isPitch(pitch: unknown): pitch is Pitch {\n  return pitch !== null &&\n    typeof pitch === \"object\" &&\n    \"step\" in pitch &&\n    typeof pitch.step === \"number\" &&\n    \"alt\" in pitch &&\n    typeof pitch.alt === \"number\" &&\n    !isNaN(pitch.step) &&\n    !isNaN(pitch.alt)\n    ? true\n    : false;\n}\n\n// The number of fifths of [C, D, E, F, G, A, B]\nconst FIFTHS = [0, 2, 4, -1, 1, 3, 5];\n// The number of octaves it span each step\nconst STEPS_TO_OCTS = FIFTHS.map((fifths: number) =>\n  Math.floor((fifths * 7) / 12),\n);\n\n/**\n * Get coordinates from pitch object\n */\nexport function coordinates(pitch: Pitch): PitchCoordinates {\n  const { step, alt, oct, dir = 1 } = pitch;\n  const f = FIFTHS[step] + 7 * alt;\n  if (oct === undefined) {\n    return [dir * f];\n  }\n  const o = oct - STEPS_TO_OCTS[step] - 4 * alt;\n  return [dir * f, dir * o];\n}\n\n// We need to get the steps from fifths\n// Fifths for CDEFGAB are [ 0, 2, 4, -1, 1, 3, 5 ]\n// We add 1 to fifths to avoid negative numbers, so:\n// for [\"F\", \"C\", \"G\", \"D\", \"A\", \"E\", \"B\"] we have:\nconst FIFTHS_TO_STEPS = [3, 0, 4, 1, 5, 2, 6];\n\n/**\n * Get pitch from coordinate objects\n */\nexport function pitch(coord: PitchCoordinates): Pitch {\n  const [f, o, dir] = coord;\n  const step = FIFTHS_TO_STEPS[unaltered(f)];\n  const alt = Math.floor((f + 1) / 7);\n  if (o === undefined) {\n    return { step, alt, dir };\n  }\n  const oct = o + 4 * alt + STEPS_TO_OCTS[step];\n  return { step, alt, oct, dir };\n}\n\n// Return the number of fifths as if it were unaltered\nfunction unaltered(f: number): number {\n  const i = (f + 1) % 7;\n  return i < 0 ? 7 + i : i;\n}\n","import {\n  coordinates,\n  Direction,\n  IntervalCoordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type IntervalName = string;\nexport type IntervalLiteral = IntervalName | Pitch | NamedPitch;\n\ntype Quality =\n  | \"dddd\"\n  | \"ddd\"\n  | \"dd\"\n  | \"d\"\n  | \"m\"\n  | \"M\"\n  | \"P\"\n  | \"A\"\n  | \"AA\"\n  | \"AAA\"\n  | \"AAAA\";\ntype Type = \"perfectable\" | \"majorable\";\n\nexport interface Interval extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: IntervalName;\n  readonly num: number;\n  readonly q: Quality;\n  readonly type: Type;\n  readonly step: number;\n  readonly alt: number;\n  readonly dir: Direction;\n  readonly simple: number;\n  readonly semitones: number;\n  readonly chroma: number;\n  readonly coord: IntervalCoordinates;\n  readonly oct: number;\n}\n\nconst NoInterval: Interval = Object.freeze({\n  empty: true,\n  name: \"\",\n  num: NaN,\n  q: \"\" as Quality,\n  type: \"\" as Type,\n  step: NaN,\n  alt: NaN,\n  dir: NaN as Direction,\n  simple: NaN,\n  semitones: NaN,\n  chroma: NaN,\n  coord: [] as unknown as IntervalCoordinates,\n  oct: NaN,\n});\n\n// shorthand tonal notation (with quality after number)\nconst INTERVAL_TONAL_REGEX = \"([-+]?\\\\d+)(d{1,4}|m|M|P|A{1,4})\";\n// standard shorthand notation (with quality before number)\nconst INTERVAL_SHORTHAND_REGEX = \"(AA|A|P|M|m|d|dd)([-+]?\\\\d+)\";\nconst REGEX = new RegExp(\n  \"^\" + INTERVAL_TONAL_REGEX + \"|\" + INTERVAL_SHORTHAND_REGEX + \"$\",\n);\n\ntype IntervalTokens = [string, string];\n\n/**\n * @private\n */\nexport function tokenizeInterval(str?: IntervalName): IntervalTokens {\n  const m = REGEX.exec(`${str}`);\n  if (m === null) {\n    return [\"\", \"\"];\n  }\n  return m[1] ? [m[1], m[2]] : [m[4], m[3]];\n}\n\nconst cache: { [key in string]: Interval } = {};\n\n/**\n * Get interval properties. It returns an object with:\n *\n * - name: the interval name\n * - num: the interval number\n * - type: 'perfectable' or 'majorable'\n * - q: the interval quality (d, m, M, A)\n * - dir: interval direction (1 ascending, -1 descending)\n * - simple: the simplified number\n * - semitones: the size in semitones\n * - chroma: the interval chroma\n *\n * @param {string} interval - the interval name\n * @return {Object} the interval properties\n *\n * @example\n * import { interval } from '@tonaljs/core'\n * interval('P5').semitones // => 7\n * interval('m3').type // => 'majorable'\n */\nexport function interval(src: IntervalLiteral): Interval {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : isPitch(src)\n      ? interval(pitchName(src))\n      : isNamedPitch(src)\n        ? interval(src.name)\n        : NoInterval;\n}\n\nconst SIZES = [0, 2, 4, 5, 7, 9, 11];\nconst TYPES = \"PMMPPMM\";\nfunction parse(str?: string): Interval {\n  const tokens = tokenizeInterval(str);\n  if (tokens[0] === \"\") {\n    return NoInterval;\n  }\n  const num = +tokens[0];\n  const q = tokens[1] as Quality;\n  const step = (Math.abs(num) - 1) % 7;\n  const t = TYPES[step];\n  if (t === \"M\" && q === \"P\") {\n    return NoInterval;\n  }\n  const type = t === \"M\" ? \"majorable\" : \"perfectable\";\n\n  const name = \"\" + num + q;\n  const dir = num < 0 ? -1 : 1;\n  const simple = num === 8 || num === -8 ? num : dir * (step + 1);\n  const alt = qToAlt(type, q);\n  const oct = Math.floor((Math.abs(num) - 1) / 7);\n  const semitones = dir * (SIZES[step] + alt + 12 * oct);\n  const chroma = (((dir * (SIZES[step] + alt)) % 12) + 12) % 12;\n  const coord = coordinates({ step, alt, oct, dir }) as IntervalCoordinates;\n  return {\n    empty: false,\n    name,\n    num,\n    q,\n    step,\n    alt,\n    dir,\n    type,\n    simple,\n    semitones,\n    chroma,\n    coord,\n    oct,\n  };\n}\n\n/**\n * @private\n *\n * forceDescending is used in the case of unison (#243)\n */\nexport function coordToInterval(\n  coord: PitchCoordinates,\n  forceDescending?: boolean,\n): Interval {\n  const [f, o = 0] = coord;\n  const isDescending = f * 7 + o * 12 < 0;\n  const ivl: IntervalCoordinates =\n    forceDescending || isDescending ? [-f, -o, -1] : [f, o, 1];\n  return interval(pitch(ivl)) as Interval;\n}\n\nfunction qToAlt(type: Type, q: string): number {\n  return (q === \"M\" && type === \"majorable\") ||\n    (q === \"P\" && type === \"perfectable\")\n    ? 0\n    : q === \"m\" && type === \"majorable\"\n      ? -1\n      : /^A+$/.test(q)\n        ? q.length\n        : /^d+$/.test(q)\n          ? -1 * (type === \"perfectable\" ? q.length : q.length + 1)\n          : 0;\n}\n\n// return the interval name of a pitch\nfunction pitchName(props: Pitch): string {\n  const { step, alt, oct = 0, dir } = props;\n  if (!dir) {\n    return \"\";\n  }\n  const calcNum = step + 1 + 7 * oct;\n  // this is an edge case: descending pitch class unison (see #243)\n  const num = calcNum === 0 ? step + 1 : calcNum;\n  const d = dir < 0 ? \"-\" : \"\";\n  const type = TYPES[step] === \"M\" ? \"majorable\" : \"perfectable\";\n  const name = d + num + altToQ(type, alt);\n  return name;\n}\n\nfunction altToQ(type: Type, alt: number): Quality {\n  if (alt === 0) {\n    return type === \"majorable\" ? \"M\" : \"P\";\n  } else if (alt === -1 && type === \"majorable\") {\n    return \"m\";\n  } else if (alt > 0) {\n    return fillStr(\"A\", alt) as Quality;\n  } else {\n    return fillStr(\"d\", type === \"perfectable\" ? alt : alt + 1) as Quality;\n  }\n}\n","import {\n  coordinates,\n  isNamedPitch,\n  isPitch,\n  NamedPitch,\n  Pitch,\n  pitch,\n  PitchCoordinates,\n} from \"@tonaljs/pitch\";\n\nconst fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport type NoteWithOctave = string;\nexport type PcName = string;\nexport type NoteName = NoteWithOctave | PcName;\nexport type NoteLiteral = NoteName | Pitch | NamedPitch;\n\nexport interface Note extends Pitch, NamedPitch {\n  readonly empty: boolean;\n  readonly name: NoteName;\n  readonly letter: string;\n  readonly acc: string;\n  readonly pc: PcName;\n  readonly chroma: number;\n  readonly height: number;\n  readonly coord: PitchCoordinates;\n  readonly midi: number | null;\n  readonly freq: number | null;\n}\n\nconst NoNote: Note = Object.freeze({\n  empty: true,\n  name: \"\",\n  letter: \"\",\n  acc: \"\",\n  pc: \"\",\n  step: NaN,\n  alt: NaN,\n  chroma: NaN,\n  height: NaN,\n  coord: [] as unknown as PitchCoordinates,\n  midi: null,\n  freq: null,\n});\n\nconst cache: Map<NoteLiteral | undefined, Note> = new Map();\n\nexport const stepToLetter = (step: number) => \"CDEFGAB\".charAt(step);\nexport const altToAcc = (alt: number): string =>\n  alt < 0 ? fillStr(\"b\", -alt) : fillStr(\"#\", alt);\nexport const accToAlt = (acc: string): number =>\n  acc[0] === \"b\" ? -acc.length : acc.length;\n\n/**\n * Given a note literal (a note name or a note object), returns the Note object\n * @example\n * note('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport function note(src: NoteLiteral): Note {\n  const stringSrc = JSON.stringify(src);\n\n  const cached = cache.get(stringSrc);\n  if (cached) {\n    return cached;\n  }\n\n  const value =\n    typeof src === \"string\"\n      ? parse(src)\n      : isPitch(src)\n        ? note(pitchName(src))\n        : isNamedPitch(src)\n          ? note(src.name)\n          : NoNote;\n  cache.set(stringSrc, value);\n  return value;\n}\n\ntype NoteTokens = [string, string, string, string];\n\nconst REGEX = /^([a-gA-G]?)(#{1,}|b{1,}|x{1,}|)(-?\\d*)\\s*(.*)$/;\n\n/**\n * @private\n */\nexport function tokenizeNote(str: string): NoteTokens {\n  const m = REGEX.exec(str) as string[];\n  return m\n    ? [m[1].toUpperCase(), m[2].replace(/x/g, \"##\"), m[3], m[4]]\n    : [\"\", \"\", \"\", \"\"];\n}\n\n/**\n * @private\n */\nexport function coordToNote(noteCoord: PitchCoordinates): Note {\n  return note(pitch(noteCoord)) as Note;\n}\n\nconst mod = (n: number, m: number) => ((n % m) + m) % m;\n\nconst SEMI = [0, 2, 4, 5, 7, 9, 11];\nfunction parse(noteName: NoteName): Note {\n  const tokens = tokenizeNote(noteName);\n  if (tokens[0] === \"\" || tokens[3] !== \"\") {\n    return NoNote;\n  }\n\n  const letter = tokens[0];\n  const acc = tokens[1];\n  const octStr = tokens[2];\n\n  const step = (letter.charCodeAt(0) + 3) % 7;\n  const alt = accToAlt(acc);\n  const oct = octStr.length ? +octStr : undefined;\n  const coord = coordinates({ step, alt, oct });\n\n  const name = letter + acc + octStr;\n  const pc = letter + acc;\n  const chroma = (SEMI[step] + alt + 120) % 12;\n  const height =\n    oct === undefined\n      ? mod(SEMI[step] + alt, 12) - 12 * 99\n      : SEMI[step] + alt + 12 * (oct + 1);\n  const midi = height >= 0 && height <= 127 ? height : null;\n  const freq = oct === undefined ? null : Math.pow(2, (height - 69) / 12) * 440;\n\n  return {\n    empty: false,\n    acc,\n    alt,\n    chroma,\n    coord,\n    freq,\n    height,\n    letter,\n    midi,\n    name,\n    oct,\n    pc,\n    step,\n  };\n}\n\nfunction pitchName(props: Pitch): NoteName {\n  const { step, alt, oct } = props;\n  const letter = stepToLetter(step);\n  if (!letter) {\n    return \"\";\n  }\n\n  const pc = letter + altToAcc(alt);\n  return oct || oct === 0 ? pc + oct : pc;\n}\n","import { PitchCoordinates } from \"@tonaljs/pitch\";\nimport {\n  IntervalLiteral,\n  IntervalName,\n  interval as asInterval,\n  coordToInterval,\n} from \"@tonaljs/pitch-interval\";\nimport {\n  NoteLiteral,\n  NoteName,\n  note as asNote,\n  coordToNote,\n} from \"@tonaljs/pitch-note\";\n\n/**\n * Transpose a note by an interval.\n *\n * @param {string} note - the note or note name\n * @param {string} interval - the interval or interval name\n * @return {string} the transposed note name or empty string if not valid notes\n * @example\n * import { transpose } from \"@tonaljs/core\"\n * transpose(\"d3\", \"3M\") // => \"F#3\"\n * transpose(\"D\", \"3M\") // => \"F#\"\n * [\"C\", \"D\", \"E\", \"F\", \"G\"].map(pc => transpose(pc, \"M3)) // => [\"E\", \"F#\", \"G#\", \"A\", \"B\"]\n */\nexport function transpose(\n  noteName: NoteLiteral,\n  intervalName: IntervalLiteral | [number, number],\n): NoteName {\n  const note = asNote(noteName);\n  const intervalCoord = Array.isArray(intervalName)\n    ? intervalName\n    : asInterval(intervalName).coord;\n  if (note.empty || !intervalCoord || intervalCoord.length < 2) {\n    return \"\";\n  }\n  const noteCoord = note.coord;\n  const tr: PitchCoordinates =\n    noteCoord.length === 1\n      ? [noteCoord[0] + intervalCoord[0]]\n      : [noteCoord[0] + intervalCoord[0], noteCoord[1] + intervalCoord[1]];\n  return coordToNote(tr).name;\n}\n\n// Private\nexport function tonicIntervalsTransposer(\n  intervals: string[],\n  tonic: string | undefined | null,\n) {\n  const len = intervals.length;\n  return (normalized: number) => {\n    if (!tonic) return \"\";\n    const index =\n      normalized < 0 ? (len - (-normalized % len)) % len : normalized % len;\n    const octaves = Math.floor(normalized / len);\n    const root = transpose(tonic, [0, octaves]);\n    return transpose(root, intervals[index]);\n  };\n}\n\n/**\n * Find the interval distance between two notes or coord classes.\n *\n * To find distance between coord classes, both notes must be coord classes and\n * the interval is always ascending\n *\n * @param {Note|string} from - the note or note name to calculate distance from\n * @param {Note|string} to - the note or note name to calculate distance to\n * @return {string} the interval name or empty string if not valid notes\n *\n */\nexport function distance(\n  fromNote: NoteLiteral,\n  toNote: NoteLiteral,\n): IntervalName {\n  const from = asNote(fromNote);\n  const to = asNote(toNote);\n  if (from.empty || to.empty) {\n    return \"\";\n  }\n\n  const fcoord = from.coord;\n  const tcoord = to.coord;\n  const fifths = tcoord[0] - fcoord[0];\n  const octs =\n    fcoord.length === 2 && tcoord.length === 2\n      ? tcoord[1] - fcoord[1]\n      : -Math.floor((fifths * 7) / 12);\n\n  // If it's unison and not pitch class, it can be descending interval (#243)\n  const forceDescending =\n    to.height === from.height &&\n    to.midi !== null &&\n    from.midi !== null &&\n    from.step > to.step;\n  return coordToInterval([fifths, octs], forceDescending).name;\n}\n","import { IntervalCoordinates, NoteCoordinates } from \"@tonaljs/pitch\";\nimport { distance as dist } from \"@tonaljs/pitch-distance\";\nimport {\n  IntervalName,\n  coordToInterval,\n  interval as props,\n} from \"@tonaljs/pitch-interval\";\n\n/**\n * Get the natural list of names\n */\nexport function names(): IntervalName[] {\n  return \"1P 2M 3M 4P 5P 6m 7m\".split(\" \");\n}\n\n/**\n * Get properties of an interval\n *\n * @function\n * @example\n * Interval.get('P4') // => {\"alt\": 0,  \"dir\": 1,  \"name\": \"4P\", \"num\": 4, \"oct\": 0, \"q\": \"P\", \"semitones\": 5, \"simple\": 4, \"step\": 3, \"type\": \"perfectable\"}\n */\nexport const get = props;\n\n/**\n * Get name of an interval\n *\n * @function\n * @example\n * Interval.name('4P') // => \"4P\"\n * Interval.name('P4') // => \"4P\"\n * Interval.name('C4') // => \"\"\n */\nexport const name = (name: string) => props(name).name;\n\n/**\n * Get semitones of an interval\n * @function\n * @example\n * Interval.semitones('P4') // => 5\n */\nexport const semitones = (name: string) => props(name).semitones;\n\n/**\n * Get quality of an interval\n * @function\n * @example\n * Interval.quality('P4') // => \"P\"\n */\nexport const quality = (name: string) => props(name).q;\n\n/**\n * Get number of an interval\n * @function\n * @example\n * Interval.num('P4') // => 4\n */\nexport const num = (name: string) => props(name).num;\n\n/**\n * Get the simplified version of an interval.\n *\n * @function\n * @param {string} interval - the interval to simplify\n * @return {string} the simplified interval\n *\n * @example\n * Interval.simplify(\"9M\") // => \"2M\"\n * Interval.simplify(\"2M\") // => \"2M\"\n * Interval.simplify(\"-2M\") // => \"7m\"\n * [\"8P\", \"9M\", \"10M\", \"11P\", \"12P\", \"13M\", \"14M\", \"15P\"].map(Interval.simplify)\n * // => [ \"8P\", \"2M\", \"3M\", \"4P\", \"5P\", \"6M\", \"7M\", \"8P\" ]\n */\nexport function simplify(name: IntervalName): IntervalName {\n  const i = props(name);\n  return i.empty ? \"\" : i.simple + i.q;\n}\n\n/**\n * Get the inversion (https://en.wikipedia.org/wiki/Inversion_(music)#Intervals)\n * of an interval.\n *\n * @function\n * @param {string} interval - the interval to invert in interval shorthand\n * notation or interval array notation\n * @return {string} the inverted interval\n *\n * @example\n * Interval.invert(\"3m\") // => \"6M\"\n * Interval.invert(\"2M\") // => \"7m\"\n */\nexport function invert(name: IntervalName): IntervalName {\n  const i = props(name);\n  if (i.empty) {\n    return \"\";\n  }\n  const step = (7 - i.step) % 7;\n  const alt = i.type === \"perfectable\" ? -i.alt : -(i.alt + 1);\n  return props({ step, alt, oct: i.oct, dir: i.dir }).name;\n}\n\n// interval numbers\nconst IN = [1, 2, 2, 3, 3, 4, 5, 5, 6, 6, 7, 7];\n// interval qualities\nconst IQ = \"P m M m M P d P m M m M\".split(\" \");\n\n/**\n * Get interval name from semitones number. Since there are several interval\n * names for the same number, the name it's arbitrary, but deterministic.\n *\n * @param {Integer} num - the number of semitones (can be negative)\n * @return {string} the interval name\n * @example\n * Interval.fromSemitones(7) // => \"5P\"\n * Interval.fromSemitones(-7) // => \"-5P\"\n */\nexport function fromSemitones(semitones: number): IntervalName {\n  const d = semitones < 0 ? -1 : 1;\n  const n = Math.abs(semitones);\n  const c = n % 12;\n  const o = Math.floor(n / 12);\n  return d * (IN[c] + 7 * o) + IQ[c];\n}\n\n/**\n * Find interval between two notes\n *\n * @example\n * Interval.distance(\"C4\", \"G4\"); // => \"5P\"\n */\nexport const distance = dist;\n\n/**\n * Adds two intervals\n *\n * @function\n * @param {string} interval1\n * @param {string} interval2\n * @return {string} the added interval name\n * @example\n * Interval.add(\"3m\", \"5P\") // => \"7m\"\n */\nexport const add = combinator((a, b) => [a[0] + b[0], a[1] + b[1]]);\n\n/**\n * Returns a function that adds an interval\n *\n * @function\n * @example\n * ['1P', '2M', '3M'].map(Interval.addTo('5P')) // => [\"5P\", \"6M\", \"7M\"]\n */\nexport const addTo = (interval: string) => (other: string) =>\n  add(interval, other);\n\n/**\n * Subtracts two intervals\n *\n * @function\n * @param {string} minuendInterval\n * @param {string} subtrahendInterval\n * @return {string} the subtracted interval name\n * @example\n * Interval.subtract('5P', '3M') // => '3m'\n * Interval.subtract('3M', '5P') // => '-3m'\n */\nexport const subtract = combinator((a, b) => [a[0] - b[0], a[1] - b[1]]);\n\nexport function transposeFifths(\n  interval: IntervalName,\n  fifths: number,\n): IntervalName {\n  const ivl = get(interval);\n  if (ivl.empty) return \"\";\n\n  const [nFifths, nOcts, dir] = ivl.coord;\n  return coordToInterval([nFifths + fifths, nOcts, dir]).name;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  num,\n  semitones,\n  quality,\n  fromSemitones,\n  distance,\n  invert,\n  simplify,\n  add,\n  addTo,\n  subtract,\n  transposeFifths,\n};\n\n//// PRIVATE ////\n\ntype Operation = (\n  a: IntervalCoordinates,\n  b: IntervalCoordinates,\n) => NoteCoordinates;\n\nfunction combinator(fn: Operation) {\n  return (a: IntervalName, b: IntervalName): IntervalName | undefined => {\n    const coordA = props(a).coord;\n    const coordB = props(b).coord;\n    if (coordA && coordB) {\n      const coord = fn(coordA, coordB);\n      return coordToInterval(coord).name;\n    }\n  };\n}\n","import { isNamedPitch } from \"@tonaljs/pitch\";\n\nexport * from \"@tonaljs/pitch\";\nexport * from \"@tonaljs/pitch-distance\";\nexport * from \"@tonaljs/pitch-interval\";\nexport * from \"@tonaljs/pitch-note\";\n\nexport const fillStr = (s: string, n: number) => Array(Math.abs(n) + 1).join(s);\n\nexport function deprecate<\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  ResultFn extends (this: any, ...newArgs: any[]) => ReturnType<ResultFn>,\n>(original: string, alternative: string, fn: ResultFn) {\n  return function (this: unknown, ...args: unknown[]): ReturnType<ResultFn> {\n    // tslint:disable-next-line\n    console.warn(`${original} is deprecated. Use ${alternative}.`);\n    return fn.apply(this, args);\n  };\n}\n\nexport const isNamed = deprecate(\"isNamed\", \"isNamedPitch\", isNamedPitch);\n","import { NoteName, note as props } from \"@tonaljs/core\";\n\ntype Midi = number;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isMidi(arg: any): arg is Midi {\n  return +arg >= 0 && +arg <= 127;\n}\n\n/**\n * Get the note midi number (a number between 0 and 127)\n *\n * It returns undefined if not valid note name\n *\n * @function\n * @param {string|number} note - the note name or midi number\n * @return {Integer} the midi number or undefined if not valid note\n * @example\n * import { toMidi } from '@tonaljs/midi'\n * toMidi(\"C4\") // => 60\n * toMidi(60) // => 60\n * toMidi('60') // => 60\n */\nexport function toMidi(note: NoteName | number): number | null {\n  if (isMidi(note)) {\n    return +note;\n  }\n  const n = props(note);\n  return n.empty ? null : n.midi;\n}\n\n/**\n * Get the frequency in hertzs from midi number\n *\n * @param {number} midi - the note midi number\n * @param {number} [tuning = 440] - A4 tuning frequency in Hz (440 by default)\n * @return {number} the frequency or null if not valid note midi\n * @example\n * import { midiToFreq} from '@tonaljs/midi'\n * midiToFreq(69) // => 440\n */\nexport function midiToFreq(midi: number, tuning = 440): number {\n  return Math.pow(2, (midi - 69) / 12) * tuning;\n}\n\nconst L2 = Math.log(2);\nconst L440 = Math.log(440);\n\n/**\n * Get the midi number from a frequency in hertz. The midi number can\n * contain decimals (with two digits precision)\n *\n * @param {number} frequency\n * @return {number}\n * @example\n * import { freqToMidi} from '@tonaljs/midi'\n * freqToMidi(220)); //=> 57\n * freqToMidi(261.62)); //=> 60\n * freqToMidi(261)); //=> 59.96\n */\nexport function freqToMidi(freq: number): number {\n  const v = (12 * (Math.log(freq) - L440)) / L2 + 69;\n  return Math.round(v * 100) / 100;\n}\n\nexport interface ToNoteNameOptions {\n  pitchClass?: boolean;\n  sharps?: boolean;\n}\n\nconst SHARPS = \"C C# D D# E F F# G G# A A# B\".split(\" \");\nconst FLATS = \"C Db D Eb E F Gb G Ab A Bb B\".split(\" \");\n/**\n * Given a midi number, returns a note name. The altered notes will have\n * flats unless explicitly set with the optional `useSharps` parameter.\n *\n * @function\n * @param {number} midi - the midi note number\n * @param {Object} options = default: `{ sharps: false, pitchClass: false }`\n * @param {boolean} useSharps - (Optional) set to true to use sharps instead of flats\n * @return {string} the note name\n * @example\n * import { midiToNoteName } from '@tonaljs/midi'\n * midiToNoteName(61) // => \"Db4\"\n * midiToNoteName(61, { pitchClass: true }) // => \"Db\"\n * midiToNoteName(61, { sharps: true }) // => \"C#4\"\n * midiToNoteName(61, { pitchClass: true, sharps: true }) // => \"C#\"\n * // it rounds to nearest note\n * midiToNoteName(61.7) // => \"D4\"\n */\nexport function midiToNoteName(midi: number, options: ToNoteNameOptions = {}) {\n  if (isNaN(midi) || midi === -Infinity || midi === Infinity) return \"\";\n  midi = Math.round(midi);\n  const pcs = options.sharps === true ? SHARPS : FLATS;\n  const pc = pcs[midi % 12];\n  if (options.pitchClass) {\n    return pc;\n  }\n  const o = Math.floor(midi / 12) - 1;\n  return pc + o;\n}\n\nexport function chroma(midi: number): number {\n  return midi % 12;\n}\n\nfunction pcsetFromChroma(chroma: string): number[] {\n  return chroma.split(\"\").reduce((pcset, val, index) => {\n    if (index < 12 && val === \"1\") pcset.push(index);\n    return pcset;\n  }, [] as number[]);\n}\n\nfunction pcsetFromMidi(midi: number[]): number[] {\n  return midi\n    .map(chroma)\n    .sort((a, b) => a - b)\n    .filter((n, i, a) => i === 0 || n !== a[i - 1]);\n}\n\n/**\n * Given a list of midi numbers, returns the pitch class set (unique chroma numbers)\n * @param midi\n * @example\n *\n */\nexport function pcset(notes: number[] | string): number[] {\n  return Array.isArray(notes) ? pcsetFromMidi(notes) : pcsetFromChroma(notes);\n}\n\nexport function pcsetNearest(notes: number[] | string) {\n  const set = pcset(notes);\n  return (midi: number): number | undefined => {\n    const ch = chroma(midi);\n    for (let i = 0; i < 12; i++) {\n      if (set.includes(ch + i)) return midi + i;\n      if (set.includes(ch - i)) return midi - i;\n    }\n    return undefined;\n  };\n}\n\nexport function pcsetSteps(notes: number[] | string, tonic: number) {\n  const set = pcset(notes);\n  const len = set.length;\n  return (step: number): number => {\n    const index = step < 0 ? (len - (-step % len)) % len : step % len;\n    const octaves = Math.floor(step / len);\n    return set[index] + octaves * 12 + tonic;\n  };\n}\n\nexport function pcsetDegrees(notes: number[] | string, tonic: number) {\n  const steps = pcsetSteps(notes, tonic);\n  return (degree: number): number | undefined => {\n    if (degree === 0) return undefined;\n    return steps(degree > 0 ? degree - 1 : degree);\n  };\n}\n\nexport default {\n  chroma,\n  freqToMidi,\n  isMidi,\n  midiToFreq,\n  midiToNoteName,\n  pcsetNearest,\n  pcset,\n  pcsetDegrees,\n  pcsetSteps,\n  toMidi,\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport {\n  IntervalName,\n  Note,\n  NoteLiteral,\n  NoteName,\n  Pitch,\n  transpose as _tr,\n  note as props,\n} from \"@tonaljs/core\";\nimport { freqToMidi, midiToNoteName } from \"@tonaljs/midi\";\n\nconst NAMES = [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"];\n\nconst toName = (n: Note) => n.name;\nconst onlyNotes = (array: any[]) =>\n  array.map(props).filter((n) => !n.empty) as Note[];\n\n/**\n * Return the natural note names without octave\n * @function\n * @example\n * Note.names(); // => [\"C\", \"D\", \"E\", \"F\", \"G\", \"A\", \"B\"]\n */\nexport function names(array?: any[]): string[] {\n  if (array === undefined) {\n    return NAMES.slice();\n  } else if (!Array.isArray(array)) {\n    return [];\n  } else {\n    return onlyNotes(array).map(toName);\n  }\n}\n\n/**\n * Get a note from a note name\n *\n * @function\n * @example\n * Note.get('Bb4') // => { name: \"Bb4\", midi: 70, chroma: 10, ... }\n */\nexport const get = props;\n\n/**\n * Get the note name\n * @function\n */\nexport const name = (note: NoteLiteral) => get(note).name;\n\n/**\n * Get the note pitch class name\n * @function\n */\nexport const pitchClass = (note: NoteLiteral) => get(note).pc;\n\n/**\n * Get the note accidentals\n * @function\n */\nexport const accidentals = (note: NoteLiteral) => get(note).acc;\n\n/**\n * Get the note octave\n * @function\n */\nexport const octave = (note: NoteLiteral) => get(note).oct;\n\n/**\n * Get the note midi\n * @function\n */\nexport const midi = (note: NoteLiteral) => get(note).midi;\n\n/**\n * Get the note midi\n * @function\n */\nexport const freq = (note: NoteLiteral) => get(note).freq;\n\n/**\n * Get the note chroma\n * @function\n */\nexport const chroma = (note: NoteLiteral) => get(note).chroma;\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidi(61) // => \"Db4\"\n * Note.fromMidi(61.7) // => \"D4\"\n */\nexport function fromMidi(midi: number) {\n  return midiToNoteName(midi);\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreq(freq: number) {\n  return midiToNoteName(freqToMidi(freq));\n}\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n */\nexport function fromFreqSharps(freq: number) {\n  return midiToNoteName(freqToMidi(freq), { sharps: true });\n}\n\n/**\n * Given a midi number, returns a note name. Uses flats for altered notes.\n *\n * @function\n * @param {number} midi - the midi note number\n * @return {string} the note name\n * @example\n * Note.fromMidiSharps(61) // => \"C#4\"\n */\n\nexport function fromMidiSharps(midi: number) {\n  return midiToNoteName(midi, { sharps: true });\n}\n\n/**\n * Transpose a note by an interval\n */\nexport const transpose = _tr;\nexport const tr = _tr;\n\n/**\n * Transpose by an interval.\n * @function\n * @param {string} interval\n * @return {function} a function that transposes by the given interval\n * @example\n * [\"C\", \"D\", \"E\"].map(Note.transposeBy(\"5P\"));\n * // => [\"G\", \"A\", \"B\"]\n */\nexport const transposeBy = (interval: IntervalName) => (note: NoteName) =>\n  transpose(note, interval);\nexport const trBy = transposeBy;\n\n/**\n * Transpose from a note\n * @function\n * @param {string} note\n * @return {function}  a function that transposes the the note by an interval\n * [\"1P\", \"3M\", \"5P\"].map(Note.transposeFrom(\"C\"));\n * // => [\"C\", \"E\", \"G\"]\n */\nexport const transposeFrom = (note: NoteName) => (interval: IntervalName) =>\n  transpose(note, interval);\nexport const trFrom = transposeFrom;\n\n/**\n * Transpose a note by a number of perfect fifths.\n *\n * @function\n * @param {string} note - the note name\n * @param {number} fifhts - the number of fifths\n * @return {string} the transposed note name\n *\n * @example\n * import { transposeFifths } from \"@tonaljs/note\"\n * transposeFifths(\"G4\", 1) // => \"D\"\n * [0, 1, 2, 3, 4].map(fifths => transposeFifths(\"C\", fifths)) // => [\"C\", \"G\", \"D\", \"A\", \"E\"]\n */\nexport function transposeFifths(noteName: NoteName, fifths: number): NoteName {\n  return transpose(noteName, [fifths, 0]);\n}\nexport const trFifths = transposeFifths;\n\n// TODO: documentation\nexport function transposeOctaves(\n  noteName: NoteName,\n  octaves: number,\n): NoteName {\n  return transpose(noteName, [0, octaves]);\n}\n\nexport type NoteComparator = (a: Note, b: Note) => number;\n\nexport const ascending: NoteComparator = (a, b) => a.height - b.height;\nexport const descending: NoteComparator = (a, b) => b.height - a.height;\n\nexport function sortedNames(\n  notes: any[],\n  comparator?: NoteComparator,\n): string[] {\n  comparator = comparator || ascending;\n  return onlyNotes(notes).sort(comparator).map(toName);\n}\n\nexport function sortedUniqNames(notes: any[]): string[] {\n  return sortedNames(notes, ascending).filter(\n    (n, i, a) => i === 0 || n !== a[i - 1],\n  );\n}\n\n/**\n * Simplify a note\n *\n * @function\n * @param {string} note - the note to be simplified\n * - sameAccType: default true. Use same kind of accidentals that source\n * @return {string} the simplified note or '' if not valid note\n * @example\n * simplify(\"C##\") // => \"D\"\n * simplify(\"C###\") // => \"D#\"\n * simplify(\"C###\")\n * simplify(\"B#4\") // => \"C5\"\n */\nexport const simplify = (noteName: NoteName | Pitch): string => {\n  const note = get(noteName);\n  if (note.empty) {\n    return \"\";\n  }\n  return midiToNoteName(note.midi || note.chroma, {\n    sharps: note.alt > 0,\n    pitchClass: note.midi === null,\n  });\n};\n/**\n * Get enharmonic of a note\n *\n * @function\n * @param {string} note\n * @param [string] - [optional] Destination pitch class\n * @return {string} the enharmonic note name or '' if not valid note\n * @example\n * Note.enharmonic(\"Db\") // => \"C#\"\n * Note.enharmonic(\"C\") // => \"C\"\n * Note.enharmonic(\"F2\",\"E#\") // => \"E#2\"\n */\nexport function enharmonic(noteName: string, destName?: string) {\n  const src = get(noteName);\n  if (src.empty) {\n    return \"\";\n  }\n\n  // destination: use given or generate one\n  const dest = get(\n    destName ||\n      midiToNoteName(src.midi || src.chroma, {\n        sharps: src.alt < 0,\n        pitchClass: true,\n      }),\n  );\n\n  // ensure destination is valid\n  if (dest.empty || dest.chroma !== src.chroma) {\n    return \"\";\n  }\n\n  // if src has no octave, no need to calculate anything else\n  if (src.oct === undefined) {\n    return dest.pc;\n  }\n\n  // detect any octave overflow\n  const srcChroma = src.chroma - src.alt;\n  const destChroma = dest.chroma - dest.alt;\n  const destOctOffset =\n    srcChroma > 11 || destChroma < 0\n      ? -1\n      : srcChroma < 0 || destChroma > 11\n        ? +1\n        : 0;\n  // calculate the new octave\n  const destOct = src.oct + destOctOffset;\n  return dest.pc + destOct;\n}\n\nexport default {\n  names,\n  get,\n  name,\n  pitchClass,\n  accidentals,\n  octave,\n  midi,\n  ascending,\n  descending,\n  sortedNames,\n  sortedUniqNames,\n  fromMidi,\n  fromMidiSharps,\n  freq,\n  fromFreq,\n  fromFreqSharps,\n  chroma,\n  transpose,\n  tr,\n  transposeBy,\n  trBy,\n  transposeFrom,\n  trFrom,\n  transposeFifths,\n  transposeOctaves,\n  trFifths,\n  simplify,\n  enharmonic,\n};\n","/* eslint-disable @typescript-eslint/no-explicit-any */\n// ascending range\nfunction ascR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = n + b);\n  return a;\n}\n// descending range\nfunction descR(b: number, n: number) {\n  const a = [];\n  // tslint:disable-next-line:curly\n  for (; n--; a[n] = b - n);\n  return a;\n}\n\n/**\n * Creates a numeric range\n *\n * @param {number} from\n * @param {number} to\n * @return {Array<number>}\n *\n * @example\n * range(-2, 2) // => [-2, -1, 0, 1, 2]\n * range(2, -2) // => [2, 1, 0, -1, -2]\n */\nexport function range(from: number, to: number): number[] {\n  return from < to ? ascR(from, to - from + 1) : descR(from, from - to + 1);\n}\n\n/**\n * Rotates a list a number of times. It\"s completly agnostic about the\n * contents of the list.\n *\n * @param {Integer} times - the number of rotations\n * @param {Array} collection\n * @return {Array} the rotated collection\n *\n * @example\n * rotate(1, [1, 2, 3]) // => [2, 3, 1]\n */\nexport function rotate<T>(times: number, arr: T[]): T[] {\n  const len = arr.length;\n  const n = ((times % len) + len) % len;\n  return arr.slice(n, len).concat(arr.slice(0, n));\n}\n\n/**\n * Return a copy of the collection with the null values removed\n * @function\n * @param {Array} collection\n * @return {Array}\n *\n * @example\n * compact([\"a\", \"b\", null, \"c\"]) // => [\"a\", \"b\", \"c\"]\n */\nexport function compact(arr: any[]): any[] {\n  return arr.filter((n) => n === 0 || n);\n}\n\n/**\n * Randomizes the order of the specified collection in-place, using the Fisher–Yates shuffle.\n *\n * @function\n * @param {Array} collection\n * @return {Array} the collection shuffled\n *\n * @example\n * shuffle([\"C\", \"D\", \"E\", \"F\"]) // => [...]\n */\nexport function shuffle(arr: any[], rnd = Math.random): any[] {\n  let i: number;\n  let t: any;\n  let m: number = arr.length;\n  while (m) {\n    i = Math.floor(rnd() * m--);\n    t = arr[m];\n    arr[m] = arr[i];\n    arr[i] = t;\n  }\n  return arr;\n}\n\n/**\n * Get all permutations of an collection\n *\n * @param {Array} collection - the collection\n * @return {Array<Array>} an collection with all the permutations\n * @example\n * permutations([\"a\", \"b\", \"c\"])) // =>\n * [\n *   [\"a\", \"b\", \"c\"],\n *   [\"b\", \"a\", \"c\"],\n *   [\"b\", \"c\", \"a\"],\n *   [\"a\", \"c\", \"b\"],\n *   [\"c\", \"a\", \"b\"],\n *   [\"c\", \"b\", \"a\"]\n * ]\n */\nexport function permutations(arr: any[]): any[] {\n  if (arr.length === 0) {\n    return [[]];\n  }\n  return permutations(arr.slice(1)).reduce((acc, perm) => {\n    return acc.concat(\n      arr.map((e, pos) => {\n        const newPerm = perm.slice();\n        newPerm.splice(pos, 0, arr[0]);\n        return newPerm;\n      }),\n    );\n  }, []);\n}\n\nexport default {\n  compact,\n  permutations,\n  range,\n  rotate,\n  shuffle,\n};\n","import { compact, range, rotate } from \"@tonaljs/collection\";\nimport {\n  Interval,\n  IntervalName,\n  NotFound,\n  Note,\n  NoteName,\n  deprecate,\n  interval,\n  note,\n  transpose,\n} from \"@tonaljs/core\";\n\n/**\n * The properties of a pitch class set\n * @param {number} num - a number between 1 and 4095 (both included) that\n * uniquely identifies the set. It's the decimal number of the chrom.\n * @param {string} chroma - a string representation of the set: a 12-char string\n * with either \"1\" or \"0\" as characters, representing a pitch class or not\n * for the given position in the octave. For example, a \"1\" at index 0 means 'C',\n * a \"1\" at index 2 means 'D', and so on...\n * @param {string} normalized - the chroma but shifted to the first 1\n * @param {number} length - the number of notes of the pitch class set\n * @param {IntervalName[]} intervals - the intervals of the pitch class set\n * *starting from C*\n */\nexport interface Pcset {\n  readonly name: string;\n  readonly empty: boolean;\n  readonly setNum: number;\n  readonly chroma: PcsetChroma;\n  readonly normalized: PcsetChroma;\n  readonly intervals: IntervalName[];\n}\n\nexport const EmptyPcset: Pcset = {\n  empty: true,\n  name: \"\",\n  setNum: 0,\n  chroma: \"000000000000\",\n  normalized: \"000000000000\",\n  intervals: [],\n};\n\nexport type PcsetChroma = string;\nexport type PcsetNum = number;\n\n// UTILITIES\nconst setNumToChroma = (num: number): string =>\n  Number(num).toString(2).padStart(12, \"0\");\nconst chromaToNumber = (chroma: string): number => parseInt(chroma, 2);\nconst REGEX = /^[01]{12}$/;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isChroma(set: any): set is PcsetChroma {\n  return REGEX.test(set);\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPcsetNum = (set: any): set is PcsetNum =>\n  typeof set === \"number\" && set >= 0 && set <= 4095;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst isPcset = (set: any): set is Pcset => set && isChroma(set.chroma);\n\nconst cache: { [key in string]: Pcset } = { [EmptyPcset.chroma]: EmptyPcset };\n\n/**\n * A definition of a pitch class set. It could be:\n * - The pitch class set chroma (a 12-length string with only 1s or 0s)\n * - The pitch class set number (an integer between 1 and 4095)\n * - An array of note names\n * - An array of interval names\n */\nexport type Set =\n  | Partial<Pcset>\n  | PcsetChroma\n  | PcsetNum\n  | NoteName[]\n  | IntervalName[];\n\n/**\n * Get the pitch class set of a collection of notes or set number or chroma\n */\nexport function get(src: Set): Pcset {\n  const chroma: PcsetChroma = isChroma(src)\n    ? src\n    : isPcsetNum(src)\n      ? setNumToChroma(src)\n      : Array.isArray(src)\n        ? listToChroma(src)\n        : isPcset(src)\n          ? src.chroma\n          : EmptyPcset.chroma;\n\n  return (cache[chroma] = cache[chroma] || chromaToPcset(chroma));\n}\n\n/**\n * Use Pcset.properties\n * @function\n * @deprecated\n */\nexport const pcset = deprecate(\"Pcset.pcset\", \"Pcset.get\", get);\n\n/**\n * Get pitch class set chroma\n * @function\n * @example\n * Pcset.chroma([\"c\", \"d\", \"e\"]); //=> \"101010000000\"\n */\nexport const chroma = (set: Set) => get(set).chroma;\n\n/**\n * Get intervals (from C) of a set\n * @function\n * @example\n * Pcset.intervals([\"c\", \"d\", \"e\"]); //=>\n */\nconst intervals = (set: Set) => get(set).intervals;\n\n/**\n * Get pitch class set number\n * @function\n * @example\n * Pcset.num([\"c\", \"d\", \"e\"]); //=> 2192\n */\nconst num = (set: Set) => get(set).setNum;\n\nconst IVLS = [\n  \"1P\",\n  \"2m\",\n  \"2M\",\n  \"3m\",\n  \"3M\",\n  \"4P\",\n  \"5d\",\n  \"5P\",\n  \"6m\",\n  \"6M\",\n  \"7m\",\n  \"7M\",\n];\n\n/**\n * @private\n * Get the intervals of a pcset *starting from C*\n * @param {Set} set - the pitch class set\n * @return {IntervalName[]} an array of interval names or an empty array\n * if not a valid pitch class set\n */\nexport function chromaToIntervals(chroma: PcsetChroma): IntervalName[] {\n  const intervals = [];\n  for (let i = 0; i < 12; i++) {\n    // tslint:disable-next-line:curly\n    if (chroma.charAt(i) === \"1\") intervals.push(IVLS[i]);\n  }\n  return intervals;\n}\n\nexport function notes(set: Set): NoteName[] {\n  return get(set).intervals.map((ivl) => transpose(\"C\", ivl));\n}\n\n/**\n * Get a list of all possible pitch class sets (all possible chromas) *having\n * C as root*. There are 2048 different chromas. If you want them with another\n * note you have to transpose it\n *\n * @see http://allthescales.org/\n * @return {Array<PcsetChroma>} an array of possible chromas from '10000000000' to '11111111111'\n */\nexport function chromas(): PcsetChroma[] {\n  return range(2048, 4095).map(setNumToChroma);\n}\n\n/**\n * Given a a list of notes or a pcset chroma, produce the rotations\n * of the chroma discarding the ones that starts with \"0\"\n *\n * This is used, for example, to get all the modes of a scale.\n *\n * @param {Array|string} set - the list of notes or pitchChr of the set\n * @param {boolean} normalize - (Optional, true by default) remove all\n * the rotations that starts with \"0\"\n * @return {Array<string>} an array with all the modes of the chroma\n *\n * @example\n * Pcset.modes([\"C\", \"D\", \"E\"]).map(Pcset.intervals)\n */\nexport function modes(set: Set, normalize = true): PcsetChroma[] {\n  const pcs = get(set);\n\n  const binary = pcs.chroma.split(\"\");\n  return compact(\n    binary.map((_, i) => {\n      const r = rotate(i, binary);\n      return normalize && r[0] === \"0\" ? null : r.join(\"\");\n    }),\n  );\n}\n\n/**\n * Test if two pitch class sets are numentical\n *\n * @param {Array|string} set1 - one of the pitch class sets\n * @param {Array|string} set2 - the other pitch class set\n * @return {boolean} true if they are equal\n * @example\n * Pcset.isEqual([\"c2\", \"d3\"], [\"c5\", \"d2\"]) // => true\n */\nexport function isEqual(s1: Set, s2: Set) {\n  return get(s1).setNum === get(s2).setNum;\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * subset of a given set\n *\n * The function is curryfied.\n *\n * @param {PcsetChroma|NoteName[]} set - the superset to test against (chroma or\n * list of notes)\n * @return{function(PcsetChroma|NoteNames[]): boolean} a function accepting a set\n * to test against (chroma or list of notes)\n * @example\n * const inCMajor = Pcset.isSubsetOf([\"C\", \"E\", \"G\"])\n * inCMajor([\"e6\", \"c4\"]) // => true\n * inCMajor([\"e6\", \"c4\", \"d3\"]) // => false\n */\nexport function isSubsetOf(set: Set) {\n  const s = get(set).setNum;\n\n  return (notes: Set | Pcset) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o & s) === o;\n  };\n}\n\n/**\n * Create a function that test if a collection of notes is a\n * superset of a given set (it contains all notes and at least one more)\n *\n * @param {Set} set - an array of notes or a chroma set string to test against\n * @return {(subset: Set): boolean} a function that given a set\n * returns true if is a subset of the first one\n * @example\n * const extendsCMajor = Pcset.isSupersetOf([\"C\", \"E\", \"G\"])\n * extendsCMajor([\"e6\", \"a\", \"c4\", \"g2\"]) // => true\n * extendsCMajor([\"c6\", \"e4\", \"g3\"]) // => false\n */\nexport function isSupersetOf(set: Set) {\n  const s = get(set).setNum;\n  return (notes: Set) => {\n    const o = get(notes).setNum;\n    // tslint:disable-next-line: no-bitwise\n    return s && s !== o && (o | s) === o;\n  };\n}\n\n/**\n * Test if a given pitch class set includes a note\n *\n * @param {Array<string>} set - the base set to test against\n * @param {string} note - the note to test\n * @return {boolean} true if the note is included in the pcset\n *\n * Can be partially applied\n *\n * @example\n * const isNoteInCMajor = isNoteIncludedIn(['C', 'E', 'G'])\n * isNoteInCMajor('C4') // => true\n * isNoteInCMajor('C#4') // => false\n */\nexport function isNoteIncludedIn(set: Set) {\n  const s = get(set);\n\n  return (noteName: NoteName): boolean => {\n    const n = note(noteName);\n    return s && !n.empty && s.chroma.charAt(n.chroma) === \"1\";\n  };\n}\n\n/** @deprecated use: isNoteIncludedIn */\nexport const includes = isNoteIncludedIn;\n\n/**\n * Filter a list with a pitch class set\n *\n * @param {Array|string} set - the pitch class set notes\n * @param {Array|string} notes - the note list to be filtered\n * @return {Array} the filtered notes\n *\n * @example\n * Pcset.filter([\"C\", \"D\", \"E\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"d2\", \"c3\", \"d3\" ])\n * Pcset.filter([\"C2\"], [\"c2\", \"c#2\", \"d2\", \"c3\", \"c#3\", \"d3\"]) // => [ \"c2\", \"c3\" ])\n */\nexport function filter(set: Set) {\n  const isIncluded = isNoteIncludedIn(set);\n  return (notes: NoteName[]) => {\n    return notes.filter(isIncluded);\n  };\n}\n\nexport default {\n  get,\n  chroma,\n  num,\n  intervals,\n  chromas,\n  isSupersetOf,\n  isSubsetOf,\n  isNoteIncludedIn,\n  isEqual,\n  filter,\n  modes,\n  notes,\n  // deprecated\n  pcset,\n};\n\n//// PRIVATE ////\n\nfunction chromaRotations(chroma: string): string[] {\n  const binary = chroma.split(\"\");\n  return binary.map((_, i) => rotate(i, binary).join(\"\"));\n}\n\nfunction chromaToPcset(chroma: PcsetChroma): Pcset {\n  const setNum = chromaToNumber(chroma);\n  const normalizedNum = chromaRotations(chroma)\n    .map(chromaToNumber)\n    .filter((n) => n >= 2048)\n    .sort()[0];\n  const normalized = setNumToChroma(normalizedNum);\n\n  const intervals = chromaToIntervals(chroma);\n\n  return {\n    empty: false,\n    name: \"\",\n    setNum,\n    chroma,\n    normalized,\n    intervals,\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction listToChroma(set: any[]): PcsetChroma {\n  if (set.length === 0) {\n    return EmptyPcset.chroma;\n  }\n\n  let pitch: Note | Interval | NotFound;\n  const binary = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n  // tslint:disable-next-line:prefer-for-of\n  for (let i = 0; i < set.length; i++) {\n    pitch = note(set[i]);\n    // tslint:disable-next-line: curly\n    if (pitch.empty) pitch = interval(set[i]);\n    // tslint:disable-next-line: curly\n    if (!pitch.empty) binary[pitch.chroma] = 1;\n  }\n  return binary.join(\"\");\n}\n","import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\nexport type ChordQuality =\n  | \"Major\"\n  | \"Minor\"\n  | \"Augmented\"\n  | \"Diminished\"\n  | \"Unknown\";\n\nexport interface ChordType extends Pcset {\n  name: string;\n  quality: ChordQuality;\n  aliases: string[];\n}\nconst NoChordType: ChordType = {\n  ...EmptyPcset,\n  name: \"\",\n  quality: \"Unknown\",\n  intervals: [],\n  aliases: [],\n};\n\ntype ChordTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ChordType[] = [];\nlet index: Record<ChordTypeName, ChordType> = {};\n\n/**\n * Given a chord name or chroma, return the chord properties\n * @param {string} source - chord name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/chord-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ChordTypeName): ChordType {\n  return index[type] || NoChordType;\n}\n\nexport const chordType = deprecate(\"ChordType.chordType\", \"ChordType.get\", get);\n\n/**\n * Get all chord (long) names\n */\nexport function names() {\n  return dictionary.map((chord) => chord.name).filter((x) => x);\n}\n\n/**\n * Get all chord symbols\n */\nexport function symbols() {\n  return dictionary.map((chord) => chord.aliases[0]).filter((x) => x);\n}\n\n/**\n * Keys used to reference chord types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Return a list of all chord types\n */\nexport function all(): ChordType[] {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\"ChordType.entries\", \"ChordType.all\", all);\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a chord to the dictionary.\n * @param intervals\n * @param aliases\n * @param [fullName]\n */\nexport function add(intervals: string[], aliases: string[], fullName?: string) {\n  const quality = getQuality(intervals);\n  const chord = {\n    ...pcset(intervals),\n    name: fullName || \"\",\n    quality,\n    intervals,\n    aliases,\n  };\n  dictionary.push(chord);\n  if (chord.name) {\n    index[chord.name] = chord;\n  }\n  index[chord.setNum] = chord;\n  index[chord.chroma] = chord;\n  chord.aliases.forEach((alias) => addAlias(chord, alias));\n}\n\nexport function addAlias(chord: ChordType, alias: string) {\n  index[alias] = chord;\n}\n\nfunction getQuality(intervals: string[]): ChordQuality {\n  const has = (interval: string) => intervals.indexOf(interval) !== -1;\n  return has(\"5A\")\n    ? \"Augmented\"\n    : has(\"3M\")\n      ? \"Major\"\n      : has(\"5d\")\n        ? \"Diminished\"\n        : has(\"3m\")\n          ? \"Minor\"\n          : \"Unknown\";\n}\n\ndata.forEach(([ivls, fullName, names]: string[]) =>\n  add(ivls.split(\" \"), names.split(\" \"), fullName),\n);\ndictionary.sort((a, b) => a.setNum - b.setNum);\n\nexport default {\n  names,\n  symbols,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n  // deprecated\n  entries,\n  chordType,\n};\n","/**\n * @private\n * Chord List\n * Source: https://en.wikibooks.org/wiki/Music_Theory/Complete_List_of_Chord_Patterns\n * Format: [\"intervals\", \"full name\", \"abrv1 abrv2\"]\n */\nconst CHORDS: string[][] = [\n  // ==Major==\n  [\"1P 3M 5P\", \"major\", \"M ^  maj\"],\n  [\"1P 3M 5P 7M\", \"major seventh\", \"maj7 Δ ma7 M7 Maj7 ^7\"],\n  [\"1P 3M 5P 7M 9M\", \"major ninth\", \"maj9 Δ9 ^9\"],\n  [\"1P 3M 5P 7M 9M 13M\", \"major thirteenth\", \"maj13 Maj13 ^13\"],\n  [\"1P 3M 5P 6M\", \"sixth\", \"6 add6 add13 M6\"],\n  [\"1P 3M 5P 6M 9M\", \"sixth added ninth\", \"6add9 6/9 69 M69\"],\n  [\"1P 3M 6m 7M\", \"major seventh flat sixth\", \"M7b6 ^7b6\"],\n  [\n    \"1P 3M 5P 7M 11A\",\n    \"major seventh sharp eleventh\",\n    \"maj#4 Δ#4 Δ#11 M7#11 ^7#11 maj7#11\",\n  ],\n  // ==Minor==\n  // '''Normal'''\n  [\"1P 3m 5P\", \"minor\", \"m min -\"],\n  [\"1P 3m 5P 7m\", \"minor seventh\", \"m7 min7 mi7 -7\"],\n  [\n    \"1P 3m 5P 7M\",\n    \"minor/major seventh\",\n    \"m/ma7 m/maj7 mM7 mMaj7 m/M7 -Δ7 mΔ -^7 -maj7\",\n  ],\n  [\"1P 3m 5P 6M\", \"minor sixth\", \"m6 -6\"],\n  [\"1P 3m 5P 7m 9M\", \"minor ninth\", \"m9 -9\"],\n  [\"1P 3m 5P 7M 9M\", \"minor/major ninth\", \"mM9 mMaj9 -^9\"],\n  [\"1P 3m 5P 7m 9M 11P\", \"minor eleventh\", \"m11 -11\"],\n  [\"1P 3m 5P 7m 9M 13M\", \"minor thirteenth\", \"m13 -13\"],\n  // '''Diminished'''\n  [\"1P 3m 5d\", \"diminished\", \"dim ° o\"],\n  [\"1P 3m 5d 7d\", \"diminished seventh\", \"dim7 °7 o7\"],\n  [\"1P 3m 5d 7m\", \"half-diminished\", \"m7b5 ø -7b5 h7 h\"],\n  // ==Dominant/Seventh==\n  // '''Normal'''\n  [\"1P 3M 5P 7m\", \"dominant seventh\", \"7 dom\"],\n  [\"1P 3M 5P 7m 9M\", \"dominant ninth\", \"9\"],\n  [\"1P 3M 5P 7m 9M 13M\", \"dominant thirteenth\", \"13\"],\n  [\"1P 3M 5P 7m 11A\", \"lydian dominant seventh\", \"7#11 7#4\"],\n  // '''Altered'''\n  [\"1P 3M 5P 7m 9m\", \"dominant flat ninth\", \"7b9\"],\n  [\"1P 3M 5P 7m 9A\", \"dominant sharp ninth\", \"7#9\"],\n  [\"1P 3M 7m 9m\", \"altered\", \"alt7\"],\n  // '''Suspended'''\n  [\"1P 4P 5P\", \"suspended fourth\", \"sus4 sus\"],\n  [\"1P 2M 5P\", \"suspended second\", \"sus2\"],\n  [\"1P 4P 5P 7m\", \"suspended fourth seventh\", \"7sus4 7sus\"],\n  [\"1P 5P 7m 9M 11P\", \"eleventh\", \"11\"],\n  [\n    \"1P 4P 5P 7m 9m\",\n    \"suspended fourth flat ninth\",\n    \"b9sus phryg 7b9sus 7b9sus4\",\n  ],\n  // ==Other==\n  [\"1P 5P\", \"fifth\", \"5\"],\n  [\"1P 3M 5A\", \"augmented\", \"aug + +5 ^#5\"],\n  [\"1P 3m 5A\", \"minor augmented\", \"m#5 -#5 m+\"],\n  [\"1P 3M 5A 7M\", \"augmented seventh\", \"maj7#5 maj7+5 +maj7 ^7#5\"],\n  [\n    \"1P 3M 5P 7M 9M 11A\",\n    \"major sharp eleventh (lydian)\",\n    \"maj9#11 Δ9#11 ^9#11\",\n  ],\n  // ==Legacy==\n  [\"1P 2M 4P 5P\", \"\", \"sus24 sus4add9\"],\n  [\"1P 3M 5A 7M 9M\", \"\", \"maj9#5 Maj9#5\"],\n  [\"1P 3M 5A 7m\", \"\", \"7#5 +7 7+ 7aug aug7\"],\n  [\"1P 3M 5A 7m 9A\", \"\", \"7#5#9 7#9#5 7alt\"],\n  [\"1P 3M 5A 7m 9M\", \"\", \"9#5 9+\"],\n  [\"1P 3M 5A 7m 9M 11A\", \"\", \"9#5#11\"],\n  [\"1P 3M 5A 7m 9m\", \"\", \"7#5b9 7b9#5\"],\n  [\"1P 3M 5A 7m 9m 11A\", \"\", \"7#5b9#11\"],\n  [\"1P 3M 5A 9A\", \"\", \"+add#9\"],\n  [\"1P 3M 5A 9M\", \"\", \"M#5add9 +add9\"],\n  [\"1P 3M 5P 6M 11A\", \"\", \"M6#11 M6b5 6#11 6b5\"],\n  [\"1P 3M 5P 6M 7M 9M\", \"\", \"M7add13\"],\n  [\"1P 3M 5P 6M 9M 11A\", \"\", \"69#11\"],\n  [\"1P 3m 5P 6M 9M\", \"\", \"m69 -69\"],\n  [\"1P 3M 5P 6m 7m\", \"\", \"7b6\"],\n  [\"1P 3M 5P 7M 9A 11A\", \"\", \"maj7#9#11\"],\n  [\"1P 3M 5P 7M 9M 11A 13M\", \"\", \"M13#11 maj13#11 M13+4 M13#4\"],\n  [\"1P 3M 5P 7M 9m\", \"\", \"M7b9\"],\n  [\"1P 3M 5P 7m 11A 13m\", \"\", \"7#11b13 7b5b13\"],\n  [\"1P 3M 5P 7m 13M\", \"\", \"7add6 67 7add13\"],\n  [\"1P 3M 5P 7m 9A 11A\", \"\", \"7#9#11 7b5#9 7#9b5\"],\n  [\"1P 3M 5P 7m 9A 11A 13M\", \"\", \"13#9#11\"],\n  [\"1P 3M 5P 7m 9A 11A 13m\", \"\", \"7#9#11b13\"],\n  [\"1P 3M 5P 7m 9A 13M\", \"\", \"13#9\"],\n  [\"1P 3M 5P 7m 9A 13m\", \"\", \"7#9b13\"],\n  [\"1P 3M 5P 7m 9M 11A\", \"\", \"9#11 9+4 9#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13M\", \"\", \"13#11 13+4 13#4\"],\n  [\"1P 3M 5P 7m 9M 11A 13m\", \"\", \"9#11b13 9b5b13\"],\n  [\"1P 3M 5P 7m 9m 11A\", \"\", \"7b9#11 7b5b9 7b9b5\"],\n  [\"1P 3M 5P 7m 9m 11A 13M\", \"\", \"13b9#11\"],\n  [\"1P 3M 5P 7m 9m 11A 13m\", \"\", \"7b9b13#11 7b9#11b13 7b5b9b13\"],\n  [\"1P 3M 5P 7m 9m 13M\", \"\", \"13b9\"],\n  [\"1P 3M 5P 7m 9m 13m\", \"\", \"7b9b13\"],\n  [\"1P 3M 5P 7m 9m 9A\", \"\", \"7b9#9\"],\n  [\"1P 3M 5P 9M\", \"\", \"Madd9 2 add9 add2\"],\n  [\"1P 3M 5P 9m\", \"\", \"Maddb9\"],\n  [\"1P 3M 5d\", \"\", \"Mb5\"],\n  [\"1P 3M 5d 6M 7m 9M\", \"\", \"13b5\"],\n  [\"1P 3M 5d 7M\", \"\", \"M7b5\"],\n  [\"1P 3M 5d 7M 9M\", \"\", \"M9b5\"],\n  [\"1P 3M 5d 7m\", \"\", \"7b5\"],\n  [\"1P 3M 5d 7m 9M\", \"\", \"9b5\"],\n  [\"1P 3M 7m\", \"\", \"7no5\"],\n  [\"1P 3M 7m 13m\", \"\", \"7b13\"],\n  [\"1P 3M 7m 9M\", \"\", \"9no5\"],\n  [\"1P 3M 7m 9M 13M\", \"\", \"13no5\"],\n  [\"1P 3M 7m 9M 13m\", \"\", \"9b13\"],\n  [\"1P 3m 4P 5P\", \"\", \"madd4\"],\n  [\"1P 3m 5P 6m 7M\", \"\", \"mMaj7b6\"],\n  [\"1P 3m 5P 6m 7M 9M\", \"\", \"mMaj9b6\"],\n  [\"1P 3m 5P 7m 11P\", \"\", \"m7add11 m7add4\"],\n  [\"1P 3m 5P 9M\", \"\", \"madd9\"],\n  [\"1P 3m 5d 6M 7M\", \"\", \"o7M7\"],\n  [\"1P 3m 5d 7M\", \"\", \"oM7\"],\n  [\"1P 3m 6m 7M\", \"\", \"mb6M7\"],\n  [\"1P 3m 6m 7m\", \"\", \"m7#5\"],\n  [\"1P 3m 6m 7m 9M\", \"\", \"m9#5\"],\n  [\"1P 3m 5A 7m 9M 11P\", \"\", \"m11A\"],\n  [\"1P 3m 6m 9m\", \"\", \"mb6b9\"],\n  [\"1P 2M 3m 5d 7m\", \"\", \"m9b5\"],\n  [\"1P 4P 5A 7M\", \"\", \"M7#5sus4\"],\n  [\"1P 4P 5A 7M 9M\", \"\", \"M9#5sus4\"],\n  [\"1P 4P 5A 7m\", \"\", \"7#5sus4\"],\n  [\"1P 4P 5P 7M\", \"\", \"M7sus4\"],\n  [\"1P 4P 5P 7M 9M\", \"\", \"M9sus4\"],\n  [\"1P 4P 5P 7m 9M\", \"\", \"9sus4 9sus\"],\n  [\"1P 4P 5P 7m 9M 13M\", \"\", \"13sus4 13sus\"],\n  [\"1P 4P 5P 7m 9m 13m\", \"\", \"7sus4b9b13 7b9b13sus4\"],\n  [\"1P 4P 7m 10m\", \"\", \"4 quartal\"],\n  [\"1P 5P 7m 9m 11P\", \"\", \"11b9\"],\n];\n\nexport default CHORDS;\n","import { all, ChordType } from \"@tonaljs/chord-type\";\nimport { note } from \"@tonaljs/core\";\nimport { modes } from \"@tonaljs/pcset\";\n\ninterface FoundChord {\n  readonly weight: number;\n  readonly name: string;\n}\n\nconst namedSet = (notes: string[]) => {\n  const pcToName = notes.reduce<Record<number, string>>((record, n) => {\n    const chroma = note(n).chroma;\n    if (chroma !== undefined) {\n      record[chroma] = record[chroma] || note(n).name;\n    }\n    return record;\n  }, {});\n\n  return (chroma: number) => pcToName[chroma];\n};\n\ntype DetectOptions = {\n  assumePerfectFifth: boolean;\n};\nexport function detect(\n  source: string[],\n  options: Partial<DetectOptions> = {},\n): string[] {\n  const notes = source.map((n) => note(n).pc).filter((x) => x);\n  if (note.length === 0) {\n    return [];\n  }\n\n  const found: FoundChord[] = findMatches(notes, 1, options);\n\n  return found\n    .filter((chord) => chord.weight)\n    .sort((a, b) => b.weight - a.weight)\n    .map((chord) => chord.name);\n}\n\n/* tslint:disable:no-bitwise */\nconst BITMASK = {\n  // 3m 000100000000\n  // 3M 000010000000\n  anyThirds: 384,\n  // 5P 000000010000\n  perfectFifth: 16,\n  // 5d 000000100000\n  // 5A 000000001000\n  nonPerfectFifths: 40,\n  anySeventh: 3,\n};\n\nconst testChromaNumber = (bitmask: number) => (chromaNumber: number) =>\n  Boolean(chromaNumber & bitmask);\nconst hasAnyThird = testChromaNumber(BITMASK.anyThirds);\nconst hasPerfectFifth = testChromaNumber(BITMASK.perfectFifth);\nconst hasAnySeventh = testChromaNumber(BITMASK.anySeventh);\nconst hasNonPerfectFifth = testChromaNumber(BITMASK.nonPerfectFifths);\n\nfunction hasAnyThirdAndPerfectFifthAndAnySeventh(chordType: ChordType) {\n  const chromaNumber = parseInt(chordType.chroma, 2);\n  return (\n    hasAnyThird(chromaNumber) &&\n    hasPerfectFifth(chromaNumber) &&\n    hasAnySeventh(chromaNumber)\n  );\n}\n\nfunction withPerfectFifth(chroma: string): string {\n  const chromaNumber = parseInt(chroma, 2);\n  return hasNonPerfectFifth(chromaNumber)\n    ? chroma\n    : (chromaNumber | 16).toString(2);\n}\n\n/* tslint:enable:no-bitwise */\n\ntype FindMatchesOptions = {\n  assumePerfectFifth: boolean;\n};\nfunction findMatches(\n  notes: string[],\n  weight: number,\n  options: Partial<FindMatchesOptions>,\n): FoundChord[] {\n  const tonic = notes[0];\n  const tonicChroma = note(tonic).chroma;\n  const noteName = namedSet(notes);\n  // we need to test all chromas to get the correct baseNote\n  const allModes = modes(notes, false);\n\n  const found: FoundChord[] = [];\n  allModes.forEach((mode, index) => {\n    const modeWithPerfectFifth =\n      options.assumePerfectFifth && withPerfectFifth(mode);\n    // some chords could have the same chroma but different interval spelling\n    const chordTypes = all().filter((chordType) => {\n      if (\n        options.assumePerfectFifth &&\n        hasAnyThirdAndPerfectFifthAndAnySeventh(chordType)\n      ) {\n        return chordType.chroma === modeWithPerfectFifth;\n      }\n      return chordType.chroma === mode;\n    });\n\n    chordTypes.forEach((chordType) => {\n      const chordName = chordType.aliases[0];\n      const baseNote = noteName(index);\n      const isInversion = index !== tonicChroma;\n      if (isInversion) {\n        found.push({\n          weight: 0.5 * weight,\n          name: `${baseNote}${chordName}/${tonic}`,\n        });\n      } else {\n        found.push({ weight: 1 * weight, name: `${baseNote}${chordName}` });\n      }\n    });\n  });\n\n  return found;\n}\n\nexport default { detect };\n","import { deprecate } from \"@tonaljs/core\";\nimport {\n  EmptyPcset,\n  get as pcset,\n  Pcset,\n  PcsetChroma,\n  PcsetNum,\n} from \"@tonaljs/pcset\";\nimport data from \"./data\";\n\n/**\n * Properties for a scale in the scale dictionary. It's a pitch class set\n * properties with the following additional information:\n * - name: the scale name\n * - aliases: alternative list of names\n * - intervals: an array of interval names\n */\nexport interface ScaleType extends Pcset {\n  readonly name: string;\n  readonly aliases: string[];\n}\n\nexport const NoScaleType: ScaleType = {\n  ...EmptyPcset,\n  intervals: [],\n  aliases: [],\n};\n\ntype ScaleTypeName = string | PcsetChroma | PcsetNum;\n\nlet dictionary: ScaleType[] = [];\nlet index: Record<ScaleTypeName, ScaleType> = {};\n\nexport function names() {\n  return dictionary.map((scale) => scale.name);\n}\n\n/**\n * Given a scale name or chroma, return the scale properties\n *\n * @param {string} type - scale name or pitch class set chroma\n * @example\n * import { get } from 'tonaljs/scale-type'\n * get('major') // => { name: 'major', ... }\n */\nexport function get(type: ScaleTypeName): ScaleType {\n  return index[type] || NoScaleType;\n}\n\nexport const scaleType = deprecate(\n  \"ScaleDictionary.scaleType\",\n  \"ScaleType.get\",\n  get,\n);\n\n/**\n * Return a list of all scale types\n */\nexport function all() {\n  return dictionary.slice();\n}\n\nexport const entries = deprecate(\n  \"ScaleDictionary.entries\",\n  \"ScaleType.all\",\n  all,\n);\n\n/**\n * Keys used to reference scale types\n */\nexport function keys() {\n  return Object.keys(index);\n}\n\n/**\n * Clear the dictionary\n */\nexport function removeAll() {\n  dictionary = [];\n  index = {};\n}\n\n/**\n * Add a scale into dictionary\n * @param intervals\n * @param name\n * @param aliases\n */\nexport function add(\n  intervals: string[],\n  name: string,\n  aliases: string[] = [],\n): ScaleType {\n  const scale = { ...pcset(intervals), name, intervals, aliases };\n  dictionary.push(scale);\n  index[scale.name] = scale;\n  index[scale.setNum] = scale;\n  index[scale.chroma] = scale;\n  scale.aliases.forEach((alias) => addAlias(scale, alias));\n  return scale;\n}\n\nexport function addAlias(scale: ScaleType, alias: string) {\n  index[alias] = scale;\n}\n\ndata.forEach(([ivls, name, ...aliases]: string[]) =>\n  add(ivls.split(\" \"), name, aliases),\n);\n\nexport default {\n  names,\n  get,\n  all,\n  add,\n  removeAll,\n  keys,\n\n  // deprecated\n  entries,\n  scaleType,\n};\n","// SCALES\n// Format: [\"intervals\", \"name\", \"alias1\", \"alias2\", ...]\nconst SCALES: string[][] = [\n  // Basic scales\n  [\"1P 2M 3M 5P 6M\", \"major pentatonic\", \"pentatonic\"],\n  [\"1P 2M 3M 4P 5P 6M 7M\", \"major\", \"ionian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m\", \"minor\", \"aeolian\"],\n\n  // Jazz common scales\n  [\"1P 2M 3m 3M 5P 6M\", \"major blues\"],\n  [\"1P 3m 4P 5d 5P 7m\", \"minor blues\", \"blues\"],\n  [\"1P 2M 3m 4P 5P 6M 7M\", \"melodic minor\"],\n  [\"1P 2M 3m 4P 5P 6m 7M\", \"harmonic minor\"],\n  [\"1P 2M 3M 4P 5P 6M 7m 7M\", \"bebop\"],\n  [\"1P 2M 3m 4P 5d 6m 6M 7M\", \"diminished\", \"whole-half diminished\"],\n\n  // Modes\n  [\"1P 2M 3m 4P 5P 6M 7m\", \"dorian\"],\n  [\"1P 2M 3M 4A 5P 6M 7M\", \"lydian\"],\n  [\"1P 2M 3M 4P 5P 6M 7m\", \"mixolydian\", \"dominant\"],\n  [\"1P 2m 3m 4P 5P 6m 7m\", \"phrygian\"],\n  [\"1P 2m 3m 4P 5d 6m 7m\", \"locrian\"],\n\n  // 5-note scales\n  [\"1P 3M 4P 5P 7M\", \"ionian pentatonic\"],\n  [\"1P 3M 4P 5P 7m\", \"mixolydian pentatonic\", \"indian\"],\n  [\"1P 2M 4P 5P 6M\", \"ritusen\"],\n  [\"1P 2M 4P 5P 7m\", \"egyptian\"],\n  [\"1P 3M 4P 5d 7m\", \"neopolitan major pentatonic\"],\n  [\"1P 3m 4P 5P 6m\", \"vietnamese 1\"],\n  [\"1P 2m 3m 5P 6m\", \"pelog\"],\n  [\"1P 2m 4P 5P 6m\", \"kumoijoshi\"],\n  [\"1P 2M 3m 5P 6m\", \"hirajoshi\"],\n  [\"1P 2m 4P 5d 7m\", \"iwato\"],\n  [\"1P 2m 4P 5P 7m\", \"in-sen\"],\n  [\"1P 3M 4A 5P 7M\", \"lydian pentatonic\", \"chinese\"],\n  [\"1P 3m 4P 6m 7m\", \"malkos raga\"],\n  [\"1P 3m 4P 5d 7m\", \"locrian pentatonic\", \"minor seven flat five pentatonic\"],\n  [\"1P 3m 4P 5P 7m\", \"minor pentatonic\", \"vietnamese 2\"],\n  [\"1P 3m 4P 5P 6M\", \"minor six pentatonic\"],\n  [\"1P 2M 3m 5P 6M\", \"flat three pentatonic\", \"kumoi\"],\n  [\"1P 2M 3M 5P 6m\", \"flat six pentatonic\"],\n  [\"1P 2m 3M 5P 6M\", \"scriabin\"],\n  [\"1P 3M 5d 6m 7m\", \"whole tone pentatonic\"],\n  [\"1P 3M 4A 5A 7M\", \"lydian #5P pentatonic\"],\n  [\"1P 3M 4A 5P 7m\", \"lydian dominant pentatonic\"],\n  [\"1P 3m 4P 5P 7M\", \"minor #7M pentatonic\"],\n  [\"1P 3m 4d 5d 7m\", \"super locrian pentatonic\"],\n\n  // 6-note scales\n  [\"1P 2M 3m 4P 5P 7M\", \"minor hexatonic\"],\n  [\"1P 2A 3M 5P 5A 7M\", \"augmented\"],\n  [\"1P 2M 4P 5P 6M 7m\", \"piongio\"],\n  [\"1P 2m 3M 4A 6M 7m\", \"prometheus neopolitan\"],\n  [\"1P 2M 3M 4A 6M 7m\", \"prometheus\"],\n  [\"1P 2m 3M 5d 6m 7m\", \"mystery #1\"],\n  [\"1P 2m 3M 4P 5A 6M\", \"six tone symmetric\"],\n  [\"1P 2M 3M 4A 5A 6A\", \"whole tone\", \"messiaen's mode #1\"],\n  [\"1P 2m 4P 4A 5P 7M\", \"messiaen's mode #5\"],\n\n  // 7-note scales\n  [\"1P 2M 3M 4P 5d 6m 7m\", \"locrian major\", \"arabian\"],\n  [\"1P 2m 3M 4A 5P 6m 7M\", \"double harmonic lydian\"],\n  [\n    \"1P 2m 2A 3M 4A 6m 7m\",\n    \"altered\",\n    \"super locrian\",\n    \"diminished whole tone\",\n    \"pomeroy\",\n  ],\n  [\"1P 2M 3m 4P 5d 6m 7m\", \"locrian #2\", \"half-diminished\", \"aeolian b5\"],\n  [\n    \"1P 2M 3M 4P 5P 6m 7m\",\n    \"mixolydian b6\",\n    \"melodic minor fifth mode\",\n    \"hindu\",\n  ],\n  [\"1P 2M 3M 4A 5P 6M 7m\", \"lydian dominant\", \"lydian b7\", \"overtone\"],\n  [\"1P 2M 3M 4A 5A 6M 7M\", \"lydian augmented\"],\n  [\n    \"1P 2m 3m 4P 5P 6M 7m\",\n    \"dorian b2\",\n    \"phrygian #6\",\n    \"melodic minor second mode\",\n  ],\n  [\n    \"1P 2m 3m 4d 5d 6m 7d\",\n    \"ultralocrian\",\n    \"superlocrian bb7\",\n    \"superlocrian diminished\",\n  ],\n  [\"1P 2m 3m 4P 5d 6M 7m\", \"locrian 6\", \"locrian natural 6\", \"locrian sharp 6\"],\n  [\"1P 2A 3M 4P 5P 5A 7M\", \"augmented heptatonic\"],\n  // Source https://en.wikipedia.org/wiki/Ukrainian_Dorian_scale\n  [\n    \"1P 2M 3m 4A 5P 6M 7m\",\n    \"dorian #4\",\n    \"ukrainian dorian\",\n    \"romanian minor\",\n    \"altered dorian\",\n  ],\n  [\"1P 2M 3m 4A 5P 6M 7M\", \"lydian diminished\"],\n  [\"1P 2M 3M 4A 5A 7m 7M\", \"leading whole tone\"],\n  [\"1P 2M 3M 4A 5P 6m 7m\", \"lydian minor\"],\n  [\"1P 2m 3M 4P 5P 6m 7m\", \"phrygian dominant\", \"spanish\", \"phrygian major\"],\n  [\"1P 2m 3m 4P 5P 6m 7M\", \"balinese\"],\n  [\"1P 2m 3m 4P 5P 6M 7M\", \"neopolitan major\"],\n  [\"1P 2M 3M 4P 5P 6m 7M\", \"harmonic major\"],\n  [\"1P 2m 3M 4P 5P 6m 7M\", \"double harmonic major\", \"gypsy\"],\n  [\"1P 2M 3m 4A 5P 6m 7M\", \"hungarian minor\"],\n  [\"1P 2A 3M 4A 5P 6M 7m\", \"hungarian major\"],\n  [\"1P 2m 3M 4P 5d 6M 7m\", \"oriental\"],\n  [\"1P 2m 3m 3M 4A 5P 7m\", \"flamenco\"],\n  [\"1P 2m 3m 4A 5P 6m 7M\", \"todi raga\"],\n  [\"1P 2m 3M 4P 5d 6m 7M\", \"persian\"],\n  [\"1P 2m 3M 5d 6m 7m 7M\", \"enigmatic\"],\n  [\n    \"1P 2M 3M 4P 5A 6M 7M\",\n    \"major augmented\",\n    \"major #5\",\n    \"ionian augmented\",\n    \"ionian #5\",\n  ],\n  [\"1P 2A 3M 4A 5P 6M 7M\", \"lydian #9\"],\n\n  // 8-note scales\n  [\"1P 2m 2M 4P 4A 5P 6m 7M\", \"messiaen's mode #4\"],\n  [\"1P 2m 3M 4P 4A 5P 6m 7M\", \"purvi raga\"],\n  [\"1P 2m 3m 3M 4P 5P 6m 7m\", \"spanish heptatonic\"],\n  [\"1P 2M 3m 3M 4P 5P 6M 7m\", \"bebop minor\"],\n  [\"1P 2M 3M 4P 5P 5A 6M 7M\", \"bebop major\"],\n  [\"1P 2m 3m 4P 5d 5P 6m 7m\", \"bebop locrian\"],\n  [\"1P 2M 3m 4P 5P 6m 7m 7M\", \"minor bebop\"],\n  [\"1P 2M 3M 4P 5d 5P 6M 7M\", \"ichikosucho\"],\n  [\"1P 2M 3m 4P 5P 6m 6M 7M\", \"minor six diminished\"],\n  [\n    \"1P 2m 3m 3M 4A 5P 6M 7m\",\n    \"half-whole diminished\",\n    \"dominant diminished\",\n    \"messiaen's mode #2\",\n  ],\n  [\"1P 3m 3M 4P 5P 6M 7m 7M\", \"kafi raga\"],\n  [\"1P 2M 3M 4P 4A 5A 6A 7M\", \"messiaen's mode #6\"],\n\n  // 9-note scales\n  [\"1P 2M 3m 3M 4P 5d 5P 6M 7m\", \"composite blues\"],\n  [\"1P 2M 3m 3M 4A 5P 6m 7m 7M\", \"messiaen's mode #3\"],\n\n  // 10-note scales\n  [\"1P 2m 2M 3m 4P 4A 5P 6m 6M 7M\", \"messiaen's mode #7\"],\n\n  // 12-note scales\n  [\"1P 2m 2M 3m 3M 4P 5d 5P 6m 6M 7m 7M\", \"chromatic\"],\n];\n\nexport default SCALES;\n","import { detect } from \"@tonaljs/chord-detect\";\nimport {\n  ChordType,\n  all as chordTypes,\n  get as getChordType,\n} from \"@tonaljs/chord-type\";\nimport { subtract } from \"@tonaljs/interval\";\nimport { isSubsetOf, isSupersetOf } from \"@tonaljs/pcset\";\nimport {\n  distance,\n  tonicIntervalsTransposer,\n  transpose as transposeNote,\n} from \"@tonaljs/pitch-distance\";\nimport { NoteName, note, tokenizeNote } from \"@tonaljs/pitch-note\";\nimport { all as scaleTypes } from \"@tonaljs/scale-type\";\n\nexport { detect } from \"@tonaljs/chord-detect\";\n\ntype ChordNameOrTokens =\n  | string // full name to be parsed\n  | [string] // only the name\n  | [string, string] // tonic, name\n  | [string, string, string]; // tonic, name, bass\ntype ChordNameTokens = [string, string, string]; // [TONIC, SCALE TYPE, BASS]\n\nexport interface Chord extends ChordType {\n  tonic: string | null;\n  type: string;\n  root: string;\n  bass: string;\n  rootDegree: number;\n  symbol: string;\n  notes: NoteName[];\n}\n\nconst NoChord: Chord = {\n  empty: true,\n  name: \"\",\n  symbol: \"\",\n  root: \"\",\n  bass: \"\",\n  rootDegree: 0,\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  quality: \"Unknown\",\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n// 6, 64, 7, 9, 11 and 13 are consider part of the chord\n// (see https://github.com/danigb/tonal/issues/55)\n//const NUM_TYPES = /^(6|64|7|9|11|13)$/;\n/**\n * Tokenize a chord name. It returns an array with the tonic, chord type and bass\n * If not tonic is found, all the name is considered the chord name.\n *\n * This function does NOT check if the chord type exists or not. It only tries\n * to split the tonic and chord type.\n *\n * This function does NOT check if the bass is part of the chord or not but it\n * only accepts a pitch class as bass\n *\n * @function\n * @param {string} name - the chord name\n * @return {Array} an array with [tonic, type, bass]\n * @example\n * tokenize(\"Cmaj7\") // => [ \"C\", \"maj7\" ]\n * tokenize(\"C7\") // => [ \"C\", \"7\" ]\n * tokenize(\"mMaj7\") // => [ null, \"mMaj7\" ]\n * tokenize(\"Cnonsense\") // => [ null, \"nonsense\" ]\n */\nexport function tokenize(name: string): ChordNameTokens {\n  const [letter, acc, oct, type] = tokenizeNote(name);\n  if (letter === \"\") {\n    return tokenizeBass(\"\", name);\n  } else if (letter === \"A\" && type === \"ug\") {\n    return tokenizeBass(\"\", \"aug\");\n  } else {\n    return tokenizeBass(letter + acc, oct + type);\n  }\n}\n\nfunction tokenizeBass(note: string, chord: string): ChordNameTokens {\n  const split = chord.split(\"/\");\n  if (split.length === 1) {\n    return [note, split[0], \"\"];\n  }\n  const [letter, acc, oct, type] = tokenizeNote(split[1]);\n  // Only a pitch class is accepted as bass note\n  if (letter !== \"\" && oct === \"\" && type === \"\") {\n    return [note, split[0], letter + acc];\n  } else {\n    return [note, chord, \"\"];\n  }\n}\n\n/**\n * Get a Chord from a chord name.\n */\nexport function get(src: ChordNameOrTokens): Chord {\n  if (Array.isArray(src)) {\n    return getChord(src[1] || \"\", src[0], src[2]);\n  } else if (src === \"\") {\n    return NoChord;\n  } else {\n    const [tonic, type, bass] = tokenize(src);\n    const chord = getChord(type, tonic, bass);\n    return chord.empty ? getChord(src) : chord;\n  }\n}\n\n/**\n * Get chord properties\n *\n * @param typeName - the chord type name\n * @param [tonic] - Optional tonic\n * @param [root]  - Optional root (requires a tonic)\n */\nexport function getChord(\n  typeName: string,\n  optionalTonic?: string,\n  optionalBass?: string,\n): Chord {\n  const type = getChordType(typeName);\n  const tonic = note(optionalTonic || \"\");\n  const bass = note(optionalBass || \"\");\n\n  if (\n    type.empty ||\n    (optionalTonic && tonic.empty) ||\n    (optionalBass && bass.empty)\n  ) {\n    return NoChord;\n  }\n\n  const bassInterval = distance(tonic.pc, bass.pc);\n  const bassIndex = type.intervals.indexOf(bassInterval);\n  const hasRoot = bassIndex >= 0;\n  const root = hasRoot ? bass : note(\"\");\n  const rootDegree = bassIndex === -1 ? NaN : bassIndex + 1;\n  const hasBass = bass.pc && bass.pc !== tonic.pc;\n\n  const intervals = Array.from(type.intervals);\n\n  if (hasRoot) {\n    for (let i = 1; i < rootDegree; i++) {\n      const num = intervals[0][0];\n      const quality = intervals[0][1];\n      const newNum = parseInt(num, 10) + 7;\n      intervals.push(`${newNum}${quality}`);\n      intervals.shift();\n    }\n  } else if (hasBass) {\n    const ivl = subtract(distance(tonic.pc, bass.pc), \"8P\");\n    if (ivl) intervals.unshift(ivl);\n  }\n\n  const notes = tonic.empty\n    ? []\n    : intervals.map((i) => transposeNote(tonic.pc, i));\n\n  typeName = type.aliases.indexOf(typeName) !== -1 ? typeName : type.aliases[0];\n  const symbol = `${tonic.empty ? \"\" : tonic.pc}${typeName}${\n    hasRoot && rootDegree > 1 ? \"/\" + root.pc : hasBass ? \"/\" + bass.pc : \"\"\n  }`;\n  const name = `${optionalTonic ? tonic.pc + \" \" : \"\"}${type.name}${\n    hasRoot && rootDegree > 1\n      ? \" over \" + root.pc\n      : hasBass\n        ? \" over \" + bass.pc\n        : \"\"\n  }`;\n  return {\n    ...type,\n    name,\n    symbol,\n    tonic: tonic.pc,\n    type: type.name,\n    root: root.pc,\n    bass: hasBass ? bass.pc : \"\",\n    intervals,\n    rootDegree,\n    notes,\n  };\n}\n\nexport const chord = get;\n\n/**\n * Transpose a chord name\n *\n * @param {string} chordName - the chord name\n * @return {string} the transposed chord\n *\n * @example\n * transpose('Dm7', 'P4') // => 'Gm7\n */\nexport function transpose(chordName: string, interval: string): string {\n  const [tonic, type, bass] = tokenize(chordName);\n  if (!tonic) {\n    return chordName;\n  }\n  const tr = transposeNote(bass, interval);\n  const slash = tr ? \"/\" + tr : \"\";\n  return transposeNote(tonic, interval) + type + slash;\n}\n\n/**\n * Get all scales where the given chord fits\n *\n * @example\n * chordScales('C7b9')\n * // => [\"phrygian dominant\", \"flamenco\", \"spanish heptatonic\", \"half-whole diminished\", \"chromatic\"]\n */\nexport function chordScales(name: string): string[] {\n  const s = get(name);\n  const isChordIncluded = isSupersetOf(s.chroma);\n  return scaleTypes()\n    .filter((scale) => isChordIncluded(scale.chroma))\n    .map((scale) => scale.name);\n}\n/**\n * Get all chords names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @example\n * extended(\"CMaj7\")\n * // => [ 'Cmaj#4', 'Cmaj7#9#11', 'Cmaj9', 'CM7add13', 'Cmaj13', 'Cmaj9#11', 'CM13#11', 'CM7b9' ]\n */\nexport function extended(chordName: string): string[] {\n  const s = get(chordName);\n  const isSuperset = isSupersetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSuperset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Find all chords names that are a subset of the given one\n * (has less notes but all from the given chord)\n *\n * @example\n */\nexport function reduced(chordName: string): string[] {\n  const s = get(chordName);\n  const isSubset = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => isSubset(chord.chroma))\n    .map((chord) => s.tonic + chord.aliases[0]);\n}\n\n/**\n * Return the chord notes\n */\nexport function notes(chordName: ChordNameOrTokens, tonic?: string): string[] {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  if (!note || chord.empty) return [];\n  return chord.intervals.map((ivl) => transposeNote(note, ivl));\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3, 4].map(Chord.degrees(\"C\")) => [\"C\", \"E\", \"G\", \"C\"]\n * [1, 2, 3, 4].map(Chord.degrees(\"C4\")) => [\"C4\", \"E4\", \"G4\", \"C5\"]\n */\nexport function degrees(chordName: ChordNameOrTokens, tonic?: string) {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  const transpose = tonicIntervalsTransposer(chord.intervals, note);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(chordName: ChordNameOrTokens, tonic?: string) {\n  const chord = get(chordName);\n  const note = tonic || chord.tonic;\n  return tonicIntervalsTransposer(chord.intervals, note);\n}\n\nexport default {\n  getChord,\n  get,\n  detect,\n  chordScales,\n  extended,\n  reduced,\n  tokenize,\n  transpose,\n  degrees,\n  steps,\n  notes,\n  chord,\n};\n","/**\n * References:\n * - https://www.researchgate.net/publication/327567188_An_Algorithm_for_Spelling_the_Pitches_of_Any_Musical_Scale\n * @module scale\n */\nimport { all as chordTypes } from \"@tonaljs/chord-type\";\nimport { range as nums, rotate } from \"@tonaljs/collection\";\nimport {\n  deprecate,\n  note,\n  NoteName,\n  tonicIntervalsTransposer,\n  transpose,\n} from \"@tonaljs/core\";\nimport { enharmonic, fromMidi, sortedUniqNames } from \"@tonaljs/note\";\nimport {\n  chroma,\n  isChroma,\n  isSubsetOf,\n  isSupersetOf,\n  modes,\n} from \"@tonaljs/pcset\";\nimport {\n  all,\n  all as scaleTypes,\n  get as getScaleType,\n  names as scaleTypeNames,\n  ScaleType,\n} from \"@tonaljs/scale-type\";\n\ntype ScaleName = string;\ntype ScaleNameTokens = [string, string]; // [TONIC, SCALE TYPE]\n\nexport interface Scale extends ScaleType {\n  tonic: string | null;\n  type: string;\n  notes: NoteName[];\n}\n\nconst NoScale: Scale = {\n  empty: true,\n  name: \"\",\n  type: \"\",\n  tonic: null,\n  setNum: NaN,\n  chroma: \"\",\n  normalized: \"\",\n  aliases: [],\n  notes: [],\n  intervals: [],\n};\n\n/**\n * Given a string with a scale name and (optionally) a tonic, split\n * that components.\n *\n * It retuns an array with the form [ name, tonic ] where tonic can be a\n * note name or null and name can be any arbitrary string\n * (this function doesn\"t check if that scale name exists)\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array} an array [tonic, name]\n * @example\n * tokenize(\"C mixolydean\") // => [\"C\", \"mixolydean\"]\n * tokenize(\"anything is valid\") // => [\"\", \"anything is valid\"]\n * tokenize() // => [\"\", \"\"]\n */\nexport function tokenize(name: ScaleName): ScaleNameTokens {\n  if (typeof name !== \"string\") {\n    return [\"\", \"\"];\n  }\n  const i = name.indexOf(\" \");\n  const tonic = note(name.substring(0, i));\n  if (tonic.empty) {\n    const n = note(name);\n    return n.empty ? [\"\", name] : [n.name, \"\"];\n  }\n\n  const type = name.substring(tonic.name.length + 1);\n  return [tonic.name, type.length ? type : \"\"];\n}\n\n/**\n * Get all scale names\n * @function\n */\nexport const names = scaleTypeNames;\n\n/**\n * Get a Scale from a scale name.\n */\nexport function get(src: ScaleName | ScaleNameTokens): Scale {\n  const tokens = Array.isArray(src) ? src : tokenize(src);\n  const tonic = note(tokens[0]).name;\n  const st = getScaleType(tokens[1]);\n  if (st.empty) {\n    return NoScale;\n  }\n\n  const type = st.name;\n  const notes: string[] = tonic\n    ? st.intervals.map((i) => transpose(tonic, i))\n    : [];\n\n  const name = tonic ? tonic + \" \" + type : type;\n\n  return { ...st, name, type, tonic, notes };\n}\n\nexport const scale = deprecate(\"Scale.scale\", \"Scale.get\", get);\n\nexport function detect(\n  notes: string[],\n  options: { tonic?: string; match?: \"exact\" | \"fit\" } = {},\n): string[] {\n  const notesChroma = chroma(notes);\n  const tonic = note(options.tonic ?? notes[0] ?? \"\");\n  const tonicChroma = tonic.chroma;\n  if (tonicChroma === undefined) {\n    return [];\n  }\n\n  const pitchClasses = notesChroma.split(\"\");\n  pitchClasses[tonicChroma] = \"1\";\n  const scaleChroma = rotate(tonicChroma, pitchClasses).join(\"\");\n  const match = all().find((scaleType) => scaleType.chroma === scaleChroma);\n\n  const results: string[] = [];\n  if (match) {\n    results.push(tonic.name + \" \" + match.name);\n  }\n  if (options.match === \"exact\") {\n    return results;\n  }\n\n  extended(scaleChroma).forEach((scaleName) => {\n    results.push(tonic.name + \" \" + scaleName);\n  });\n\n  return results;\n}\n\n/**\n * Get all chords that fits a given scale\n *\n * @function\n * @param {string} name - the scale name\n * @return {Array<string>} - the chord names\n *\n * @example\n * scaleChords(\"pentatonic\") // => [\"5\", \"64\", \"M\", \"M6\", \"Madd9\", \"Msus2\"]\n */\nexport function scaleChords(name: string): string[] {\n  const s = get(name);\n  const inScale = isSubsetOf(s.chroma);\n  return chordTypes()\n    .filter((chord) => inScale(chord.chroma))\n    .map((chord) => chord.aliases[0]);\n}\n/**\n * Get all scales names that are a superset of the given one\n * (has the same notes and at least one more)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n * @example\n * extended(\"major\") // => [\"bebop\", \"bebop dominant\", \"bebop major\", \"chromatic\", \"ichikosucho\"]\n */\nexport function extended(name: string): string[] {\n  const chroma = isChroma(name) ? name : get(name).chroma;\n  const isSuperset = isSupersetOf(chroma);\n  return scaleTypes()\n    .filter((scale) => isSuperset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Find all scales names that are a subset of the given one\n * (has less notes but all from the given scale)\n *\n * @function\n * @param {string} name\n * @return {Array} a list of scale names\n *\n * @example\n * reduced(\"major\") // => [\"ionian pentatonic\", \"major pentatonic\", \"ritusen\"]\n */\nexport function reduced(name: string): string[] {\n  const isSubset = isSubsetOf(get(name).chroma);\n  return scaleTypes()\n    .filter((scale) => isSubset(scale.chroma))\n    .map((scale) => scale.name);\n}\n\n/**\n * Given an array of notes, return the scale: a pitch class set starting from\n * the first note of the array\n *\n * @function\n * @param {string[]} notes\n * @return {string[]} pitch classes with same tonic\n * @example\n * scaleNotes(['C4', 'c3', 'C5', 'C4', 'c4']) // => [\"C\"]\n * scaleNotes(['D4', 'c#5', 'A5', 'F#6']) // => [\"D\", \"F#\", \"A\", \"C#\"]\n */\nexport function scaleNotes(notes: NoteName[]) {\n  const pcset: string[] = notes.map((n) => note(n).pc).filter((x) => x);\n  const tonic = pcset[0];\n  const scale = sortedUniqNames(pcset);\n  return rotate(scale.indexOf(tonic), scale);\n}\n\ntype ScaleMode = [string, string];\n/**\n * Find mode names of a scale\n *\n * @function\n * @param {string} name - scale name\n * @example\n * modeNames(\"C pentatonic\") // => [\n *   [\"C\", \"major pentatonic\"],\n *   [\"D\", \"egyptian\"],\n *   [\"E\", \"malkos raga\"],\n *   [\"G\", \"ritusen\"],\n *   [\"A\", \"minor pentatonic\"]\n * ]\n */\nexport function modeNames(name: string): ScaleMode[] {\n  const s = get(name);\n  if (s.empty) {\n    return [];\n  }\n\n  const tonics = s.tonic ? s.notes : s.intervals;\n  return modes(s.chroma)\n    .map((chroma: string, i: number): ScaleMode => {\n      const modeName = get(chroma).name;\n      return modeName ? [tonics[i], modeName] : [\"\", \"\"];\n    })\n    .filter((x) => x[0]);\n}\n\nfunction getNoteNameOf(scale: string | string[]) {\n  const names = Array.isArray(scale) ? scaleNotes(scale) : get(scale).notes;\n  const chromas = names.map((name) => note(name).chroma);\n\n  return (noteOrMidi: string | number): string | undefined => {\n    const currNote =\n      typeof noteOrMidi === \"number\"\n        ? note(fromMidi(noteOrMidi))\n        : note(noteOrMidi);\n    const height = currNote.height;\n\n    if (height === undefined) return undefined;\n    const chroma = height % 12;\n    const position = chromas.indexOf(chroma);\n    if (position === -1) return undefined;\n    return enharmonic(currNote.name, names[position]);\n  };\n}\n\nexport function rangeOf(scale: string | string[]) {\n  const getName = getNoteNameOf(scale);\n  return (fromNote: string, toNote: string) => {\n    const from = note(fromNote).height;\n    const to = note(toNote).height;\n    if (from === undefined || to === undefined) return [];\n\n    return nums(from, to)\n      .map(getName)\n      .filter((x) => x);\n  };\n}\n\n/**\n * Returns a function to get a note name from the scale degree.\n *\n * @example\n * [1, 2, 3].map(Scale.degrees(\"C major\")) => [\"C\", \"D\", \"E\"]\n * [1, 2, 3].map(Scale.degrees(\"C4 major\")) => [\"C4\", \"D4\", \"E4\"]\n */\nexport function degrees(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  const transpose = tonicIntervalsTransposer(intervals, tonic);\n  return (degree: number) =>\n    degree ? transpose(degree > 0 ? degree - 1 : degree) : \"\";\n}\n\n/**\n * Sames as `degree` but with 0-based index\n */\nexport function steps(scaleName: string | ScaleNameTokens) {\n  const { intervals, tonic } = get(scaleName);\n  return tonicIntervalsTransposer(intervals, tonic);\n}\n\nexport default {\n  degrees,\n  detect,\n  extended,\n  get,\n  modeNames,\n  names,\n  rangeOf,\n  reduced,\n  scaleChords,\n  scaleNotes,\n  steps,\n  tokenize,\n\n  // deprecated\n  scale,\n};\n","import {\n  accToAlt,\n  altToAcc,\n  deprecate,\n  interval,\n  isNamed,\n  isPitch,\n  Pitch,\n} from \"@tonaljs/core\";\n\nexport interface RomanNumeral extends Pitch {\n  readonly name: string;\n  readonly empty: boolean;\n  readonly roman: string;\n  readonly interval: string;\n  readonly acc: string;\n  readonly chordType: string;\n  readonly major: boolean;\n  readonly dir: 1;\n}\n\nexport interface NoRomanNumeral extends Partial<RomanNumeral> {\n  readonly empty: true;\n  readonly name: \"\";\n  readonly chordType: \"\";\n}\nconst NoRomanNumeral: NoRomanNumeral = { empty: true, name: \"\", chordType: \"\" };\n\nconst cache: Record<string, RomanNumeral | NoRomanNumeral> = {};\n\n/**\n * Get properties of a roman numeral string\n *\n * @function\n * @param {string} - the roman numeral string (can have type, like: Imaj7)\n * @return {Object} - the roman numeral properties\n * @param {string} name - the roman numeral (tonic)\n * @param {string} type - the chord type\n * @param {string} num - the number (1 = I, 2 = II...)\n * @param {boolean} major - major or not\n *\n * @example\n * romanNumeral(\"VIIb5\") // => { name: \"VII\", type: \"b5\", num: 7, major: true }\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function get(src: any): RomanNumeral | NoRomanNumeral {\n  return typeof src === \"string\"\n    ? cache[src] || (cache[src] = parse(src))\n    : typeof src === \"number\"\n      ? get(NAMES[src] || \"\")\n      : isPitch(src)\n        ? fromPitch(src)\n        : isNamed(src)\n          ? get(src.name)\n          : NoRomanNumeral;\n}\n\nconst romanNumeral = deprecate(\n  \"RomanNumeral.romanNumeral\",\n  \"RomanNumeral.get\",\n  get,\n);\n\n/**\n * Get roman numeral names\n *\n * @function\n * @param {boolean} [isMajor=true]\n * @return {Array<String>}\n *\n * @example\n * names() // => [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\"]\n */\nexport function names(major = true) {\n  return (major ? NAMES : NAMES_MINOR).slice();\n}\n\nfunction fromPitch(pitch: Pitch): RomanNumeral | NoRomanNumeral {\n  return get(altToAcc(pitch.alt) + NAMES[pitch.step]);\n}\n\nconst REGEX =\n  /^(#{1,}|b{1,}|x{1,}|)(IV|I{1,3}|VI{0,2}|iv|i{1,3}|vi{0,2})([^IViv]*)$/;\n\n// [name, accidentals, romanNumeral, chordType]\ntype RomanNumeralTokens = [string, string, string, string];\nexport function tokenize(str: string): RomanNumeralTokens {\n  return (REGEX.exec(str) || [\"\", \"\", \"\", \"\"]) as RomanNumeralTokens;\n}\n\nconst ROMANS = \"I II III IV V VI VII\";\nconst NAMES = ROMANS.split(\" \");\nconst NAMES_MINOR = ROMANS.toLowerCase().split(\" \");\n\nfunction parse(src: string): RomanNumeral | NoRomanNumeral {\n  const [name, acc, roman, chordType] = tokenize(src);\n  if (!roman) {\n    return NoRomanNumeral;\n  }\n\n  const upperRoman = roman.toUpperCase();\n  const step = NAMES.indexOf(upperRoman);\n  const alt = accToAlt(acc);\n  const dir = 1;\n  return {\n    empty: false,\n    name,\n    roman,\n    interval: interval({ step, alt, dir }).name,\n    acc,\n    chordType,\n    alt,\n    step,\n    major: roman === upperRoman,\n    oct: 0,\n    dir,\n  };\n}\n\nexport default {\n  names,\n  get,\n  // deprecated\n  romanNumeral,\n};\n","import { accToAlt, altToAcc, note, transpose } from \"@tonaljs/core\";\nimport { transposeFifths } from \"@tonaljs/note\";\nimport { get as roman } from \"@tonaljs/roman-numeral\";\n\nconst Empty: readonly string[] = Object.freeze([] as string[]);\n\nexport interface Key {\n  readonly type: \"major\" | \"minor\";\n  readonly tonic: string;\n  readonly alteration: number;\n  readonly keySignature: string;\n}\n\nconst NoKey: Key = {\n  type: \"major\",\n  tonic: \"\",\n  alteration: 0,\n  keySignature: \"\",\n};\n\nexport interface KeyScale {\n  readonly tonic: string;\n  readonly grades: readonly string[];\n  readonly intervals: readonly string[];\n  readonly scale: readonly string[];\n  readonly triads: readonly string[];\n  readonly chords: readonly string[];\n  readonly chordsHarmonicFunction: readonly string[];\n  readonly chordScales: readonly string[];\n}\n\nconst NoKeyScale: KeyScale = {\n  tonic: \"\",\n  grades: Empty,\n  intervals: Empty,\n  scale: Empty,\n  triads: Empty,\n  chords: Empty,\n  chordsHarmonicFunction: Empty,\n  chordScales: Empty,\n};\n\nexport interface MajorKey extends Key, KeyScale {\n  readonly type: \"major\";\n  readonly minorRelative: string;\n  readonly scale: readonly string[];\n  readonly secondaryDominants: readonly string[];\n  readonly secondaryDominantsMinorRelative: readonly string[];\n  readonly substituteDominants: readonly string[];\n  readonly substituteDominantsMinorRelative: readonly string[];\n}\n\nconst NoMajorKey: MajorKey = {\n  ...NoKey,\n  ...NoKeyScale,\n  type: \"major\",\n  minorRelative: \"\",\n  scale: Empty,\n  secondaryDominants: Empty,\n  secondaryDominantsMinorRelative: Empty,\n  substituteDominants: Empty,\n  substituteDominantsMinorRelative: Empty,\n};\n\nexport interface MinorKey extends Key {\n  readonly type: \"minor\";\n  readonly relativeMajor: string;\n  readonly natural: KeyScale;\n  readonly harmonic: KeyScale;\n  readonly melodic: KeyScale;\n}\n\nconst NoMinorKey: MinorKey = {\n  ...NoKey,\n  type: \"minor\",\n  relativeMajor: \"\",\n  natural: NoKeyScale,\n  harmonic: NoKeyScale,\n  melodic: NoKeyScale,\n};\n\nconst mapScaleToType = (scale: string[], list: string[], sep = \"\") =>\n  list.map((type, i) => `${scale[i]}${sep}${type}`);\n\nfunction keyScale(\n  grades: string[],\n  triads: string[],\n  chords: string[],\n  harmonicFunctions: string[],\n  chordScales: string[],\n) {\n  return (tonic: string): KeyScale => {\n    const intervals = grades.map((gr) => roman(gr).interval || \"\");\n    const scale = intervals.map((interval) => transpose(tonic, interval));\n\n    return {\n      tonic,\n      grades,\n      intervals,\n      scale,\n      triads: mapScaleToType(scale, triads),\n      chords: mapScaleToType(scale, chords),\n      chordsHarmonicFunction: harmonicFunctions.slice(),\n      chordScales: mapScaleToType(scale, chordScales, \" \"),\n    };\n  };\n}\n\nconst distInFifths = (from: string, to: string) => {\n  const f = note(from);\n  const t = note(to);\n  return f.empty || t.empty ? 0 : t.coord[0] - f.coord[0];\n};\n\nconst MajorScale = keyScale(\n  \"I II III IV V VI VII\".split(\" \"),\n  \" m m   m dim\".split(\" \"),\n  \"maj7 m7 m7 maj7 7 m7 m7b5\".split(\" \"),\n  \"T SD T SD D T D\".split(\" \"),\n  \"major,dorian,phrygian,lydian,mixolydian,minor,locrian\".split(\",\"),\n);\nconst NaturalScale = keyScale(\n  \"I II bIII IV V bVI bVII\".split(\" \"),\n  \"m dim  m m  \".split(\" \"),\n  \"m7 m7b5 maj7 m7 m7 maj7 7\".split(\" \"),\n  \"T SD T SD D SD SD\".split(\" \"),\n  \"minor,locrian,major,dorian,phrygian,lydian,mixolydian\".split(\",\"),\n);\nconst HarmonicScale = keyScale(\n  \"I II bIII IV V bVI VII\".split(\" \"),\n  \"m dim aug m   dim\".split(\" \"),\n  \"mMaj7 m7b5 +maj7 m7 7 maj7 o7\".split(\" \"),\n  \"T SD T SD D SD D\".split(\" \"),\n  \"harmonic minor,locrian 6,major augmented,lydian diminished,phrygian dominant,lydian #9,ultralocrian\".split(\n    \",\",\n  ),\n);\nconst MelodicScale = keyScale(\n  \"I II bIII IV V VI VII\".split(\" \"),\n  \"m m aug   dim dim\".split(\" \"),\n  \"m6 m7 +maj7 7 7 m7b5 m7b5\".split(\" \"),\n  \"T SD T SD D  \".split(\" \"),\n  \"melodic minor,dorian b2,lydian augmented,lydian dominant,mixolydian b6,locrian #2,altered\".split(\n    \",\",\n  ),\n);\n\n/**\n * Get a major key properties in a given tonic\n * @param tonic\n */\nexport function majorKey(tonic: string): MajorKey {\n  const pc = note(tonic).pc;\n  if (!pc) return NoMajorKey;\n\n  const keyScale = MajorScale(pc);\n  const alteration = distInFifths(\"C\", pc);\n  const romanInTonic = (src: string) => {\n    const r = roman(src);\n    if (r.empty) return \"\";\n\n    return transpose(tonic, r.interval) + r.chordType;\n  };\n\n  return {\n    ...keyScale,\n    type: \"major\",\n    minorRelative: transpose(pc, \"-3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    secondaryDominants: \"- VI7 VII7 I7 II7 III7 -\".split(\" \").map(romanInTonic),\n    secondaryDominantsMinorRelative: \"- IIIm7b5 IV#m7 Vm7 VIm7 VIIm7b5 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominants: \"- bIII7 IV7 bV7 bVI7 bVII7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n    substituteDominantsMinorRelative: \"- IIIm7 Im7 IIbm7 VIm7 IVm7 -\"\n      .split(\" \")\n      .map(romanInTonic),\n  };\n}\n\n/**\n * Get minor key properties in a given tonic\n * @param tonic\n */\nexport function minorKey(tnc: string): MinorKey {\n  const pc = note(tnc).pc;\n  if (!pc) return NoMinorKey;\n\n  const alteration = distInFifths(\"C\", pc) - 3;\n  return {\n    type: \"minor\",\n    tonic: pc,\n    relativeMajor: transpose(pc, \"3m\"),\n    alteration,\n    keySignature: altToAcc(alteration),\n    natural: NaturalScale(pc),\n    harmonic: HarmonicScale(pc),\n    melodic: MelodicScale(pc),\n  };\n}\n\n/**\n * Given a key signature, returns the tonic of the major key\n * @param sigature\n * @example\n * majorTonicFromKeySignature('###') // => 'A'\n */\nexport function majorTonicFromKeySignature(\n  sig: string | number,\n): string | null {\n  if (typeof sig === \"number\") {\n    return transposeFifths(\"C\", sig);\n  } else if (typeof sig === \"string\" && /^b+|#+$/.test(sig)) {\n    return transposeFifths(\"C\", accToAlt(sig));\n  }\n  return null;\n}\n\nexport default { majorKey, majorTonicFromKeySignature, minorKey };\n","import { assertNonNullable as NN, castToNumber } from \"../StdLib\";\nimport { NoteLiteral as _NoteLiteral } from \"tonal\";\nimport _Interval from \"@tonaljs/interval\";\nimport _Note from \"@tonaljs/note\";\nimport __Chord from \"@tonaljs/chord\";\nimport __Scale from \"@tonaljs/scale\";\n\n\nexport { Chord } from '@tonaljs/chord';\nexport { Scale } from '@tonaljs/scale';\nexport const _Chord = __Chord;\nexport const _Scale = __Scale;\nexport { default as _RomanNumeral } from \"@tonaljs/roman-numeral\";\nexport { default as _Note } from \"@tonaljs/note\";\nexport { default as _Interval } from \"@tonaljs/interval\";\nexport { default as _Key } from \"@tonaljs/key\";\nexport { ChordDictionary as _ChordDictionary } from \"tonal\";\n\nexport type Note = ReturnType<typeof _Note.get>\nexport type Interval = ReturnType<typeof _Interval.get>\nexport type ChordName = string;\nexport type ScaleName = string;\nexport type NoteLiteral = _NoteLiteral;\nexport const getIntervalDegree = (src: _NoteLiteral, dst: _NoteLiteral) => castToNumber(_Interval.distance(src, dst).slice(0, 1));\nexport const getChroma = (note: _NoteLiteral | null) => NN(_Note.chroma(NN(note)));","import { hsv2rgb, rgbToString } from \"../../packages/Color/index\";\nimport { _Note, _Scale, Scale } from \"../../packages/TonalObjects\";\nimport { mod } from \"../Math\";\n\n// コードを表す部分を作成\nexport const romanToColor = (roman: string, s: number, v: number) => {\n  let i: number | undefined = undefined;\n  const ROMAN = roman.toUpperCase();\n  if (0) { }\n  else if (ROMAN.includes(\"VII\")) { i = 6; }\n  else if (ROMAN.includes(\"VI\")) { i = 3; }\n  else if (ROMAN.includes(\"IV\")) { i = 4; } // IV は V より先に検知しておく\n  else if (ROMAN.includes(\"V\")) { i = 0; }\n  else if (ROMAN.includes(\"III\")) { i = 1; }\n  else if (ROMAN.includes(\"II\")) { i = 5; }\n  else if (ROMAN.includes(\"I\")) { i = 2; }\n  if (i === undefined) {\n    console.log(\"888\", roman);\n    return \"#000000\";\n  }\n  const col = hsv2rgb(360 * i / 7, s, v);\n  return rgbToString(col);\n};\n\nconst green_hue = 120; // 0:red, 120:green, 240:blue\n// C(green), Db, D, Eb, E(red), F, Gb, G, Ab(blue), A, Bb, B \nexport const noteToColor = (note: string, s: number, v: number) => {\n  if (note.length === 0) { return \"#444\"; }\n  const chroma = _Note.chroma(note);\n  const col = hsv2rgb(360 * chroma / 12 + green_hue, s, v);\n  return rgbToString(col);\n};\n\n// F C(green) G D A E(red) B F#/Gb Db Ab(blue) Eb Bb\nexport const fifthToColor = (note: string, s: number, v: number) => {\n  if (note.length === 0) { return \"#444\"; }\n  const chroma = mod(_Note.chroma(note) * 5, 12);\n  const col = hsv2rgb(360 * chroma / 12 + green_hue, s, v);\n  return rgbToString(col);\n};\n\nexport const shorten_chord = (chord: string) => {\n  const M7 = chord.replace(\"major seventh\", \"M7\");\n  const major = M7.replace(\"major\", \"\");\n  const minor = major.replace(\"minor \", \"m\").replace(\"minor\", \"m\");\n  const seventh = minor.replace(\"seventh\", \"7\");\n  return seventh;\n};\n\nexport const shorten_key = (key: Scale) => {\n  const tonic = key.tonic;\n  const type = key.type;\n  if (type === \"aeolian\") { return `${tonic?.toLowerCase()}-moll`; }\n  else if (type === \"ionian\") { return `${tonic?.toUpperCase()}-dur`; }\n  else if (type === \"minor\") { return `${tonic?.toUpperCase()}-moll`; }\n  else if (type === \"major\") { return `${tonic?.toUpperCase()}-dur`; }\n  else { return key.name; }\n};\n","export type TimeAnd = { begin: number, end: number }\nexport interface TimeAndItem<T> extends TimeAnd { item: T }\n\nexport const compress = <T>(arr: T[]) => {\n  const ret: TimeAndItem<T>[] = [];\n  let begin = 0;\n  let _item = arr[0];\n  arr.forEach((e, i) => {\n    if (_item !== e) {\n      ret.push({ begin, end: i, item: _item });\n      begin = i;\n      _item = e;\n    }\n  });\n  ret.push({ begin, end: arr.length, item: _item });\n  return ret;\n};\n\n// 指定区間の item の探索\n// begin <= item.end && item.begin < end\nexport const search_items_overlaps_range = <U extends TimeAnd>(\n  items: U[],\n  begin: number,\n  end: number,\n) => {\n  // Require: item は時間昇順にソート済み\n  let bl = 0;\n  let el = 0;\n  let br = items.length;\n  let er = items.length;\n  const b_tgt = begin;\n  const e_tgt = end;\n\n  if (items.length === 0) { return { begin_index: 0, end_index: 0 }; }\n  while (br - bl > 1 && er - el > 1) {\n    const bmf = bl + Math.floor((br - bl) / 2);\n    const bmc = bl + Math.ceil((br - bl) / 2);\n    const bm_val = items[bmf].end;\n    if (b_tgt < bm_val) { br = bmc; }\n    else if (bm_val < b_tgt) { bl = bmf; }\n    else { bl = bmf; }\n    \n    const emf = el + Math.floor((er - el) / 2);\n    const emc = el + Math.ceil((er - el) / 2);\n    const em_val = items[emc].begin;\n    if (e_tgt < em_val) { er = emc; }\n    else if (em_val < e_tgt) { el = emf; }\n    else { er = emc; }\n  }\n  if (b_tgt < items[bl].end) { br = bl; }\n\n  return { begin_index: br, end_index: er };\n};\n\n// 指定区間の item の探索\n// begin <= item.begin < end\nexport const search_items_begins_in_range = <U extends TimeAnd>(\n  items: U[],\n  begin: number,\n  end: number,\n) => {\n  // Require: item は時間昇順にソート済み\n  let bl = 0;\n  let el = 0;\n  let br = items.length;\n  let er = items.length;\n  const b_tgt = begin;\n  const e_tgt = end;\n\n  if (items.length === 0) { return { begin_index: 0, end_index: 0 }; }\n  while (br - bl > 1 && er - el > 1) {\n    const bmf = bl + Math.floor((br - bl) / 2);\n    const bmc = bl + Math.ceil((br - bl) / 2);\n    const bm_val = items[bmf].begin;\n    if (b_tgt < bm_val) { br = bmc; }\n    else if (bm_val < b_tgt) { bl = bmf; }\n    else { bl = bmf; }\n    \n    const emf = el + Math.floor((er - el) / 2);\n    const emc = el + Math.ceil((er - el) / 2);\n    const em_val = items[emc].begin;\n    if (e_tgt < em_val) { er = emc; }\n    else if (em_val < e_tgt) { el = emf; }\n    else { er = emc; }\n  }\n  if (b_tgt <= items[bl].begin) { br = bl; }\n\n  return { begin_index: br, end_index: er };\n};\n","import { HTML, SVG } from \"../../packages/HTML\";\nimport { vMod, getRange, vAdd, mod, decimal, argmax, getZeros, totalSum, correlation } from \"../../packages/Math\";\nimport { hsv2rgb, rgbToString } from \"../../packages/Color\";\nimport { play } from \"../../packages/Synth\";\nimport { _Chord, _Note, _Scale } from \"../../packages/TonalObjects\";\nimport { fifthToColor, shorten_chord, shorten_key } from \"../../packages/chordView\";\nimport { search_items_overlaps_range, search_items_begins_in_range, TimeAnd } from \"../../packages/timeAnd\";\nimport { TimeAndRomanAnalysis } from \"../../packages/chordToRoman\";\nimport { TimeAndMelodyAnalysis } from \"../../packages/melodyAnalyze\";\n\nconst debug_mode = true;\nconst debug_log_element = HTML.p({ name: \"debug\" });\nif (debug_mode) {\n  document.body.insertAdjacentElement(\"afterbegin\", debug_log_element);\n}\n\ninterface MusicAnalyzerWindow extends Window {\n  MusicAnalyzer: { roman: TimeAndRomanAnalysis[], melody: TimeAndMelodyAnalysis[] }\n  play: typeof play\n}\ndeclare const window: MusicAnalyzerWindow;\n\nconst detected_romans: TimeAndRomanAnalysis[] = window.MusicAnalyzer.roman.map(e => e);\nconst detected_melodies: TimeAndMelodyAnalysis[] = window.MusicAnalyzer.melody.map(e => e);\nconst romans = detected_romans.map(e => e);\nconst melodies = detected_melodies.map(e => e).filter((e, i) => i + 1 >= detected_melodies.length || 60 / (detected_melodies[i + 1].begin - detected_melodies[i].begin) < 300 * 4);\n\nwindow.play = play;  // NOTE:コンソールデバッグ用\nconsole.log(romans);\nconsole.log(melodies);\n// const notes = roman[0].chords[1][2].notes;  // 0 個目のコード列の1番目の推定候補の2個目のコードの構成音\n\n// テンポの計算\nconst calcTempo = () => {\n  const melody_bpm: number[] = [];\n  const bpm_range = 90;\n  const onsets = getZeros(Math.ceil(melodies[melodies.length - 1].end * 100));\n  const melody_phase: number[][] = getRange(0, 90).map(i => getZeros(90 + i));  // [bpm][phase]\n  const b = Math.log2(90);  // 90 ~ 180\n  melodies.forEach((e, i) => {\n    if (i + 1 >= melodies.length) { return; }\n    const term = melodies[i + 1].begin - melodies[i].begin + (Math.random() - 0.5) / 100;\n    if (60 / term > 300 * 4) { return; }\n    const bpm2 = Math.round(Math.pow(2, decimal(Math.log2(60 / term) - b) + b));\n    const bpm = Math.round(Math.pow(3, decimal(Math.log2(bpm2) / Math.log2(3) - b / Math.log2(3)) + b / Math.log2(3)));\n    if (isNaN(melody_bpm[bpm])) { melody_bpm[bpm] = 0; }\n    melody_bpm[bpm]++;\n\n    // ビートを求める方法その2 (考え中)\n    getRange(0, bpm_range).forEach(bpm => {\n      melody_phase[bpm][Math.floor(mod(e.begin, bpm + 90))]++;\n    });\n    // ビートを求める方法その3 (採用中 & 考え中)\n    onsets[Math.floor(e.begin * 100)] = 1;\n  });\n  console.log(\"melody_bpm\");\n  console.log(melody_bpm);\n\n  // ビートを求める方法その2 (考え中)\n  const entropy = melody_phase.map(e => {\n    const sum = totalSum(e);\n    const prob = e.map(e => e / sum);\n    return totalSum(prob.map(p => p === 0 ? 0 : -p * Math.log2(p)));\n  });\n  console.log(melody_phase);\n  console.log(\"bpm_entropy\");\n  console.log(entropy);\n\n  // ビートを求める方法その3 (採用中 & 考え中)\n  onsets.forEach((e, i) => e === 0 && i !== 0 && (onsets[i] = onsets[i - 1] * 0.9));  // オンセット時に最大値, 時間経過で減衰する信号を作る\n  const w = (tau: number) => {\n    const tau_0 = 50;  // 0.5 * 100\n    const sigma_tau = 2;\n    const x = Math.log2(tau / tau_0) / sigma_tau;\n    return Math.exp(-x * x / 2);\n  };\n  console.log(\"onsets\");\n  console.log(onsets);\n  const tps = correlation(onsets, onsets).map((e, tau) => w(tau) * e[0]);\n  console.log(\"tempo period strength\");\n  console.log(tps);\n  console.log(argmax(tps));\n  console.log(tps.map((e, i) => [e, i]).sort((p, c) => p[0] > c[0] ? -1 : p[0] === c[0] ? 0 : 1));\n\n  // NOTE: 未使用\n  const roman_bpm: number[] = [];\n  romans.forEach((_, i) => {\n    if (i + 1 >= romans.length) { return; }\n    const term = romans[i + 1].begin - romans[i].begin;\n    const bpm2 = Math.round(Math.pow(2, decimal(Math.log2(60 / term) - b) + b));\n    const bpm = Math.round(Math.pow(3, decimal(Math.log2(bpm2) / Math.log2(3) - b / Math.log2(3)) + b / Math.log2(3)));\n    if (isNaN(roman_bpm[bpm])) { roman_bpm[bpm] = 0; }\n    roman_bpm[bpm]++;\n  });\n  console.log(\"roman_bpm\");\n  console.log(roman_bpm);\n  return argmax(tps);\n};\nconst tempo = calcTempo();\nconst phase = 0;\n\nconst audio_area = document.getElementById(\"audio_area\")!;\nconst audio: HTMLAudioElement | HTMLVideoElement = (() => {\n    const a = audio_area.getElementsByTagName(\"audio\");\n    const v = audio_area.getElementsByTagName(\"video\");\n    if (a.length > 0) { return a[0]; }\n    else { return v[0]; }\n  })();\n\nclass RectParameters {\n  width: number;\n  height: number;\n  fill: string;\n  stroke: string;\n  constructor(args: { width: number, height: number, fill: string, stroke: string }) {\n    this.width = args.width;\n    this.height = args.height;\n    this.fill = args.fill;\n    this.stroke = args.stroke;\n  }\n}\n\n// --- ピアノロールの描画パラメータ\nconst getPianoRollWidth = () => window.innerWidth - 48;  // innerWidth が動的に変化する\nconst octave_height = 3 * 84;  // 7 白鍵と 12 半音をきれいに描画するには 7 * 12 の倍数が良い\nconst octave_cnt = 3;\nconst piano_roll_begin = 83;\nconst white_key_prm = new RectParameters({ width: 36, height: octave_height / 7, fill: \"#fff\", stroke: \"#000\", });\nconst black_key_prm = new RectParameters({ width: white_key_prm.width * 2 / 3, height: octave_height / 12, fill: \"#444\", stroke: \"#000\", });\nconst white_bgs_prm = new RectParameters({ width: getPianoRollWidth(), height: octave_height / 12, fill: \"#eee\", stroke: \"#000\", });\nconst black_bgs_prm = new RectParameters({ width: getPianoRollWidth(), height: octave_height / 12, fill: \"#ccc\", stroke: \"#000\", });\n\nconst piano_roll_height = octave_height * octave_cnt;\nconst black_position = vMod(vAdd([2, 4, 6, 9, 11], piano_roll_begin), 12);\nconst white_position = getRange(0, 12).filter(e => !black_position.includes(e));\nconst chord_text_em = 4;\nconst chord_text_size = 16 * chord_text_em;\nconst key_text_pos = -chord_text_size * 3;\nconst piano_roll_time_length = 5;  // 1 画面に収める曲の長さ[秒]\nconst chord_name_margin = 5;\n\nconst triangle_width = 5;\nconst triangle_height = 5;\n\n\ninterface TimeAndSVGs<T extends SVGElement> extends TimeAnd { svg: T; }\n\nclass SvgWindow<T extends SVGElement, U extends TimeAndSVGs<T>> {\n  readonly all: U[];\n  readonly show: U[];\n  readonly group: SVGGElement;\n  constructor(name: string, all: U[]) {\n    this.all = all;\n    this.show = [];//all.map(e => e);\n    this.group = SVG.g({ name }, undefined, this.show.map(e => e.svg));\n  }\n  updateShow(begin: number, end: number) {\n    // const remain = search_items_in_range(this.show, begin, end);\n    // this.show.splice(0, remain.begin_index).forEach(e=>this.group.removeChild(e.svg));  // 左側にはみ出したものを消す\n    // this.show.splice(remain.end_index, this.show.length - remain.end_index).forEach(e=>this.group.removeChild(e.svg));  // 右側にはみ出したものを消す\n    this.show.splice(0, this.show.length);  // 全部消す\n    this.group.childNodes.forEach(e => this.group.removeChild(e));  // 全部消す\n    const append = search_items_overlaps_range(this.all, begin, end);\n    this.all.slice(append.begin_index, append.end_index).forEach(e => { this.show.push(e); this.group.appendChild(e.svg); });  // 必要分全部追加する\n  }\n}\n\n// svg element の作成\nconst chord_rects = new SvgWindow(\"chords\",\n  romans.map(e => getRange(0, octave_cnt).map(oct => _Chord.get(e.chord).notes.map(note => ({\n    svg: SVG.rect({ fill: fifthToColor(_Chord.get(e.chord).tonic!, 0.5, 0.9), stroke: \"#444\" }),\n    begin: e.begin,\n    end: e.end,\n    y: (-1 - mod(_Note.chroma(note), 12) + 12 * (oct + 1)) * black_key_prm.height,\n    w: e.end - e.begin,\n    h: black_key_prm.height\n  })))).flat(2)\n);\nconst chord_names = new SvgWindow(\"chord-names\",\n  romans.map(e => ({\n    svg: SVG.text({ id: \"chord-name\", \"font-family\": 'Times New Roman', \"font-size\": `${chord_text_em}em`, fill: fifthToColor(_Chord.get(e.chord).tonic!, 1, 0.75) || \"#000\" }, shorten_chord(_Chord.get(e.chord).name)),\n    begin: e.begin,\n    end: e.end,\n    y: piano_roll_height + chord_text_size\n  }))\n);\nconst chord_romans = new SvgWindow(\"roman-names\",\n  romans.map(e => ({\n    svg: SVG.text({ id: \"roman-name\", \"font-family\": 'Times New Roman', \"font-size\": `${chord_text_em}em`, fill: fifthToColor(_Chord.get(e.chord).tonic!, 1, 0.75) || \"#000\" }, shorten_chord(e.roman)),\n    begin: e.begin,\n    end: e.end,\n    y: piano_roll_height + chord_text_size * 2 + chord_name_margin\n  }))\n);\nconst chord_keys = new SvgWindow(\"key-names\",\n  romans.map(e => ({\n    svg: SVG.text({ id: \"key-name\", \"font-family\": 'Times New Roman', \"font-size\": `${chord_text_em}em`, fill: fifthToColor(_Scale.get(e.scale).tonic!, 1, 0.75) || \"#000\" }, shorten_key(_Scale.get(e.scale))),\n    begin: e.begin,\n    end: e.end,\n    y: piano_roll_height + chord_text_size * 2 + chord_name_margin\n  }))\n);\n\nconsole.log(\"tempo\");\nconsole.log(tempo);\nconsole.log(\"duration\");\nconsole.log(audio.duration);\nconsole.log(\"last melody\");\nconsole.log(melodies[melodies.length - 1].end);\nconst beat_bars = new SvgWindow(\"beat-bars\",\n  getRange(0, Math.ceil(tempo * melodies[melodies.length - 1].end) + phase).map(i => ({\n    svg: SVG.line({ id: \"bar\", stroke: \"#000\" }),\n    begin: i * 60 / tempo,\n    end: (i + 1) * 60 / tempo,\n    y1: 0,\n    y2: piano_roll_height,\n    sound_reserved: false\n  }))\n);\n\nconst d_melody_svgs = new SvgWindow(\"detected-melody\",\n  detected_melodies.map(e => ({\n    svg: SVG.rect({ name: \"melody-note\", fill: rgbToString(hsv2rgb(0, 0, 0.75)), stroke: \"#444\" }),\n    begin: e.begin,\n    end: e.end,\n    note: e.note,\n    y: (piano_roll_begin - e.note) * black_key_prm.height,\n    w: e.end - e.begin,\n    h: black_key_prm.height\n  }))\n);\n\nconst melody_svgs = new SvgWindow(\"melody\",\n  melodies.map(e => ({\n    svg: SVG.rect({ name: \"melody-note\", fill: rgbToString(hsv2rgb(180 + 360 * 2 / 7, 0.5, 0.9)), stroke: \"#444\" }),\n    begin: e.begin,\n    end: e.end,\n    note: e.note,\n    y: (piano_roll_begin - e.note) * black_key_prm.height,\n    w: e.end - e.begin,\n    h: black_key_prm.height,\n    sound_reserved: false,\n  }))\n);\nconst arrow_svgs = melodies.map((e, i) => {\n  const stroke = rgbToString([0, 0, 0]);\n  const next = melodies.length <= i + 1 ? melodies[i] : melodies[i + 1];\n  const fill = rgbToString([0, 0, 0]);\n  // let fill = rgbToString(hsv2rgb(180 + 360 * 2 / 7, 0.5, 0.9));\n  // if (i === 1 && e.roman_name !== undefined) { fill = romanToColor(e.roman_name, 0.5, 0.9) }\n  return e.melody_analysis.gravity.filter(g => g.resolved && g.destination !== undefined).map(gravity => {\n    return {\n      triangle: SVG.polygon({ name: \"gravity-arrow\", stroke, fill, \"stroke-width\": 5 }),\n      line: SVG.line({ name: \"gravity-arrow\", stroke, \"stroke-width\": 5 }),\n      begin: e.begin,\n      end: e.end,\n      note: e.note,\n      next,\n      destination: gravity.destination,\n      src_x0: (e.end - e.begin) / 2 + e.begin,\n      dst_x0: next.begin,\n      src_y0: (piano_roll_begin + 0.5 - e.note) * black_key_prm.height,\n      dst_y0: (piano_roll_begin + 0.5 - gravity.destination!) * black_key_prm.height,\n    };\n  });\n}).flat(2);\n\n\nconst white_BGs = [...Array(octave_cnt)].map((_, oct) =>\n  [...Array(7)].map((_, j) => ({\n    svg: SVG.rect({ name: \"white-BG\", fill: white_bgs_prm.fill, stroke: white_bgs_prm.stroke, }),\n    oct,\n    y: octave_height * oct + white_bgs_prm.height * white_position[j],\n    width: white_bgs_prm.width,\n    height: white_bgs_prm.height\n  }))\n).flat();\nconst black_BGs = [...Array(octave_cnt)].map((_, oct) =>\n  [...Array(5)].map((_, j) => ({\n    svg: SVG.rect({ name: \"black-BG\", fill: black_bgs_prm.fill, stroke: black_bgs_prm.stroke, }),\n    oct,\n    y: octave_height * oct + black_bgs_prm.height * black_position[j],\n    width: black_bgs_prm.width,\n    height: black_bgs_prm.height\n  }))\n).flat();\nconst white_key = [...Array(octave_cnt)].map((_, oct) =>\n  [...Array(7)].map((_, j) => ({\n    svg: SVG.rect({ name: \"white-key\", fill: white_key_prm.fill, stroke: white_key_prm.stroke, }),\n    oct,\n    y: octave_height * oct + white_key_prm.height * [0, 1, 2, 3, 4, 5, 6][j],\n    width: white_key_prm.width,\n    height: white_key_prm.height\n  }))\n).flat();\nconst black_key = [...Array(octave_cnt)].map((_, oct) =>\n  [...Array(5)].map((_, j) => ({\n    svg: SVG.rect({ name: \"black-key\", fill: black_key_prm.fill, stroke: black_key_prm.stroke, }),\n    oct,\n    y: octave_height * oct + black_key_prm.height * black_position[j],\n    width: black_key_prm.width,\n    height: black_key_prm.height\n  }))\n).flat();\n\nconst octave_BGs = [...Array(octave_cnt)].map((_, oct) => ({\n  y: octave_height * oct,\n  height: octave_height,\n  oct,\n  svg: SVG.g({ name: \"octave-BG\" }, undefined, [\n    white_BGs.filter(e => e.oct === oct).map(e => e.svg),\n    black_BGs.filter(e => e.oct === oct).map(e => e.svg)\n  ])\n}));\nconst octave_key = [...Array(octave_cnt)].map((_, oct) => ({\n  y: octave_height * oct,\n  height: octave_height,\n  oct,\n  svg: SVG.g({ name: \"octave-key\" }, undefined, [\n    white_key.filter(e => e.oct === oct).map(e => e.svg),\n    black_key.filter(e => e.oct === oct).map(e => e.svg)\n  ])\n}));\nconst current_time_line = SVG.line({ name: \"current_time\", \"stroke-width\": 5, stroke: \"#000\" });\nconst piano_roll = SVG.svg({ name: \"piano-roll\" }, undefined, [\n  // 奥側\n  SVG.g({ name: \"octave-BGs\" }, undefined, octave_BGs.map(e => e.svg)),\n\n  beat_bars.group,\n\n  chord_rects.group,\n  chord_names.group,\n  chord_romans.group,\n  chord_keys.group,\n\n  d_melody_svgs.group,\n  melody_svgs.group,\n\n  SVG.g({ name: \"gravities\" }, undefined, [\n    arrow_svgs.map(e => e.line),\n    arrow_svgs.map(e => e.triangle)\n  ]),\n\n  SVG.g({ name: \"octave-keys\" }, undefined, octave_key.map(e => e.svg)),\n  current_time_line,\n  // 手前側\n]);\nconst piano_roll_place = document.getElementById(\"piano-roll-place\");\npiano_roll_place?.insertAdjacentElement(\"afterbegin\", piano_roll);\n\nconst insertMelody = () => {\n  console.log(\"insert melody\");\n};\n\nconst deleteMelody = () => {\n  console.log(\"delete melody\");\n};\n\ntype ArrowSVGs = typeof arrow_svgs;\nconst refresh_arrow = (arrow_svgs: ArrowSVGs, note_size: number, current_time_x: number, std_pos: number) => arrow_svgs.forEach(e => {\n  const src_x = e.src_x0 * note_size - std_pos + current_time_x;\n  const dst_x = e.dst_x0 * note_size - std_pos + current_time_x;\n  const src_y = e.src_y0;\n  const dst_y = e.dst_y0;\n\n  const dx = dst_x - src_x;\n  const dy = dst_y - src_y;\n  const r = Math.sqrt(dx * dx + dy * dy);\n  const cos = -dy / r;\n  const sin = dx / r;\n  const p = [\n    dst_x,\n    dst_y,\n    dst_x + cos * triangle_width - sin * triangle_height,\n    dst_y + sin * triangle_width + cos * triangle_height,\n    dst_x + cos * -triangle_width - sin * triangle_height,\n    dst_y + sin * -triangle_width + cos * triangle_height\n  ];\n  e.triangle.setAttributes({ points: `${p.join(\",\")}` });\n  e.line.setAttributes({ x1: src_x, x2: dst_x, y1: src_y, y2: dst_y });\n});\n\nlet old_time = Date.now();\nconst fps_element = HTML.p({ name: \"fps\" }, `fps:${0}`);\n\nlet last_audio_time = Number.MIN_SAFE_INTEGER;\nconst refresh = () => {\n  const now = Date.now();\n  const fps = Math.floor(1000 / (now - old_time));\n  fps_element.textContent = `fps:${(\" \" + fps).slice(-3)} ${fps < 60 ? '<' : '>'} 60`;\n  old_time = now;\n  const now_at = audio.currentTime;\n  if (audio.paused && now_at === last_audio_time) { return; }\n  last_audio_time = now_at;\n\n  const current_time_ratio = 1 / 4;\n  const current_time_x = getPianoRollWidth() * current_time_ratio;\n  const piano_roll_width = getPianoRollWidth();\n  const note_size = piano_roll_width / piano_roll_time_length;\n\n  chord_rects.updateShow(now_at - piano_roll_time_length * current_time_ratio, now_at + piano_roll_time_length);\n  chord_names.updateShow(now_at - piano_roll_time_length * current_time_ratio, now_at + piano_roll_time_length);\n  chord_romans.updateShow(now_at - piano_roll_time_length * current_time_ratio, now_at + piano_roll_time_length);\n  chord_keys.updateShow(now_at - piano_roll_time_length * current_time_ratio, now_at + piano_roll_time_length);\n  beat_bars.updateShow(now_at - piano_roll_time_length * current_time_ratio, now_at + piano_roll_time_length);\n  d_melody_svgs.updateShow(now_at - piano_roll_time_length * current_time_ratio, now_at + piano_roll_time_length);\n  melody_svgs.updateShow(now_at - piano_roll_time_length * current_time_ratio, now_at + piano_roll_time_length);\n  chord_rects.show.forEach(e => e.svg.setAttributes({ x: current_time_x + (e.begin - now_at) * note_size, y: e.y, width: e.w * note_size, height: e.h, }));\n  chord_names.show.forEach(e => e.svg.setAttributes({ x: current_time_x + (e.begin - now_at) * note_size, y: e.y }));\n  chord_romans.show.forEach(e => e.svg.setAttributes({ x: current_time_x + (e.begin - now_at) * note_size, y: e.y }));\n  chord_keys.show.forEach(e => e.svg.setAttributes({ x: current_time_x + (e.begin - now_at) * note_size + key_text_pos, y: e.y }));\n  beat_bars.show.forEach(e => e.svg.setAttributes({ x1: current_time_x + (e.begin - now_at) * note_size, x2: current_time_x + (e.begin - now_at) * note_size, y1: e.y1, y2: e.y2 }));\n  d_melody_svgs.show.forEach(e => e.svg.setAttributes({ x: current_time_x + (e.begin - now_at) * note_size, y: e.y, width: e.w * note_size, height: e.h, onclick: \"insertMelody()\", }));\n  melody_svgs.show.forEach(e => e.svg.setAttributes({ x: current_time_x + (e.begin - now_at) * note_size, y: e.y, width: e.w * note_size, height: e.h, onclick: \"deleteMelody()\", }));\n  refresh_arrow(arrow_svgs, note_size, current_time_x, now_at * note_size);\n\n  const reservation_range = 1 / 15;  // second\n\n  const beat_range = search_items_begins_in_range(beat_bars.show, now_at, now_at + reservation_range);\n  for (let i = beat_range.begin_index; i < beat_range.end_index; i++) {\n    const e = beat_bars.show[i];\n    if (e.sound_reserved === false) {\n      play([220], e.begin - now_at, 0.125);\n      e.sound_reserved = true;\n      setTimeout(() => { e.sound_reserved = false; }, reservation_range * 1000);\n    }\n  }\n\n  const melody_range = search_items_begins_in_range(melody_svgs.show, now_at, now_at + reservation_range);\n  for (let i = melody_range.begin_index; i < melody_range.end_index; i++) {\n    const e = melody_svgs.show[i];\n    if (e.sound_reserved === false) {\n      play([440 * Math.pow(2, (e.note - 69) / 12)], e.begin - now_at, e.end - e.begin);\n      e.sound_reserved = true;\n      setTimeout(() => { e.sound_reserved = false; }, reservation_range * 1000);\n    }\n  }\n};\n\n// TODO: refresh を draw のときに呼び出すようにする\n// 多分値が最初の時刻を想定した値になっているので直す\nconst draw = () => {\n  // 各 svg のパラメータを更新する\n  const piano_roll_width = getPianoRollWidth();\n  const current_time_x = piano_roll_width / 4;\n  const chord_name_margin = 5;\n\n  white_bgs_prm.width = piano_roll_width;\n  black_bgs_prm.width = piano_roll_width;\n\n  black_BGs.forEach(e => e.svg.setAttributes({ x: 0, y: e.y, width: e.width, height: e.height }));\n  white_BGs.forEach(e => e.svg.setAttributes({ x: 0, y: e.y, width: e.width, height: e.height }));\n  black_key.forEach(e => e.svg.setAttributes({ x: 0, y: e.y, width: e.width, height: e.height }));\n  white_key.forEach(e => e.svg.setAttributes({ x: 0, y: e.y, width: e.width, height: e.height }));\n\n  octave_BGs.forEach(e => e.svg.setAttributes({ x: 0, y: e.y, width: piano_roll_width, height: e.height }));\n  octave_key.forEach(e => e.svg.setAttributes({ x: 0, y: e.y, width: piano_roll_width, height: e.height }));\n  piano_roll.setAttributes({ x: 0, y: 0, width: piano_roll_width, height: piano_roll_height + chord_text_size * 2 + chord_name_margin });\n\n  current_time_line.setAttributes({ x1: current_time_x, x2: current_time_x, y1: 0, y2: piano_roll_height });\n  refresh();\n};\n\n\n\n// ---------- main ---------- //\nconst main = () => {\n  console.log(search_items_begins_in_range(melodies, 30, 90));\n  // audio.addEventListener(\"timeupdate\", refresh);\n\n  const update = () => {\n    requestAnimationFrame(update);\n    refresh();\n  };\n\n  window.onresize = e => draw();\n  draw();\n  update();\n\n  1 && (\n    document.body.insertAdjacentElement(\"beforeend\", fps_element),\n    console.log(tempo)\n  );\n};\nmain();\n"],"mappings":"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","names":["Arraying","e","concat","arr","res","attributes","key","text","nodes","node","d","setComponentsToElement","element","children","child","htmlElement","tag","svgElement","qualifiedName","SVG","HTML","getRange","begin","end","step","_","i","getZeros","length","e","vFunc","a","b","f","mod","n","m","decimal","vAdd","vector1","vector2","vFunc","a","b","vMod","vector1","vector2","vFunc","a","b","mod","argmax","array","e","i","p","c","totalSum","array","p","c","complex","c1","c2","fftUtil","k","N","x","fft","seq","zero","_","i","res","X_evens","X_odds","t","e","ifft","ps","convolution","seq1","seq2","f_seq1","f_seq2","mul","correlation","mod","n","m","hsv2rgb","h","s","v","H","f","x","e","rgbToString","rgb","audioCtx","createOscillator","ctx","parentNode","type","frequency","detune","osc","createGain","gain","gainNode","play","hzs","begin_sec","length_sec","parent","peak","attack","decay","sustain","release","detune_delta","hz","i","gain_node","start","delay","audioParam","isNamedPitch","src","isPitch","pitch","FIFTHS","STEPS_TO_OCTS","fifths","coordinates","step","alt","oct","dir","f","o","FIFTHS_TO_STEPS","coord","unaltered","i","fillStr","s","n","NoInterval","INTERVAL_TONAL_REGEX","INTERVAL_SHORTHAND_REGEX","REGEX","tokenizeInterval","str","m","cache","interval","src","parse","isPitch","pitchName","isNamedPitch","SIZES","TYPES","tokens","num","q","step","t","type","name","dir","simple","alt","qToAlt","oct","semitones","chroma","coord","coordinates","coordToInterval","forceDescending","f","o","isDescending","ivl","pitch","props","calcNum","d","altToQ","fillStr","s","n","NoNote","cache","stepToLetter","step","altToAcc","alt","accToAlt","acc","note","src","stringSrc","cached","value","parse","isPitch","pitchName","isNamedPitch","REGEX","tokenizeNote","str","m","coordToNote","noteCoord","pitch","mod","SEMI","noteName","tokens","letter","octStr","oct","coord","coordinates","name","pc","chroma","height","midi","freq","props","transpose","noteName","intervalName","note","intervalCoord","interval","noteCoord","tr","coordToNote","tonicIntervalsTransposer","intervals","tonic","len","normalized","index","octaves","root","distance","fromNote","toNote","from","to","fcoord","tcoord","fifths","octs","forceDescending","coordToInterval","deprecate","original","alternative","fn","args","isNamed","isNamedPitch","rotate","times","arr","len","n","compact","EmptyPcset","setNumToChroma","num","chromaToNumber","chroma","REGEX","isChroma","set","isPcsetNum","isPcset","cache","get","src","listToChroma","chromaToPcset","pcset","deprecate","IVLS","chromaToIntervals","chroma","intervals","i","modes","set","normalize","binary","get","compact","_","i","r","rotate","isSubsetOf","set","s","get","notes","o","isSupersetOf","chromaRotations","chroma","binary","_","i","rotate","chromaToPcset","setNum","chromaToNumber","normalizedNum","n","normalized","setNumToChroma","intervals","chromaToIntervals","listToChroma","set","EmptyPcset","pitch","note","interval","CHORDS","data_default","NoChordType","EmptyPcset","dictionary","index","get","type","chordType","deprecate","all","dictionary","entries","deprecate","add","intervals","aliases","fullName","quality","getQuality","chord","get","dictionary","index","alias","addAlias","has","interval","data_default","ivls","names","a","b","namedSet","notes","pcToName","record","n","chroma","note","detect","source","options","x","findMatches","chord","b","BITMASK","testChromaNumber","bitmask","chromaNumber","hasAnyThird","hasPerfectFifth","hasAnySeventh","hasNonPerfectFifth","hasAnyThirdAndPerfectFifthAndAnySeventh","chordType","withPerfectFifth","weight","tonic","tonicChroma","noteName","allModes","modes","found","mode","index","modeWithPerfectFifth","all","chordName","baseNote","IQ","add","combinator","a","b","subtract","combinator","a","b","combinator","fn","a","b","coordA","interval","coordB","coord","coordToInterval","SCALES","data_default","NoScaleType","EmptyPcset","dictionary","index","get","type","index","NoScaleType","scaleType","deprecate","all","dictionary","entries","add","intervals","name","aliases","scale","get","dictionary","index","alias","addAlias","data_default","ivls","NoChord","tokenize","name","letter","acc","oct","type","tokenizeNote","tokenizeBass","note","chord","split","get","src","getChord","tonic","bass","typeName","optionalTonic","optionalBass","bassInterval","distance","bassIndex","hasRoot","root","rootDegree","hasBass","intervals","i","num","quality","newNum","ivl","subtract","notes","transpose","symbol","chordName","interval","tr","slash","chordScales","s","isChordIncluded","isSupersetOf","all","scale","extended","isSuperset","reduced","isSubset","isSubsetOf","degrees","tonicIntervalsTransposer","degree","steps","chord_default","detect","DATA","data_default","VALUES","denominator","shorthand","names","add","add","denominator","shorthand","names","VALUES","L2","L440","freqToMidi","freq","v","SHARPS","FLATS","midiToNoteName","midi","options","pc","o","NAMES","toName","n","onlyNotes","array","note","names","get","name","pitchClass","accidentals","octave","midi","freq","chroma","fromMidi","midiToNoteName","fromFreq","freqToMidi","fromFreqSharps","fromMidiSharps","transpose","tr","transposeBy","interval","trBy","transposeFrom","trFrom","transposeFifths","noteName","fifths","trFifths","transposeOctaves","octaves","ascending","a","b","descending","sortedNames","notes","comparator","sortedUniqNames","i","simplify","enharmonic","destName","src","dest","srcChroma","destChroma","destOctOffset","destOct","note_default","NoRomanNumeral","cache","get","src","parse","NAMES","isPitch","fromPitch","isNamed","romanNumeral","deprecate","fromPitch","pitch","get","altToAcc","NAMES","REGEX","tokenize","str","ROMANS","NAMES_MINOR","parse","src","name","acc","roman","chordType","NoRomanNumeral","upperRoman","step","alt","accToAlt","dir","interval","Empty","NoKey","NoKeyScale","NoMajorKey","NoMinorKey","mapScaleToType","scale","list","sep","type","i","keyScale","grades","triads","chords","harmonicFunctions","chordScales","tonic","intervals","gr","get","interval","transpose","MajorScale","keyScale","NaturalScale","HarmonicScale","MelodicScale","MODES","NoMode","EmptyPcset","modes","toMode","index","mode","alias","get","name","deprecate","all","entries","toMode","mode","modeNum","setNum","alt","name","triad","seventh","alias","aliases","chroma","get","chords","modeName","tonic","mode","get","triads","rotate","tonics","i","transpose","triad","MODES","x","seventhChords","NoScale","tokenize","name","i","tonic","note","n","type","get","src","tokens","tokenize","tonic","note","st","NoScale","type","notes","transpose","name","scale","deprecate","topNoteDiff","voicings","lastVoicing","topNoteMidi","voicing","note_default","diff","b","voice_leading_default","triads","lefthand","all","defaultDictionary","lookup","symbol","dictionary","aliases","chord_default","match","_symbol","voicing_dictionary_default","defaultDictionary","voicing_dictionary_default","defaultVoiceLeading","voice_leading_default","isNamedPitch","src","isPitch","pitch","FIFTHS","STEPS_TO_OCTS","fifths","coordinates","step","alt","oct","dir","f","o","FIFTHS_TO_STEPS","coord","unaltered","i","fillStr","s","n","NoInterval","INTERVAL_TONAL_REGEX","INTERVAL_SHORTHAND_REGEX","REGEX","tokenizeInterval","str","m","cache","interval","parse","pitchName","SIZES","TYPES","tokens","num","q","t","type","name","simple","qToAlt","semitones","chroma","coordToInterval","forceDescending","isDescending","ivl","props","calcNum","d","altToQ","NoNote","stepToLetter","altToAcc","accToAlt","acc","note","stringSrc","cached","value","tokenizeNote","coordToNote","noteCoord","mod","SEMI","noteName","letter","octStr","pc","height","midi","freq","transpose","intervalName","intervalCoord","tr","tonicIntervalsTransposer","intervals","tonic","len","normalized","index","octaves","root","distance","fromNote","toNote","from","to","fcoord","tcoord","octs","IQ","add","combinator","a","b","subtract","combinator","a","b","combinator","fn","a","b","coordA","interval","coordB","coord","coordToInterval","deprecate","original","alternative","args","isNamed","isNamedPitch","L2","L440","freqToMidi","freq","v","SHARPS","FLATS","midiToNoteName","midi","options","pc","o","NAMES","toName","n","onlyNotes","array","note","names","get","name","pitchClass","accidentals","octave","chroma","fromMidi","fromFreq","fromFreqSharps","fromMidiSharps","transpose","tr","transposeBy","trBy","transposeFrom","trFrom","transposeFifths","noteName","fifths","trFifths","transposeOctaves","octaves","ascending","descending","sortedNames","notes","comparator","sortedUniqNames","i","simplify","enharmonic","destName","src","dest","srcChroma","destChroma","destOctOffset","destOct","note_default","ascR","descR","range","from","to","rotate","times","arr","len","compact","EmptyPcset","setNumToChroma","num","chromaToNumber","REGEX","isChroma","set","isPcsetNum","isPcset","cache","listToChroma","chromaToPcset","pcset","IVLS","chromaToIntervals","intervals","modes","normalize","binary","_","r","isSubsetOf","s","isSupersetOf","chromaRotations","setNum","normalizedNum","normalized","pitch","CHORDS","data_default","NoChordType","dictionary","index","type","chordType","all","entries","add","aliases","fullName","quality","getQuality","chord","alias","addAlias","has","ivls","namedSet","pcToName","record","detect","source","x","findMatches","BITMASK","testChromaNumber","bitmask","chromaNumber","hasAnyThird","hasPerfectFifth","hasAnySeventh","hasNonPerfectFifth","hasAnyThirdAndPerfectFifthAndAnySeventh","withPerfectFifth","weight","tonic","tonicChroma","allModes","found","mode","modeWithPerfectFifth","chordName","baseNote","SCALES","NoScaleType","scale","scaleType","NoChord","tokenize","letter","acc","oct","tokenizeNote","tokenizeBass","split","getChord","bass","typeName","optionalTonic","optionalBass","bassInterval","distance","bassIndex","hasRoot","root","rootDegree","hasBass","newNum","ivl","subtract","symbol","slash","chordScales","isChordIncluded","extended","isSuperset","reduced","isSubset","degrees","tonicIntervalsTransposer","degree","steps","chord_default","NoScale","tokens","st","notesChroma","pitchClasses","scaleChroma","match","results","scaleName","scaleChords","inScale","scaleNotes","modeNames","tonics","modeName","getNoteNameOf","chromas","noteOrMidi","currNote","height","position","rangeOf","getName","fromNote","toNote","scale_default","NoRomanNumeral","parse","isPitch","fromPitch","romanNumeral","fromPitch","pitch","get","altToAcc","NAMES","REGEX","tokenize","str","ROMANS","NAMES_MINOR","parse","src","name","acc","roman","chordType","NoRomanNumeral","upperRoman","step","alt","accToAlt","dir","interval","Empty","NoKey","NoKeyScale","NoMajorKey","NoMinorKey","mapScaleToType","scale","list","sep","type","i","keyScale","grades","triads","chords","harmonicFunctions","chordScales","tonic","intervals","gr","get","interval","transpose","MajorScale","keyScale","NaturalScale","HarmonicScale","MelodicScale","_Chord","chord_default","_Scale","scale_default","mod","n","m","hsv2rgb","h","s","v","H","f","x","e","rgbToString","rgb","isNamedPitch","src","isPitch","pitch","FIFTHS","STEPS_TO_OCTS","fifths","coordinates","step","alt","oct","dir","o","FIFTHS_TO_STEPS","coord","unaltered","i","fillStr","NoInterval","INTERVAL_TONAL_REGEX","INTERVAL_SHORTHAND_REGEX","REGEX","tokenizeInterval","str","cache","interval","parse","pitchName","SIZES","TYPES","tokens","num","q","t","type","name","simple","qToAlt","semitones","chroma","coordToInterval","forceDescending","isDescending","ivl","props","calcNum","d","altToQ","NoNote","stepToLetter","altToAcc","accToAlt","acc","note","stringSrc","cached","value","tokenizeNote","coordToNote","noteCoord","SEMI","noteName","letter","octStr","pc","height","midi","freq","transpose","intervalName","intervalCoord","tr","tonicIntervalsTransposer","intervals","tonic","len","normalized","index","octaves","root","distance","fromNote","toNote","from","to","fcoord","tcoord","octs","deprecate","original","alternative","fn","args","isNamed","rotate","times","arr","compact","EmptyPcset","setNumToChroma","chromaToNumber","isChroma","set","isPcsetNum","isPcset","get","listToChroma","chromaToPcset","pcset","IVLS","chromaToIntervals","modes","normalize","binary","_","r","isSubsetOf","notes","isSupersetOf","chromaRotations","setNum","normalizedNum","CHORDS","data_default","NoChordType","dictionary","chordType","all","entries","add","aliases","fullName","quality","getQuality","chord","alias","addAlias","has","ivls","names","a","b","namedSet","pcToName","record","detect","source","options","findMatches","BITMASK","testChromaNumber","bitmask","chromaNumber","hasAnyThird","hasPerfectFifth","hasAnySeventh","hasNonPerfectFifth","hasAnyThirdAndPerfectFifthAndAnySeventh","withPerfectFifth","weight","tonicChroma","allModes","found","mode","modeWithPerfectFifth","chordName","baseNote","IQ","combinator","subtract","coordA","coordB","SCALES","NoScaleType","scaleType","scale","NoChord","tokenize","tokenizeBass","split","getChord","bass","typeName","optionalTonic","optionalBass","bassInterval","bassIndex","hasRoot","rootDegree","hasBass","newNum","symbol","slash","chordScales","isChordIncluded","extended","isSuperset","reduced","isSubset","degrees","degree","steps","chord_default","DATA","VALUES","denominator","shorthand","L2","L440","freqToMidi","SHARPS","FLATS","midiToNoteName","NAMES","toName","onlyNotes","array","pitchClass","accidentals","octave","fromMidi","fromFreq","fromFreqSharps","fromMidiSharps","transposeBy","trBy","transposeFrom","trFrom","transposeFifths","trFifths","transposeOctaves","ascending","descending","sortedNames","comparator","sortedUniqNames","simplify","enharmonic","destName","dest","srcChroma","destChroma","destOctOffset","destOct","note_default","NoRomanNumeral","fromPitch","romanNumeral","ROMANS","NAMES_MINOR","roman","upperRoman","Empty","NoKey","NoKeyScale","NoMajorKey","NoMinorKey","mapScaleToType","list","sep","keyScale","grades","triads","chords","harmonicFunctions","gr","MajorScale","NaturalScale","HarmonicScale","MelodicScale","MODES","NoMode","toMode","modeNum","triad","seventh","modeName","tonics","seventhChords","NoScale","st","topNoteDiff","voicings","lastVoicing","topNoteMidi","voicing","diff","voice_leading_default","lefthand","defaultDictionary","lookup","match","_symbol","voicing_dictionary_default","defaultVoiceLeading","green_hue","fifthToColor","note","s","v","chroma","f","dt","col","hsv2rgb","green_hue","rgbToString","shorten_chord","chord","shorten_key","key","tonic","type","search_items_overlaps_range","items","begin","end","bl","el","br","er","b_tgt","e_tgt","bmf","bmc","bm_val","emf","emc","em_val","search_items_begins_in_range","debug_mode","debug_log_element","l","detected_romans","detected_melodies","romans","melodies","i","V","calcTempo","melody_bpm","onsets","S","melody_phase","b","e","term","bpm2","F","bpm","f","entropy","sum","Z","prob","p","w","tau","x","tps","J","$","roman_bpm","_","tempo","phase","audio_area","audio","a","v","RectParameters","args","getPianoRollWidth","octave_height","octave_cnt","piano_roll_begin","white_key_prm","black_key_prm","white_bgs_prm","black_bgs_prm","piano_roll_height","black_position","white_position","chord_text_em","chord_text_size","key_text_pos","piano_roll_time_length","chord_name_margin","triangle_width","triangle_height","SvgWindow","name","all","c","begin","end","append","chord_rects","oct","ko","note","Bs","dt","chord_names","Us","chord_romans","chord_keys","$o","Ls","beat_bars","d_melody_svgs","melody_svgs","arrow_svgs","stroke","next","fill","g","gravity","white_BGs","j","black_BGs","white_key","black_key","octave_BGs","octave_key","current_time_line","piano_roll","piano_roll_place","refresh_arrow","arrow_svgs","note_size","current_time_x","std_pos","e","src_x","dst_x","src_y","dst_y","dx","dy","r","cos","sin","p","triangle_width","triangle_height","old_time","fps_element","l","last_audio_time","refresh","now","fps","now_at","audio","current_time_ratio","getPianoRollWidth","piano_roll_time_length","chord_rects","chord_names","chord_romans","chord_keys","beat_bars","d_melody_svgs","melody_svgs","key_text_pos","reservation_range","beat_range","x","i","V","melody_range","draw","piano_roll_width","chord_name_margin","white_bgs_prm","black_bgs_prm","black_BGs","white_BGs","black_key","white_key","octave_BGs","octave_key","piano_roll","piano_roll_height","chord_text_size","current_time_line","main","melodies","update","tempo"]}