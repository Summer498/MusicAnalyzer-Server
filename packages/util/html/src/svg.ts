import { recurrentArray } from "@music-analyzer/stdlib/src/array-of-array/array-of-array";
import { attribute } from "./attribute";
import { svgElement } from "./svg-element";

export const SVG = {
   a(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("a", attributes, text, children); },
   animate(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("animate", attributes, text, children); },
   animateMotion(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("animateMotion", attributes, text, children); },
   animateTransform(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("animateTransform", attributes, text, children); },
   circle(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("circle", attributes, text, children); },
   clipPath(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("clipPath", attributes, text, children); },
   defs(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("defs", attributes, text, children); },
   desc(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("desc", attributes, text, children); },
   ellipse(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("ellipse", attributes, text, children); },
   feBlend(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feBlend", attributes, text, children); },
   feColorMatrix(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feColorMatrix", attributes, text, children); },
   feComponentTransfer(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feComponentTransfer", attributes, text, children); },
   feComposite(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feComposite", attributes, text, children); },
   feConvolveMatrix(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feConvolveMatrix", attributes, text, children); },
   feDiffuseLighting(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feDiffuseLighting", attributes, text, children); },
   feDisplacementMap(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feDisplacementMap", attributes, text, children); },
   feDistantLight(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feDistantLight", attributes, text, children); },
   feDropShadow(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feDropShadow", attributes, text, children); },
   feFlood(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feFlood", attributes, text, children); },
   feFuncA(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feFuncA", attributes, text, children); },
   feFuncB(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feFuncB", attributes, text, children); },
   feFuncG(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feFuncG", attributes, text, children); },
   feFuncR(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feFuncR", attributes, text, children); },
   feGaussianBlur(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feGaussianBlur", attributes, text, children); },
   feImage(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feImage", attributes, text, children); },
   feMerge(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feMerge", attributes, text, children); },
   feMergeNode(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feMergeNode", attributes, text, children); },
   feMorphology(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feMorphology", attributes, text, children); },
   feOffset(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feOffset", attributes, text, children); },
   fePointLight(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("fePointLight", attributes, text, children); },
   feSpecularLighting(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feSpecularLighting", attributes, text, children); },
   feSpotLight(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feSpotLight", attributes, text, children); },
   feTile(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feTile", attributes, text, children); },
   feTurbulence(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("feTurbulence", attributes, text, children); },
   filter(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("filter", attributes, text, children); },
   foreignObject(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("foreignObject", attributes, text, children); },
   g(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("g", attributes, text, children); },
   image(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("image", attributes, text, children); },
   line(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("line", attributes, text, children); },
   linearGradient(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("linearGradient", attributes, text, children); },
   marker(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("marker", attributes, text, children); },
   mask(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("mask", attributes, text, children); },
   metadata(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("metadata", attributes, text, children); },
   mpath(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("mpath", attributes, text, children); },
   path(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("path", attributes, text, children); },
   pattern(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("pattern", attributes, text, children); },
   polygon(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("polygon", attributes, text, children); },
   polyline(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("polyline", attributes, text, children); },
   radialGradient(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("radialGradient", attributes, text, children); },
   rect(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("rect", attributes, text, children); },
   script(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("script", attributes, text, children); },
   set(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("set", attributes, text, children); },
   stop(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("stop", attributes, text, children); },
   style(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("style", attributes, text, children); },
   svg(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("svg", attributes, text, children); },
   switch(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("switch", attributes, text, children); },
   symbol(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("symbol", attributes, text, children); },
   text(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("text", attributes, text, children); },
   textPath(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("textPath", attributes, text, children); },
   title(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("title", attributes, text, children); },
   tspan(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("tspan", attributes, text, children); },
   use(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("use", attributes, text, children); },
   view(attributes?: attribute, text?: string, children?: recurrentArray<Element>) { return svgElement("view", attributes, text, children); },
};
